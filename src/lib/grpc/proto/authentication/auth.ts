/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: authentication/auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace auth {
    export class BatchImportUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: UserData[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, UserData, 1) as UserData[];
        }
        set users(value: UserData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof UserData.prototype.toObject>[];
        }): BatchImportUsersRequest {
            const message = new BatchImportUsersRequest({});
            if (data.users != null) {
                message.users = data.users.map(item => UserData.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof UserData.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: UserData) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: UserData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchImportUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchImportUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserData.deserialize(reader), UserData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchImportUsersRequest {
            return BatchImportUsersRequest.deserialize(bytes);
        }
    }
    export class UserData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            firstName?: string;
            lastName?: string;
            email?: string;
            userRole?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactEmail?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            nationalID?: string;
            safeguarding_certificate_url?: string;
            grade?: string;
            hasInternship?: boolean;
            isEnrolledInUniversity?: boolean;
            gender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
                if ("schoolName" in data && data.schoolName != undefined) {
                    this.schoolName = data.schoolName;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("province" in data && data.province != undefined) {
                    this.province = data.province;
                }
                if ("district" in data && data.district != undefined) {
                    this.district = data.district;
                }
                if ("schoolType" in data && data.schoolType != undefined) {
                    this.schoolType = data.schoolType;
                }
                if ("contactEmail" in data && data.contactEmail != undefined) {
                    this.contactEmail = data.contactEmail;
                }
                if ("graduationYear" in data && data.graduationYear != undefined) {
                    this.graduationYear = data.graduationYear;
                }
                if ("roleInterestedIn" in data && data.roleInterestedIn != undefined) {
                    this.roleInterestedIn = data.roleInterestedIn;
                }
                if ("nationalID" in data && data.nationalID != undefined) {
                    this.nationalID = data.nationalID;
                }
                if ("safeguarding_certificate_url" in data && data.safeguarding_certificate_url != undefined) {
                    this.safeguarding_certificate_url = data.safeguarding_certificate_url;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("hasInternship" in data && data.hasInternship != undefined) {
                    this.hasInternship = data.hasInternship;
                }
                if ("isEnrolledInUniversity" in data && data.isEnrolledInUniversity != undefined) {
                    this.isEnrolledInUniversity = data.isEnrolledInUniversity;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
            }
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get schoolName() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set schoolName(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get province() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set province(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get district() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set district(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get schoolType() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set schoolType(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get contactEmail() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set contactEmail(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get graduationYear() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set graduationYear(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get roleInterestedIn() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set roleInterestedIn(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get nationalID() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set nationalID(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get safeguarding_certificate_url() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set safeguarding_certificate_url(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set grade(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get hasInternship() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set hasInternship(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get isEnrolledInUniversity() {
            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
        }
        set isEnrolledInUniversity(value: boolean) {
            pb_1.Message.setField(this, 20, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            firstName?: string;
            lastName?: string;
            email?: string;
            userRole?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactEmail?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            nationalID?: string;
            safeguarding_certificate_url?: string;
            grade?: string;
            hasInternship?: boolean;
            isEnrolledInUniversity?: boolean;
            gender?: string;
        }): UserData {
            const message = new UserData({});
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            if (data.schoolName != null) {
                message.schoolName = data.schoolName;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.province != null) {
                message.province = data.province;
            }
            if (data.district != null) {
                message.district = data.district;
            }
            if (data.schoolType != null) {
                message.schoolType = data.schoolType;
            }
            if (data.contactEmail != null) {
                message.contactEmail = data.contactEmail;
            }
            if (data.graduationYear != null) {
                message.graduationYear = data.graduationYear;
            }
            if (data.roleInterestedIn != null) {
                message.roleInterestedIn = data.roleInterestedIn;
            }
            if (data.nationalID != null) {
                message.nationalID = data.nationalID;
            }
            if (data.safeguarding_certificate_url != null) {
                message.safeguarding_certificate_url = data.safeguarding_certificate_url;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.hasInternship != null) {
                message.hasInternship = data.hasInternship;
            }
            if (data.isEnrolledInUniversity != null) {
                message.isEnrolledInUniversity = data.isEnrolledInUniversity;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            return message;
        }
        toObject() {
            const data: {
                firstName?: string;
                lastName?: string;
                email?: string;
                userRole?: string;
                dateOfBirth?: string;
                schoolID?: number;
                schoolName?: string;
                address?: string;
                country?: string;
                province?: string;
                district?: string;
                schoolType?: string;
                contactEmail?: string;
                graduationYear?: number;
                roleInterestedIn?: string;
                nationalID?: string;
                safeguarding_certificate_url?: string;
                grade?: string;
                hasInternship?: boolean;
                isEnrolledInUniversity?: boolean;
                gender?: string;
            } = {};
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            if (this.schoolName != null) {
                data.schoolName = this.schoolName;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.province != null) {
                data.province = this.province;
            }
            if (this.district != null) {
                data.district = this.district;
            }
            if (this.schoolType != null) {
                data.schoolType = this.schoolType;
            }
            if (this.contactEmail != null) {
                data.contactEmail = this.contactEmail;
            }
            if (this.graduationYear != null) {
                data.graduationYear = this.graduationYear;
            }
            if (this.roleInterestedIn != null) {
                data.roleInterestedIn = this.roleInterestedIn;
            }
            if (this.nationalID != null) {
                data.nationalID = this.nationalID;
            }
            if (this.safeguarding_certificate_url != null) {
                data.safeguarding_certificate_url = this.safeguarding_certificate_url;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.hasInternship != null) {
                data.hasInternship = this.hasInternship;
            }
            if (this.isEnrolledInUniversity != null) {
                data.isEnrolledInUniversity = this.isEnrolledInUniversity;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firstName.length)
                writer.writeString(1, this.firstName);
            if (this.lastName.length)
                writer.writeString(2, this.lastName);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.userRole.length)
                writer.writeString(4, this.userRole);
            if (this.dateOfBirth.length)
                writer.writeString(5, this.dateOfBirth);
            if (this.schoolID != 0)
                writer.writeInt32(6, this.schoolID);
            if (this.schoolName.length)
                writer.writeString(7, this.schoolName);
            if (this.address.length)
                writer.writeString(8, this.address);
            if (this.country.length)
                writer.writeString(9, this.country);
            if (this.province.length)
                writer.writeString(10, this.province);
            if (this.district.length)
                writer.writeString(11, this.district);
            if (this.schoolType.length)
                writer.writeString(12, this.schoolType);
            if (this.contactEmail.length)
                writer.writeString(13, this.contactEmail);
            if (this.graduationYear != 0)
                writer.writeInt32(14, this.graduationYear);
            if (this.roleInterestedIn.length)
                writer.writeString(15, this.roleInterestedIn);
            if (this.nationalID.length)
                writer.writeString(16, this.nationalID);
            if (this.safeguarding_certificate_url.length)
                writer.writeString(17, this.safeguarding_certificate_url);
            if (this.grade.length)
                writer.writeString(18, this.grade);
            if (this.hasInternship != false)
                writer.writeBool(19, this.hasInternship);
            if (this.isEnrolledInUniversity != false)
                writer.writeBool(20, this.isEnrolledInUniversity);
            if (this.gender.length)
                writer.writeString(21, this.gender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.firstName = reader.readString();
                        break;
                    case 2:
                        message.lastName = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.userRole = reader.readString();
                        break;
                    case 5:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 6:
                        message.schoolID = reader.readInt32();
                        break;
                    case 7:
                        message.schoolName = reader.readString();
                        break;
                    case 8:
                        message.address = reader.readString();
                        break;
                    case 9:
                        message.country = reader.readString();
                        break;
                    case 10:
                        message.province = reader.readString();
                        break;
                    case 11:
                        message.district = reader.readString();
                        break;
                    case 12:
                        message.schoolType = reader.readString();
                        break;
                    case 13:
                        message.contactEmail = reader.readString();
                        break;
                    case 14:
                        message.graduationYear = reader.readInt32();
                        break;
                    case 15:
                        message.roleInterestedIn = reader.readString();
                        break;
                    case 16:
                        message.nationalID = reader.readString();
                        break;
                    case 17:
                        message.safeguarding_certificate_url = reader.readString();
                        break;
                    case 18:
                        message.grade = reader.readString();
                        break;
                    case 19:
                        message.hasInternship = reader.readBool();
                        break;
                    case 20:
                        message.isEnrolledInUniversity = reader.readBool();
                        break;
                    case 21:
                        message.gender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserData {
            return UserData.deserialize(bytes);
        }
    }
    export class BatchImportUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            importedCount?: number;
            failedEmails?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("importedCount" in data && data.importedCount != undefined) {
                    this.importedCount = data.importedCount;
                }
                if ("failedEmails" in data && data.failedEmails != undefined) {
                    this.failedEmails = data.failedEmails;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get importedCount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set importedCount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get failedEmails() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set failedEmails(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            importedCount?: number;
            failedEmails?: string[];
        }): BatchImportUsersResponse {
            const message = new BatchImportUsersResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.importedCount != null) {
                message.importedCount = data.importedCount;
            }
            if (data.failedEmails != null) {
                message.failedEmails = data.failedEmails;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                importedCount?: number;
                failedEmails?: string[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.importedCount != null) {
                data.importedCount = this.importedCount;
            }
            if (this.failedEmails != null) {
                data.failedEmails = this.failedEmails;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.importedCount != 0)
                writer.writeInt32(3, this.importedCount);
            if (this.failedEmails.length)
                writer.writeRepeatedString(4, this.failedEmails);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchImportUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchImportUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.importedCount = reader.readInt32();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchImportUsersResponse {
            return BatchImportUsersResponse.deserialize(bytes);
        }
    }
    export class SignUpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            userRole?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactPersonNumber?: string;
            contactEmail?: string;
            nationalID?: string;
            schoolAttended?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            grade?: string;
            hasInternship?: boolean;
            isEnrolledInUniversity?: boolean;
            gender?: string;
            safeguarding_certificate_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
                if ("schoolName" in data && data.schoolName != undefined) {
                    this.schoolName = data.schoolName;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("province" in data && data.province != undefined) {
                    this.province = data.province;
                }
                if ("district" in data && data.district != undefined) {
                    this.district = data.district;
                }
                if ("schoolType" in data && data.schoolType != undefined) {
                    this.schoolType = data.schoolType;
                }
                if ("contactPersonName" in data && data.contactPersonName != undefined) {
                    this.contactPersonName = data.contactPersonName;
                }
                if ("contactPersonNumber" in data && data.contactPersonNumber != undefined) {
                    this.contactPersonNumber = data.contactPersonNumber;
                }
                if ("contactEmail" in data && data.contactEmail != undefined) {
                    this.contactEmail = data.contactEmail;
                }
                if ("nationalID" in data && data.nationalID != undefined) {
                    this.nationalID = data.nationalID;
                }
                if ("schoolAttended" in data && data.schoolAttended != undefined) {
                    this.schoolAttended = data.schoolAttended;
                }
                if ("graduationYear" in data && data.graduationYear != undefined) {
                    this.graduationYear = data.graduationYear;
                }
                if ("roleInterestedIn" in data && data.roleInterestedIn != undefined) {
                    this.roleInterestedIn = data.roleInterestedIn;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("hasInternship" in data && data.hasInternship != undefined) {
                    this.hasInternship = data.hasInternship;
                }
                if ("isEnrolledInUniversity" in data && data.isEnrolledInUniversity != undefined) {
                    this.isEnrolledInUniversity = data.isEnrolledInUniversity;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("safeguarding_certificate_url" in data && data.safeguarding_certificate_url != undefined) {
                    this.safeguarding_certificate_url = data.safeguarding_certificate_url;
                }
            }
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get schoolName() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set schoolName(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get province() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set province(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get district() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set district(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get schoolType() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set schoolType(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get contactPersonName() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set contactPersonName(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get contactPersonNumber() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set contactPersonNumber(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get contactEmail() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set contactEmail(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get nationalID() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set nationalID(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get schoolAttended() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set schoolAttended(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get graduationYear() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set graduationYear(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get roleInterestedIn() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set roleInterestedIn(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set grade(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get hasInternship() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set hasInternship(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get isEnrolledInUniversity() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        set isEnrolledInUniversity(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get safeguarding_certificate_url() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set safeguarding_certificate_url(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        static fromObject(data: {
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            userRole?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactPersonNumber?: string;
            contactEmail?: string;
            nationalID?: string;
            schoolAttended?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            grade?: string;
            hasInternship?: boolean;
            isEnrolledInUniversity?: boolean;
            gender?: string;
            safeguarding_certificate_url?: string;
        }): SignUpRequest {
            const message = new SignUpRequest({});
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            if (data.schoolName != null) {
                message.schoolName = data.schoolName;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.province != null) {
                message.province = data.province;
            }
            if (data.district != null) {
                message.district = data.district;
            }
            if (data.schoolType != null) {
                message.schoolType = data.schoolType;
            }
            if (data.contactPersonName != null) {
                message.contactPersonName = data.contactPersonName;
            }
            if (data.contactPersonNumber != null) {
                message.contactPersonNumber = data.contactPersonNumber;
            }
            if (data.contactEmail != null) {
                message.contactEmail = data.contactEmail;
            }
            if (data.nationalID != null) {
                message.nationalID = data.nationalID;
            }
            if (data.schoolAttended != null) {
                message.schoolAttended = data.schoolAttended;
            }
            if (data.graduationYear != null) {
                message.graduationYear = data.graduationYear;
            }
            if (data.roleInterestedIn != null) {
                message.roleInterestedIn = data.roleInterestedIn;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.hasInternship != null) {
                message.hasInternship = data.hasInternship;
            }
            if (data.isEnrolledInUniversity != null) {
                message.isEnrolledInUniversity = data.isEnrolledInUniversity;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.safeguarding_certificate_url != null) {
                message.safeguarding_certificate_url = data.safeguarding_certificate_url;
            }
            return message;
        }
        toObject() {
            const data: {
                firstName?: string;
                lastName?: string;
                email?: string;
                password?: string;
                userRole?: string;
                dateOfBirth?: string;
                schoolID?: number;
                schoolName?: string;
                address?: string;
                country?: string;
                province?: string;
                district?: string;
                schoolType?: string;
                contactPersonName?: string;
                contactPersonNumber?: string;
                contactEmail?: string;
                nationalID?: string;
                schoolAttended?: string;
                graduationYear?: number;
                roleInterestedIn?: string;
                grade?: string;
                hasInternship?: boolean;
                isEnrolledInUniversity?: boolean;
                gender?: string;
                safeguarding_certificate_url?: string;
            } = {};
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            if (this.schoolName != null) {
                data.schoolName = this.schoolName;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.province != null) {
                data.province = this.province;
            }
            if (this.district != null) {
                data.district = this.district;
            }
            if (this.schoolType != null) {
                data.schoolType = this.schoolType;
            }
            if (this.contactPersonName != null) {
                data.contactPersonName = this.contactPersonName;
            }
            if (this.contactPersonNumber != null) {
                data.contactPersonNumber = this.contactPersonNumber;
            }
            if (this.contactEmail != null) {
                data.contactEmail = this.contactEmail;
            }
            if (this.nationalID != null) {
                data.nationalID = this.nationalID;
            }
            if (this.schoolAttended != null) {
                data.schoolAttended = this.schoolAttended;
            }
            if (this.graduationYear != null) {
                data.graduationYear = this.graduationYear;
            }
            if (this.roleInterestedIn != null) {
                data.roleInterestedIn = this.roleInterestedIn;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.hasInternship != null) {
                data.hasInternship = this.hasInternship;
            }
            if (this.isEnrolledInUniversity != null) {
                data.isEnrolledInUniversity = this.isEnrolledInUniversity;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.safeguarding_certificate_url != null) {
                data.safeguarding_certificate_url = this.safeguarding_certificate_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firstName.length)
                writer.writeString(1, this.firstName);
            if (this.lastName.length)
                writer.writeString(2, this.lastName);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.password.length)
                writer.writeString(4, this.password);
            if (this.userRole.length)
                writer.writeString(5, this.userRole);
            if (this.dateOfBirth.length)
                writer.writeString(6, this.dateOfBirth);
            if (this.schoolID != 0)
                writer.writeInt32(7, this.schoolID);
            if (this.schoolName.length)
                writer.writeString(8, this.schoolName);
            if (this.address.length)
                writer.writeString(9, this.address);
            if (this.country.length)
                writer.writeString(10, this.country);
            if (this.province.length)
                writer.writeString(11, this.province);
            if (this.district.length)
                writer.writeString(12, this.district);
            if (this.schoolType.length)
                writer.writeString(13, this.schoolType);
            if (this.contactPersonName.length)
                writer.writeString(14, this.contactPersonName);
            if (this.contactPersonNumber.length)
                writer.writeString(15, this.contactPersonNumber);
            if (this.contactEmail.length)
                writer.writeString(16, this.contactEmail);
            if (this.nationalID.length)
                writer.writeString(17, this.nationalID);
            if (this.schoolAttended.length)
                writer.writeString(18, this.schoolAttended);
            if (this.graduationYear != 0)
                writer.writeInt32(19, this.graduationYear);
            if (this.roleInterestedIn.length)
                writer.writeString(20, this.roleInterestedIn);
            if (this.grade.length)
                writer.writeString(21, this.grade);
            if (this.hasInternship != false)
                writer.writeBool(22, this.hasInternship);
            if (this.isEnrolledInUniversity != false)
                writer.writeBool(23, this.isEnrolledInUniversity);
            if (this.gender.length)
                writer.writeString(24, this.gender);
            if (this.safeguarding_certificate_url.length)
                writer.writeString(25, this.safeguarding_certificate_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.firstName = reader.readString();
                        break;
                    case 2:
                        message.lastName = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    case 5:
                        message.userRole = reader.readString();
                        break;
                    case 6:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 7:
                        message.schoolID = reader.readInt32();
                        break;
                    case 8:
                        message.schoolName = reader.readString();
                        break;
                    case 9:
                        message.address = reader.readString();
                        break;
                    case 10:
                        message.country = reader.readString();
                        break;
                    case 11:
                        message.province = reader.readString();
                        break;
                    case 12:
                        message.district = reader.readString();
                        break;
                    case 13:
                        message.schoolType = reader.readString();
                        break;
                    case 14:
                        message.contactPersonName = reader.readString();
                        break;
                    case 15:
                        message.contactPersonNumber = reader.readString();
                        break;
                    case 16:
                        message.contactEmail = reader.readString();
                        break;
                    case 17:
                        message.nationalID = reader.readString();
                        break;
                    case 18:
                        message.schoolAttended = reader.readString();
                        break;
                    case 19:
                        message.graduationYear = reader.readInt32();
                        break;
                    case 20:
                        message.roleInterestedIn = reader.readString();
                        break;
                    case 21:
                        message.grade = reader.readString();
                        break;
                    case 22:
                        message.hasInternship = reader.readBool();
                        break;
                    case 23:
                        message.isEnrolledInUniversity = reader.readBool();
                        break;
                    case 24:
                        message.gender = reader.readString();
                        break;
                    case 25:
                        message.safeguarding_certificate_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpRequest {
            return SignUpRequest.deserialize(bytes);
        }
    }
    export class SignUpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            status?: string;
        }): SignUpResponse {
            const message = new SignUpResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                status?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.status.length)
                writer.writeString(3, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpResponse {
            return SignUpResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email_or_id?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email_or_id" in data && data.email_or_id != undefined) {
                    this.email_or_id = data.email_or_id;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email_or_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email_or_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email_or_id?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email_or_id != null) {
                message.email_or_id = data.email_or_id;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email_or_id?: string;
                password?: string;
            } = {};
            if (this.email_or_id != null) {
                data.email_or_id = this.email_or_id;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email_or_id.length)
                writer.writeString(1, this.email_or_id);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email_or_id = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            token?: string;
            userRole?: string;
            userID?: number;
            require_two_factor?: boolean;
            require_password_reset?: boolean;
            message?: string;
            status?: string;
            userName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("require_two_factor" in data && data.require_two_factor != undefined) {
                    this.require_two_factor = data.require_two_factor;
                }
                if ("require_password_reset" in data && data.require_password_reset != undefined) {
                    this.require_password_reset = data.require_password_reset;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("userName" in data && data.userName != undefined) {
                    this.userName = data.userName;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get require_two_factor() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set require_two_factor(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get require_password_reset() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set require_password_reset(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get userName() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set userName(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            success?: boolean;
            token?: string;
            userRole?: string;
            userID?: number;
            require_two_factor?: boolean;
            require_password_reset?: boolean;
            message?: string;
            status?: string;
            userName?: string;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.require_two_factor != null) {
                message.require_two_factor = data.require_two_factor;
            }
            if (data.require_password_reset != null) {
                message.require_password_reset = data.require_password_reset;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.userName != null) {
                message.userName = data.userName;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                token?: string;
                userRole?: string;
                userID?: number;
                require_two_factor?: boolean;
                require_password_reset?: boolean;
                message?: string;
                status?: string;
                userName?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.require_two_factor != null) {
                data.require_two_factor = this.require_two_factor;
            }
            if (this.require_password_reset != null) {
                data.require_password_reset = this.require_password_reset;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.userName != null) {
                data.userName = this.userName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.userRole.length)
                writer.writeString(3, this.userRole);
            if (this.userID != 0)
                writer.writeInt32(4, this.userID);
            if (this.require_two_factor != false)
                writer.writeBool(5, this.require_two_factor);
            if (this.require_password_reset != false)
                writer.writeBool(6, this.require_password_reset);
            if (this.message.length)
                writer.writeString(7, this.message);
            if (this.status.length)
                writer.writeString(8, this.status);
            if (this.userName.length)
                writer.writeString(9, this.userName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        message.userRole = reader.readString();
                        break;
                    case 4:
                        message.userID = reader.readInt32();
                        break;
                    case 5:
                        message.require_two_factor = reader.readBool();
                        break;
                    case 6:
                        message.require_password_reset = reader.readBool();
                        break;
                    case 7:
                        message.message = reader.readString();
                        break;
                    case 8:
                        message.status = reader.readString();
                        break;
                    case 9:
                        message.userName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class EnableTwoFactorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): EnableTwoFactorRequest {
            const message = new EnableTwoFactorRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableTwoFactorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableTwoFactorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableTwoFactorRequest {
            return EnableTwoFactorRequest.deserialize(bytes);
        }
    }
    export class EnableTwoFactorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): EnableTwoFactorResponse {
            const message = new EnableTwoFactorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableTwoFactorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableTwoFactorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableTwoFactorResponse {
            return EnableTwoFactorResponse.deserialize(bytes);
        }
    }
    export class DisableTwoFactorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): DisableTwoFactorRequest {
            const message = new DisableTwoFactorRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisableTwoFactorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisableTwoFactorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisableTwoFactorRequest {
            return DisableTwoFactorRequest.deserialize(bytes);
        }
    }
    export class DisableTwoFactorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DisableTwoFactorResponse {
            const message = new DisableTwoFactorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisableTwoFactorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisableTwoFactorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisableTwoFactorResponse {
            return DisableTwoFactorResponse.deserialize(bytes);
        }
    }
    export class GenerateTwoFactorOTPRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): GenerateTwoFactorOTPRequest {
            const message = new GenerateTwoFactorOTPRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateTwoFactorOTPRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateTwoFactorOTPRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateTwoFactorOTPRequest {
            return GenerateTwoFactorOTPRequest.deserialize(bytes);
        }
    }
    export class GenerateTwoFactorOTPResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): GenerateTwoFactorOTPResponse {
            const message = new GenerateTwoFactorOTPResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateTwoFactorOTPResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateTwoFactorOTPResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateTwoFactorOTPResponse {
            return GenerateTwoFactorOTPResponse.deserialize(bytes);
        }
    }
    export class VerifyTwoFactorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            code?: string;
        }): VerifyTwoFactorRequest {
            const message = new VerifyTwoFactorRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                code?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyTwoFactorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyTwoFactorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyTwoFactorRequest {
            return VerifyTwoFactorRequest.deserialize(bytes);
        }
    }
    export class PasswordResetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): PasswordResetRequest {
            const message = new PasswordResetRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PasswordResetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PasswordResetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PasswordResetRequest {
            return PasswordResetRequest.deserialize(bytes);
        }
    }
    export class PasswordResetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): PasswordResetResponse {
            const message = new PasswordResetResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PasswordResetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PasswordResetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PasswordResetResponse {
            return PasswordResetResponse.deserialize(bytes);
        }
    }
    export class ResetPasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            newPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            newPassword?: string;
        }): ResetPasswordRequest {
            const message = new ResetPasswordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                newPassword?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.newPassword.length)
                writer.writeString(2, this.newPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.newPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordRequest {
            return ResetPasswordRequest.deserialize(bytes);
        }
    }
    export class ResetPasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): ResetPasswordResponse {
            const message = new ResetPasswordResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordResponse {
            return ResetPasswordResponse.deserialize(bytes);
        }
    }
    export class BeginWebAuthnRegistrationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): BeginWebAuthnRegistrationRequest {
            const message = new BeginWebAuthnRegistrationRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginWebAuthnRegistrationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginWebAuthnRegistrationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginWebAuthnRegistrationRequest {
            return BeginWebAuthnRegistrationRequest.deserialize(bytes);
        }
    }
    export class BeginWebAuthnRegistrationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            options?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get options() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set options(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            options?: Uint8Array;
        }): BeginWebAuthnRegistrationResponse {
            const message = new BeginWebAuthnRegistrationResponse({});
            if (data.options != null) {
                message.options = data.options;
            }
            return message;
        }
        toObject() {
            const data: {
                options?: Uint8Array;
            } = {};
            if (this.options != null) {
                data.options = this.options;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.options.length)
                writer.writeBytes(1, this.options);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginWebAuthnRegistrationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginWebAuthnRegistrationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.options = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginWebAuthnRegistrationResponse {
            return BeginWebAuthnRegistrationResponse.deserialize(bytes);
        }
    }
    export class FinishWebAuthnRegistrationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
            credential?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get credential() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set credential(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
            credential?: Uint8Array;
        }): FinishWebAuthnRegistrationRequest {
            const message = new FinishWebAuthnRegistrationRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.credential != null) {
                message.credential = data.credential;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
                credential?: Uint8Array;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.credential != null) {
                data.credential = this.credential;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (this.credential.length)
                writer.writeBytes(3, this.credential);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinishWebAuthnRegistrationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinishWebAuthnRegistrationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    case 3:
                        message.credential = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinishWebAuthnRegistrationRequest {
            return FinishWebAuthnRegistrationRequest.deserialize(bytes);
        }
    }
    export class FinishWebAuthnRegistrationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): FinishWebAuthnRegistrationResponse {
            const message = new FinishWebAuthnRegistrationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinishWebAuthnRegistrationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinishWebAuthnRegistrationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinishWebAuthnRegistrationResponse {
            return FinishWebAuthnRegistrationResponse.deserialize(bytes);
        }
    }
    export class BeginWebAuthnLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): BeginWebAuthnLoginRequest {
            const message = new BeginWebAuthnLoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginWebAuthnLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginWebAuthnLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginWebAuthnLoginRequest {
            return BeginWebAuthnLoginRequest.deserialize(bytes);
        }
    }
    export class BeginWebAuthnLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            options?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get options() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set options(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            options?: Uint8Array;
        }): BeginWebAuthnLoginResponse {
            const message = new BeginWebAuthnLoginResponse({});
            if (data.options != null) {
                message.options = data.options;
            }
            return message;
        }
        toObject() {
            const data: {
                options?: Uint8Array;
            } = {};
            if (this.options != null) {
                data.options = this.options;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.options.length)
                writer.writeBytes(1, this.options);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginWebAuthnLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginWebAuthnLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.options = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginWebAuthnLoginResponse {
            return BeginWebAuthnLoginResponse.deserialize(bytes);
        }
    }
    export class FinishWebAuthnLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            credential?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set credential(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            credential?: Uint8Array;
        }): FinishWebAuthnLoginRequest {
            const message = new FinishWebAuthnLoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.credential != null) {
                message.credential = data.credential;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                credential?: Uint8Array;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.credential != null) {
                data.credential = this.credential;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.credential.length)
                writer.writeBytes(2, this.credential);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinishWebAuthnLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinishWebAuthnLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.credential = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinishWebAuthnLoginRequest {
            return FinishWebAuthnLoginRequest.deserialize(bytes);
        }
    }
    export class FinishWebAuthnLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            token?: string;
        }): FinishWebAuthnLoginResponse {
            const message = new FinishWebAuthnLoginResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                token?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinishWebAuthnLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinishWebAuthnLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinishWebAuthnLoginResponse {
            return FinishWebAuthnLoginResponse.deserialize(bytes);
        }
    }
    export class LogoutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userID?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            userID?: number;
            token?: string;
        }): LogoutRequest {
            const message = new LogoutRequest({});
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                userID?: number;
                token?: string;
            } = {};
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userID != 0)
                writer.writeInt32(1, this.userID);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userID = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutRequest {
            return LogoutRequest.deserialize(bytes);
        }
    }
    export class LogoutResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): LogoutResponse {
            const message = new LogoutResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutResponse {
            return LogoutResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            SignUp: {
                path: "/auth.AuthService/SignUp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignUpRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignUpRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignUpResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignUpResponse.deserialize(new Uint8Array(bytes))
            },
            BatchImportUsers: {
                path: "/auth.AuthService/BatchImportUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchImportUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchImportUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchImportUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchImportUsersResponse.deserialize(new Uint8Array(bytes))
            },
            AdminLogin: {
                path: "/auth.AuthService/AdminLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            StudentLogin: {
                path: "/auth.AuthService/StudentLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            VolunteerLogin: {
                path: "/auth.AuthService/VolunteerLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            SchoolLogin: {
                path: "/auth.AuthService/SchoolLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            EnableTwoFactor: {
                path: "/auth.AuthService/EnableTwoFactor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EnableTwoFactorRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EnableTwoFactorRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EnableTwoFactorResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EnableTwoFactorResponse.deserialize(new Uint8Array(bytes))
            },
            DisableTwoFactor: {
                path: "/auth.AuthService/DisableTwoFactor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DisableTwoFactorRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DisableTwoFactorRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DisableTwoFactorResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DisableTwoFactorResponse.deserialize(new Uint8Array(bytes))
            },
            GenerateTwoFactorOTP: {
                path: "/auth.AuthService/GenerateTwoFactorOTP",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateTwoFactorOTPRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateTwoFactorOTPRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateTwoFactorOTPResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateTwoFactorOTPResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyTwoFactor: {
                path: "/auth.AuthService/VerifyTwoFactor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyTwoFactorRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyTwoFactorRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            RequestPasswordReset: {
                path: "/auth.AuthService/RequestPasswordReset",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PasswordResetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PasswordResetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PasswordResetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PasswordResetResponse.deserialize(new Uint8Array(bytes))
            },
            ResetPassword: {
                path: "/auth.AuthService/ResetPassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResetPasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResetPasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResetPasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResetPasswordResponse.deserialize(new Uint8Array(bytes))
            },
            BeginWebAuthnRegistration: {
                path: "/auth.AuthService/BeginWebAuthnRegistration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BeginWebAuthnRegistrationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BeginWebAuthnRegistrationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BeginWebAuthnRegistrationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BeginWebAuthnRegistrationResponse.deserialize(new Uint8Array(bytes))
            },
            FinishWebAuthnRegistration: {
                path: "/auth.AuthService/FinishWebAuthnRegistration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FinishWebAuthnRegistrationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FinishWebAuthnRegistrationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FinishWebAuthnRegistrationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FinishWebAuthnRegistrationResponse.deserialize(new Uint8Array(bytes))
            },
            BeginWebAuthnLogin: {
                path: "/auth.AuthService/BeginWebAuthnLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BeginWebAuthnLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BeginWebAuthnLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BeginWebAuthnLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BeginWebAuthnLoginResponse.deserialize(new Uint8Array(bytes))
            },
            FinishWebAuthnLogin: {
                path: "/auth.AuthService/FinishWebAuthnLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FinishWebAuthnLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FinishWebAuthnLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FinishWebAuthnLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FinishWebAuthnLoginResponse.deserialize(new Uint8Array(bytes))
            },
            Logout: {
                path: "/auth.AuthService/Logout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LogoutRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LogoutRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LogoutResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LogoutResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SignUp(call: grpc_1.ServerUnaryCall<SignUpRequest, SignUpResponse>, callback: grpc_1.sendUnaryData<SignUpResponse>): void;
        abstract BatchImportUsers(call: grpc_1.ServerUnaryCall<BatchImportUsersRequest, BatchImportUsersResponse>, callback: grpc_1.sendUnaryData<BatchImportUsersResponse>): void;
        abstract AdminLogin(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract StudentLogin(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract VolunteerLogin(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract SchoolLogin(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract EnableTwoFactor(call: grpc_1.ServerUnaryCall<EnableTwoFactorRequest, EnableTwoFactorResponse>, callback: grpc_1.sendUnaryData<EnableTwoFactorResponse>): void;
        abstract DisableTwoFactor(call: grpc_1.ServerUnaryCall<DisableTwoFactorRequest, DisableTwoFactorResponse>, callback: grpc_1.sendUnaryData<DisableTwoFactorResponse>): void;
        abstract GenerateTwoFactorOTP(call: grpc_1.ServerUnaryCall<GenerateTwoFactorOTPRequest, GenerateTwoFactorOTPResponse>, callback: grpc_1.sendUnaryData<GenerateTwoFactorOTPResponse>): void;
        abstract VerifyTwoFactor(call: grpc_1.ServerUnaryCall<VerifyTwoFactorRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract RequestPasswordReset(call: grpc_1.ServerUnaryCall<PasswordResetRequest, PasswordResetResponse>, callback: grpc_1.sendUnaryData<PasswordResetResponse>): void;
        abstract ResetPassword(call: grpc_1.ServerUnaryCall<ResetPasswordRequest, ResetPasswordResponse>, callback: grpc_1.sendUnaryData<ResetPasswordResponse>): void;
        abstract BeginWebAuthnRegistration(call: grpc_1.ServerUnaryCall<BeginWebAuthnRegistrationRequest, BeginWebAuthnRegistrationResponse>, callback: grpc_1.sendUnaryData<BeginWebAuthnRegistrationResponse>): void;
        abstract FinishWebAuthnRegistration(call: grpc_1.ServerUnaryCall<FinishWebAuthnRegistrationRequest, FinishWebAuthnRegistrationResponse>, callback: grpc_1.sendUnaryData<FinishWebAuthnRegistrationResponse>): void;
        abstract BeginWebAuthnLogin(call: grpc_1.ServerUnaryCall<BeginWebAuthnLoginRequest, BeginWebAuthnLoginResponse>, callback: grpc_1.sendUnaryData<BeginWebAuthnLoginResponse>): void;
        abstract FinishWebAuthnLogin(call: grpc_1.ServerUnaryCall<FinishWebAuthnLoginRequest, FinishWebAuthnLoginResponse>, callback: grpc_1.sendUnaryData<FinishWebAuthnLoginResponse>): void;
        abstract Logout(call: grpc_1.ServerUnaryCall<LogoutRequest, LogoutResponse>, callback: grpc_1.sendUnaryData<LogoutResponse>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SignUp: GrpcUnaryServiceInterface<SignUpRequest, SignUpResponse> = (message: SignUpRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, callback?: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall => {
            return super.SignUp(message, metadata, options, callback);
        };
        BatchImportUsers: GrpcUnaryServiceInterface<BatchImportUsersRequest, BatchImportUsersResponse> = (message: BatchImportUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BatchImportUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BatchImportUsersResponse>, callback?: grpc_1.requestCallback<BatchImportUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchImportUsers(message, metadata, options, callback);
        };
        AdminLogin: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.AdminLogin(message, metadata, options, callback);
        };
        StudentLogin: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.StudentLogin(message, metadata, options, callback);
        };
        VolunteerLogin: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.VolunteerLogin(message, metadata, options, callback);
        };
        SchoolLogin: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.SchoolLogin(message, metadata, options, callback);
        };
        EnableTwoFactor: GrpcUnaryServiceInterface<EnableTwoFactorRequest, EnableTwoFactorResponse> = (message: EnableTwoFactorRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EnableTwoFactorResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EnableTwoFactorResponse>, callback?: grpc_1.requestCallback<EnableTwoFactorResponse>): grpc_1.ClientUnaryCall => {
            return super.EnableTwoFactor(message, metadata, options, callback);
        };
        DisableTwoFactor: GrpcUnaryServiceInterface<DisableTwoFactorRequest, DisableTwoFactorResponse> = (message: DisableTwoFactorRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DisableTwoFactorResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DisableTwoFactorResponse>, callback?: grpc_1.requestCallback<DisableTwoFactorResponse>): grpc_1.ClientUnaryCall => {
            return super.DisableTwoFactor(message, metadata, options, callback);
        };
        GenerateTwoFactorOTP: GrpcUnaryServiceInterface<GenerateTwoFactorOTPRequest, GenerateTwoFactorOTPResponse> = (message: GenerateTwoFactorOTPRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateTwoFactorOTPResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateTwoFactorOTPResponse>, callback?: grpc_1.requestCallback<GenerateTwoFactorOTPResponse>): grpc_1.ClientUnaryCall => {
            return super.GenerateTwoFactorOTP(message, metadata, options, callback);
        };
        VerifyTwoFactor: GrpcUnaryServiceInterface<VerifyTwoFactorRequest, LoginResponse> = (message: VerifyTwoFactorRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyTwoFactor(message, metadata, options, callback);
        };
        RequestPasswordReset: GrpcUnaryServiceInterface<PasswordResetRequest, PasswordResetResponse> = (message: PasswordResetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PasswordResetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PasswordResetResponse>, callback?: grpc_1.requestCallback<PasswordResetResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestPasswordReset(message, metadata, options, callback);
        };
        ResetPassword: GrpcUnaryServiceInterface<ResetPasswordRequest, ResetPasswordResponse> = (message: ResetPasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordResponse>, callback?: grpc_1.requestCallback<ResetPasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.ResetPassword(message, metadata, options, callback);
        };
        BeginWebAuthnRegistration: GrpcUnaryServiceInterface<BeginWebAuthnRegistrationRequest, BeginWebAuthnRegistrationResponse> = (message: BeginWebAuthnRegistrationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BeginWebAuthnRegistrationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BeginWebAuthnRegistrationResponse>, callback?: grpc_1.requestCallback<BeginWebAuthnRegistrationResponse>): grpc_1.ClientUnaryCall => {
            return super.BeginWebAuthnRegistration(message, metadata, options, callback);
        };
        FinishWebAuthnRegistration: GrpcUnaryServiceInterface<FinishWebAuthnRegistrationRequest, FinishWebAuthnRegistrationResponse> = (message: FinishWebAuthnRegistrationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FinishWebAuthnRegistrationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FinishWebAuthnRegistrationResponse>, callback?: grpc_1.requestCallback<FinishWebAuthnRegistrationResponse>): grpc_1.ClientUnaryCall => {
            return super.FinishWebAuthnRegistration(message, metadata, options, callback);
        };
        BeginWebAuthnLogin: GrpcUnaryServiceInterface<BeginWebAuthnLoginRequest, BeginWebAuthnLoginResponse> = (message: BeginWebAuthnLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BeginWebAuthnLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BeginWebAuthnLoginResponse>, callback?: grpc_1.requestCallback<BeginWebAuthnLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.BeginWebAuthnLogin(message, metadata, options, callback);
        };
        FinishWebAuthnLogin: GrpcUnaryServiceInterface<FinishWebAuthnLoginRequest, FinishWebAuthnLoginResponse> = (message: FinishWebAuthnLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FinishWebAuthnLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FinishWebAuthnLoginResponse>, callback?: grpc_1.requestCallback<FinishWebAuthnLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.FinishWebAuthnLogin(message, metadata, options, callback);
        };
        Logout: GrpcUnaryServiceInterface<LogoutRequest, LogoutResponse> = (message: LogoutRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LogoutResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LogoutResponse>, callback?: grpc_1.requestCallback<LogoutResponse>): grpc_1.ClientUnaryCall => {
            return super.Logout(message, metadata, options, callback);
        };
    }
}
