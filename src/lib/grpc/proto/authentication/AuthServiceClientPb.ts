/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: authentication/auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as authentication_auth_pb from '../authentication/auth_pb'; // proto import: "authentication/auth.proto"


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSignUp = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/SignUp',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.SignUpRequest,
    authentication_auth_pb.SignUpResponse,
    (request: authentication_auth_pb.SignUpRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.SignUpResponse.deserializeBinary
  );

  signUp(
    request: authentication_auth_pb.SignUpRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.SignUpResponse>;

  signUp(
    request: authentication_auth_pb.SignUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.SignUpResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.SignUpResponse>;

  signUp(
    request: authentication_auth_pb.SignUpRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.SignUpResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/SignUp',
        request,
        metadata || {},
        this.methodDescriptorSignUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/SignUp',
    request,
    metadata || {},
    this.methodDescriptorSignUp);
  }

  methodDescriptorBatchImportUsers = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/BatchImportUsers',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.BatchImportUsersRequest,
    authentication_auth_pb.BatchImportUsersResponse,
    (request: authentication_auth_pb.BatchImportUsersRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.BatchImportUsersResponse.deserializeBinary
  );

  batchImportUsers(
    request: authentication_auth_pb.BatchImportUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.BatchImportUsersResponse>;

  batchImportUsers(
    request: authentication_auth_pb.BatchImportUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.BatchImportUsersResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.BatchImportUsersResponse>;

  batchImportUsers(
    request: authentication_auth_pb.BatchImportUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.BatchImportUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/BatchImportUsers',
        request,
        metadata || {},
        this.methodDescriptorBatchImportUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/BatchImportUsers',
    request,
    metadata || {},
    this.methodDescriptorBatchImportUsers);
  }

  methodDescriptorAdminLogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/AdminLogin',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.LoginRequest,
    authentication_auth_pb.LoginResponse,
    (request: authentication_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.LoginResponse.deserializeBinary
  );

  adminLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.LoginResponse>;

  adminLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.LoginResponse>;

  adminLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/AdminLogin',
        request,
        metadata || {},
        this.methodDescriptorAdminLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/AdminLogin',
    request,
    metadata || {},
    this.methodDescriptorAdminLogin);
  }

  methodDescriptorStudentLogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/StudentLogin',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.LoginRequest,
    authentication_auth_pb.LoginResponse,
    (request: authentication_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.LoginResponse.deserializeBinary
  );

  studentLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.LoginResponse>;

  studentLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.LoginResponse>;

  studentLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/StudentLogin',
        request,
        metadata || {},
        this.methodDescriptorStudentLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/StudentLogin',
    request,
    metadata || {},
    this.methodDescriptorStudentLogin);
  }

  methodDescriptorVolunteerLogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/VolunteerLogin',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.LoginRequest,
    authentication_auth_pb.LoginResponse,
    (request: authentication_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.LoginResponse.deserializeBinary
  );

  volunteerLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.LoginResponse>;

  volunteerLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.LoginResponse>;

  volunteerLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/VolunteerLogin',
        request,
        metadata || {},
        this.methodDescriptorVolunteerLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/VolunteerLogin',
    request,
    metadata || {},
    this.methodDescriptorVolunteerLogin);
  }

  methodDescriptorSchoolLogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/SchoolLogin',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.LoginRequest,
    authentication_auth_pb.LoginResponse,
    (request: authentication_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.LoginResponse.deserializeBinary
  );

  schoolLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.LoginResponse>;

  schoolLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.LoginResponse>;

  schoolLogin(
    request: authentication_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/SchoolLogin',
        request,
        metadata || {},
        this.methodDescriptorSchoolLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/SchoolLogin',
    request,
    metadata || {},
    this.methodDescriptorSchoolLogin);
  }

  methodDescriptorEnableTwoFactor = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/EnableTwoFactor',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.EnableTwoFactorRequest,
    authentication_auth_pb.EnableTwoFactorResponse,
    (request: authentication_auth_pb.EnableTwoFactorRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.EnableTwoFactorResponse.deserializeBinary
  );

  enableTwoFactor(
    request: authentication_auth_pb.EnableTwoFactorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.EnableTwoFactorResponse>;

  enableTwoFactor(
    request: authentication_auth_pb.EnableTwoFactorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.EnableTwoFactorResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.EnableTwoFactorResponse>;

  enableTwoFactor(
    request: authentication_auth_pb.EnableTwoFactorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.EnableTwoFactorResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/EnableTwoFactor',
        request,
        metadata || {},
        this.methodDescriptorEnableTwoFactor,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/EnableTwoFactor',
    request,
    metadata || {},
    this.methodDescriptorEnableTwoFactor);
  }

  methodDescriptorDisableTwoFactor = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/DisableTwoFactor',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.DisableTwoFactorRequest,
    authentication_auth_pb.DisableTwoFactorResponse,
    (request: authentication_auth_pb.DisableTwoFactorRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.DisableTwoFactorResponse.deserializeBinary
  );

  disableTwoFactor(
    request: authentication_auth_pb.DisableTwoFactorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.DisableTwoFactorResponse>;

  disableTwoFactor(
    request: authentication_auth_pb.DisableTwoFactorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.DisableTwoFactorResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.DisableTwoFactorResponse>;

  disableTwoFactor(
    request: authentication_auth_pb.DisableTwoFactorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.DisableTwoFactorResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/DisableTwoFactor',
        request,
        metadata || {},
        this.methodDescriptorDisableTwoFactor,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/DisableTwoFactor',
    request,
    metadata || {},
    this.methodDescriptorDisableTwoFactor);
  }

  methodDescriptorGenerateTwoFactorOTP = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/GenerateTwoFactorOTP',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.GenerateTwoFactorOTPRequest,
    authentication_auth_pb.GenerateTwoFactorOTPResponse,
    (request: authentication_auth_pb.GenerateTwoFactorOTPRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.GenerateTwoFactorOTPResponse.deserializeBinary
  );

  generateTwoFactorOTP(
    request: authentication_auth_pb.GenerateTwoFactorOTPRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.GenerateTwoFactorOTPResponse>;

  generateTwoFactorOTP(
    request: authentication_auth_pb.GenerateTwoFactorOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.GenerateTwoFactorOTPResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.GenerateTwoFactorOTPResponse>;

  generateTwoFactorOTP(
    request: authentication_auth_pb.GenerateTwoFactorOTPRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.GenerateTwoFactorOTPResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/GenerateTwoFactorOTP',
        request,
        metadata || {},
        this.methodDescriptorGenerateTwoFactorOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/GenerateTwoFactorOTP',
    request,
    metadata || {},
    this.methodDescriptorGenerateTwoFactorOTP);
  }

  methodDescriptorVerifyTwoFactor = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/VerifyTwoFactor',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.VerifyTwoFactorRequest,
    authentication_auth_pb.LoginResponse,
    (request: authentication_auth_pb.VerifyTwoFactorRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.LoginResponse.deserializeBinary
  );

  verifyTwoFactor(
    request: authentication_auth_pb.VerifyTwoFactorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.LoginResponse>;

  verifyTwoFactor(
    request: authentication_auth_pb.VerifyTwoFactorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.LoginResponse>;

  verifyTwoFactor(
    request: authentication_auth_pb.VerifyTwoFactorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/VerifyTwoFactor',
        request,
        metadata || {},
        this.methodDescriptorVerifyTwoFactor,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/VerifyTwoFactor',
    request,
    metadata || {},
    this.methodDescriptorVerifyTwoFactor);
  }

  methodDescriptorRequestPasswordReset = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/RequestPasswordReset',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.PasswordResetRequest,
    authentication_auth_pb.PasswordResetResponse,
    (request: authentication_auth_pb.PasswordResetRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.PasswordResetResponse.deserializeBinary
  );

  requestPasswordReset(
    request: authentication_auth_pb.PasswordResetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.PasswordResetResponse>;

  requestPasswordReset(
    request: authentication_auth_pb.PasswordResetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.PasswordResetResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.PasswordResetResponse>;

  requestPasswordReset(
    request: authentication_auth_pb.PasswordResetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.PasswordResetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/RequestPasswordReset',
        request,
        metadata || {},
        this.methodDescriptorRequestPasswordReset,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/RequestPasswordReset',
    request,
    metadata || {},
    this.methodDescriptorRequestPasswordReset);
  }

  methodDescriptorResetPassword = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/ResetPassword',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.ResetPasswordRequest,
    authentication_auth_pb.ResetPasswordResponse,
    (request: authentication_auth_pb.ResetPasswordRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.ResetPasswordResponse.deserializeBinary
  );

  resetPassword(
    request: authentication_auth_pb.ResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.ResetPasswordResponse>;

  resetPassword(
    request: authentication_auth_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.ResetPasswordResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.ResetPasswordResponse>;

  resetPassword(
    request: authentication_auth_pb.ResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.ResetPasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/ResetPassword',
        request,
        metadata || {},
        this.methodDescriptorResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/ResetPassword',
    request,
    metadata || {},
    this.methodDescriptorResetPassword);
  }

  methodDescriptorBeginWebAuthnRegistration = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/BeginWebAuthnRegistration',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.BeginWebAuthnRegistrationRequest,
    authentication_auth_pb.BeginWebAuthnRegistrationResponse,
    (request: authentication_auth_pb.BeginWebAuthnRegistrationRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.BeginWebAuthnRegistrationResponse.deserializeBinary
  );

  beginWebAuthnRegistration(
    request: authentication_auth_pb.BeginWebAuthnRegistrationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.BeginWebAuthnRegistrationResponse>;

  beginWebAuthnRegistration(
    request: authentication_auth_pb.BeginWebAuthnRegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.BeginWebAuthnRegistrationResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.BeginWebAuthnRegistrationResponse>;

  beginWebAuthnRegistration(
    request: authentication_auth_pb.BeginWebAuthnRegistrationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.BeginWebAuthnRegistrationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/BeginWebAuthnRegistration',
        request,
        metadata || {},
        this.methodDescriptorBeginWebAuthnRegistration,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/BeginWebAuthnRegistration',
    request,
    metadata || {},
    this.methodDescriptorBeginWebAuthnRegistration);
  }

  methodDescriptorFinishWebAuthnRegistration = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/FinishWebAuthnRegistration',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.FinishWebAuthnRegistrationRequest,
    authentication_auth_pb.FinishWebAuthnRegistrationResponse,
    (request: authentication_auth_pb.FinishWebAuthnRegistrationRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.FinishWebAuthnRegistrationResponse.deserializeBinary
  );

  finishWebAuthnRegistration(
    request: authentication_auth_pb.FinishWebAuthnRegistrationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.FinishWebAuthnRegistrationResponse>;

  finishWebAuthnRegistration(
    request: authentication_auth_pb.FinishWebAuthnRegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.FinishWebAuthnRegistrationResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.FinishWebAuthnRegistrationResponse>;

  finishWebAuthnRegistration(
    request: authentication_auth_pb.FinishWebAuthnRegistrationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.FinishWebAuthnRegistrationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/FinishWebAuthnRegistration',
        request,
        metadata || {},
        this.methodDescriptorFinishWebAuthnRegistration,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/FinishWebAuthnRegistration',
    request,
    metadata || {},
    this.methodDescriptorFinishWebAuthnRegistration);
  }

  methodDescriptorBeginWebAuthnLogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/BeginWebAuthnLogin',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.BeginWebAuthnLoginRequest,
    authentication_auth_pb.BeginWebAuthnLoginResponse,
    (request: authentication_auth_pb.BeginWebAuthnLoginRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.BeginWebAuthnLoginResponse.deserializeBinary
  );

  beginWebAuthnLogin(
    request: authentication_auth_pb.BeginWebAuthnLoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.BeginWebAuthnLoginResponse>;

  beginWebAuthnLogin(
    request: authentication_auth_pb.BeginWebAuthnLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.BeginWebAuthnLoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.BeginWebAuthnLoginResponse>;

  beginWebAuthnLogin(
    request: authentication_auth_pb.BeginWebAuthnLoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.BeginWebAuthnLoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/BeginWebAuthnLogin',
        request,
        metadata || {},
        this.methodDescriptorBeginWebAuthnLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/BeginWebAuthnLogin',
    request,
    metadata || {},
    this.methodDescriptorBeginWebAuthnLogin);
  }

  methodDescriptorFinishWebAuthnLogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/FinishWebAuthnLogin',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.FinishWebAuthnLoginRequest,
    authentication_auth_pb.FinishWebAuthnLoginResponse,
    (request: authentication_auth_pb.FinishWebAuthnLoginRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.FinishWebAuthnLoginResponse.deserializeBinary
  );

  finishWebAuthnLogin(
    request: authentication_auth_pb.FinishWebAuthnLoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.FinishWebAuthnLoginResponse>;

  finishWebAuthnLogin(
    request: authentication_auth_pb.FinishWebAuthnLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.FinishWebAuthnLoginResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.FinishWebAuthnLoginResponse>;

  finishWebAuthnLogin(
    request: authentication_auth_pb.FinishWebAuthnLoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.FinishWebAuthnLoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/FinishWebAuthnLogin',
        request,
        metadata || {},
        this.methodDescriptorFinishWebAuthnLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/FinishWebAuthnLogin',
    request,
    metadata || {},
    this.methodDescriptorFinishWebAuthnLogin);
  }

  methodDescriptorLogout = new grpcWeb.MethodDescriptor(
    '/auth.AuthService/Logout',
    grpcWeb.MethodType.UNARY,
    authentication_auth_pb.LogoutRequest,
    authentication_auth_pb.LogoutResponse,
    (request: authentication_auth_pb.LogoutRequest) => {
      return request.serializeBinary();
    },
    authentication_auth_pb.LogoutResponse.deserializeBinary
  );

  logout(
    request: authentication_auth_pb.LogoutRequest,
    metadata?: grpcWeb.Metadata | null): Promise<authentication_auth_pb.LogoutResponse>;

  logout(
    request: authentication_auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<authentication_auth_pb.LogoutResponse>;

  logout(
    request: authentication_auth_pb.LogoutRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: authentication_auth_pb.LogoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthService/Logout',
        request,
        metadata || {},
        this.methodDescriptorLogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthService/Logout',
    request,
    metadata || {},
    this.methodDescriptorLogout);
  }

}

