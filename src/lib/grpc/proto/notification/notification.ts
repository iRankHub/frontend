/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: notification/notification.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace notification {
    export enum NotificationType {
        EMAIL = 0,
        IN_APP = 1
    }
    export class Notification extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            type?: NotificationType;
            to?: string;
            subject?: string;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("subject" in data && data.subject != undefined) {
                    this.subject = data.subject;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, NotificationType.EMAIL) as NotificationType;
        }
        set type(value: NotificationType) {
            pb_1.Message.setField(this, 2, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get subject() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set subject(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            type?: NotificationType;
            to?: string;
            subject?: string;
            content?: string;
        }): Notification {
            const message = new Notification({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.subject != null) {
                message.subject = data.subject;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                type?: NotificationType;
                to?: string;
                subject?: string;
                content?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.subject != null) {
                data.subject = this.subject;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.type != NotificationType.EMAIL)
                writer.writeEnum(2, this.type);
            if (this.to.length)
                writer.writeString(3, this.to);
            if (this.subject.length)
                writer.writeString(4, this.subject);
            if (this.content.length)
                writer.writeString(5, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notification {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Notification();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.to = reader.readString();
                        break;
                    case 4:
                        message.subject = reader.readString();
                        break;
                    case 5:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Notification {
            return Notification.deserialize(bytes);
        }
    }
    export class SendNotificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: NotificationType;
            to?: string;
            subject?: string;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("subject" in data && data.subject != undefined) {
                    this.subject = data.subject;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, NotificationType.EMAIL) as NotificationType;
        }
        set type(value: NotificationType) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get subject() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set subject(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            type?: NotificationType;
            to?: string;
            subject?: string;
            content?: string;
        }): SendNotificationRequest {
            const message = new SendNotificationRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.subject != null) {
                message.subject = data.subject;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: NotificationType;
                to?: string;
                subject?: string;
                content?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.subject != null) {
                data.subject = this.subject;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != NotificationType.EMAIL)
                writer.writeEnum(1, this.type);
            if (this.to.length)
                writer.writeString(2, this.to);
            if (this.subject.length)
                writer.writeString(3, this.subject);
            if (this.content.length)
                writer.writeString(4, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendNotificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendNotificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.to = reader.readString();
                        break;
                    case 3:
                        message.subject = reader.readString();
                        break;
                    case 4:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendNotificationRequest {
            return SendNotificationRequest.deserialize(bytes);
        }
    }
    export class SendNotificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): SendNotificationResponse {
            const message = new SendNotificationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendNotificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendNotificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendNotificationResponse {
            return SendNotificationResponse.deserialize(bytes);
        }
    }
    export class GetUnreadNotificationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): GetUnreadNotificationsRequest {
            const message = new GetUnreadNotificationsRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUnreadNotificationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUnreadNotificationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUnreadNotificationsRequest {
            return GetUnreadNotificationsRequest.deserialize(bytes);
        }
    }
    export class GetUnreadNotificationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            notifications?: Notification[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("notifications" in data && data.notifications != undefined) {
                    this.notifications = data.notifications;
                }
            }
        }
        get notifications() {
            return pb_1.Message.getRepeatedWrapperField(this, Notification, 1) as Notification[];
        }
        set notifications(value: Notification[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            notifications?: ReturnType<typeof Notification.prototype.toObject>[];
        }): GetUnreadNotificationsResponse {
            const message = new GetUnreadNotificationsResponse({});
            if (data.notifications != null) {
                message.notifications = data.notifications.map(item => Notification.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                notifications?: ReturnType<typeof Notification.prototype.toObject>[];
            } = {};
            if (this.notifications != null) {
                data.notifications = this.notifications.map((item: Notification) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.notifications.length)
                writer.writeRepeatedMessage(1, this.notifications, (item: Notification) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUnreadNotificationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUnreadNotificationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.notifications, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Notification.deserialize(reader), Notification));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUnreadNotificationsResponse {
            return GetUnreadNotificationsResponse.deserialize(bytes);
        }
    }
    export class MarkNotificationsAsReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): MarkNotificationsAsReadRequest {
            const message = new MarkNotificationsAsReadRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarkNotificationsAsReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarkNotificationsAsReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarkNotificationsAsReadRequest {
            return MarkNotificationsAsReadRequest.deserialize(bytes);
        }
    }
    export class MarkNotificationsAsReadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): MarkNotificationsAsReadResponse {
            const message = new MarkNotificationsAsReadResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarkNotificationsAsReadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarkNotificationsAsReadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarkNotificationsAsReadResponse {
            return MarkNotificationsAsReadResponse.deserialize(bytes);
        }
    }
    export class SubscribeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): SubscribeRequest {
            const message = new SubscribeRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscribeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscribeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscribeRequest {
            return SubscribeRequest.deserialize(bytes);
        }
    }
    export class NotificationEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            notification?: Notification;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("notification" in data && data.notification != undefined) {
                    this.notification = data.notification;
                }
            }
        }
        get notification() {
            return pb_1.Message.getWrapperField(this, Notification, 1) as Notification;
        }
        set notification(value: Notification) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_notification() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            notification?: ReturnType<typeof Notification.prototype.toObject>;
        }): NotificationEvent {
            const message = new NotificationEvent({});
            if (data.notification != null) {
                message.notification = Notification.fromObject(data.notification);
            }
            return message;
        }
        toObject() {
            const data: {
                notification?: ReturnType<typeof Notification.prototype.toObject>;
            } = {};
            if (this.notification != null) {
                data.notification = this.notification.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_notification)
                writer.writeMessage(1, this.notification, () => this.notification.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NotificationEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NotificationEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.notification, () => message.notification = Notification.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NotificationEvent {
            return NotificationEvent.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedNotificationServiceService {
        static definition = {
            SendNotification: {
                path: "/notification.NotificationService/SendNotification",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendNotificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendNotificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendNotificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendNotificationResponse.deserialize(new Uint8Array(bytes))
            },
            GetUnreadNotifications: {
                path: "/notification.NotificationService/GetUnreadNotifications",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUnreadNotificationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUnreadNotificationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUnreadNotificationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUnreadNotificationsResponse.deserialize(new Uint8Array(bytes))
            },
            MarkNotificationsAsRead: {
                path: "/notification.NotificationService/MarkNotificationsAsRead",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MarkNotificationsAsReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MarkNotificationsAsReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MarkNotificationsAsReadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MarkNotificationsAsReadResponse.deserialize(new Uint8Array(bytes))
            },
            SubscribeToNotifications: {
                path: "/notification.NotificationService/SubscribeToNotifications",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: SubscribeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubscribeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NotificationEvent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NotificationEvent.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SendNotification(call: grpc_1.ServerUnaryCall<SendNotificationRequest, SendNotificationResponse>, callback: grpc_1.sendUnaryData<SendNotificationResponse>): void;
        abstract GetUnreadNotifications(call: grpc_1.ServerUnaryCall<GetUnreadNotificationsRequest, GetUnreadNotificationsResponse>, callback: grpc_1.sendUnaryData<GetUnreadNotificationsResponse>): void;
        abstract MarkNotificationsAsRead(call: grpc_1.ServerUnaryCall<MarkNotificationsAsReadRequest, MarkNotificationsAsReadResponse>, callback: grpc_1.sendUnaryData<MarkNotificationsAsReadResponse>): void;
        abstract SubscribeToNotifications(call: grpc_1.ServerWritableStream<SubscribeRequest, NotificationEvent>): void;
    }
    export class NotificationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedNotificationServiceService.definition, "NotificationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SendNotification: GrpcUnaryServiceInterface<SendNotificationRequest, SendNotificationResponse> = (message: SendNotificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendNotificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendNotificationResponse>, callback?: grpc_1.requestCallback<SendNotificationResponse>): grpc_1.ClientUnaryCall => {
            return super.SendNotification(message, metadata, options, callback);
        };
        GetUnreadNotifications: GrpcUnaryServiceInterface<GetUnreadNotificationsRequest, GetUnreadNotificationsResponse> = (message: GetUnreadNotificationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUnreadNotificationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUnreadNotificationsResponse>, callback?: grpc_1.requestCallback<GetUnreadNotificationsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUnreadNotifications(message, metadata, options, callback);
        };
        MarkNotificationsAsRead: GrpcUnaryServiceInterface<MarkNotificationsAsReadRequest, MarkNotificationsAsReadResponse> = (message: MarkNotificationsAsReadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MarkNotificationsAsReadResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MarkNotificationsAsReadResponse>, callback?: grpc_1.requestCallback<MarkNotificationsAsReadResponse>): grpc_1.ClientUnaryCall => {
            return super.MarkNotificationsAsRead(message, metadata, options, callback);
        };
        SubscribeToNotifications: GrpcStreamServiceInterface<SubscribeRequest, NotificationEvent> = (message: SubscribeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<NotificationEvent> => {
            return super.SubscribeToNotifications(message, metadata, options);
        };
    }
}
