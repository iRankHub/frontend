/**
 * @fileoverview gRPC-Web generated client stub for debate_management
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.2
// source: debate_management/debate.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as debate_management_debate_pb from '../debate_management/debate_pb'; // proto import: "debate_management/debate.proto"


export class DebateServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetRooms = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetRooms',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetRoomsRequest,
    debate_management_debate_pb.GetRoomsResponse,
    (request: debate_management_debate_pb.GetRoomsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetRoomsResponse.deserializeBinary
  );

  getRooms(
    request: debate_management_debate_pb.GetRoomsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetRoomsResponse>;

  getRooms(
    request: debate_management_debate_pb.GetRoomsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetRoomsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetRoomsResponse>;

  getRooms(
    request: debate_management_debate_pb.GetRoomsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetRoomsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetRooms',
        request,
        metadata || {},
        this.methodDescriptorGetRooms,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetRooms',
    request,
    metadata || {},
    this.methodDescriptorGetRooms);
  }

  methodDescriptorGetRoom = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetRoom',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetRoomRequest,
    debate_management_debate_pb.GetRoomResponse,
    (request: debate_management_debate_pb.GetRoomRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetRoomResponse.deserializeBinary
  );

  getRoom(
    request: debate_management_debate_pb.GetRoomRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetRoomResponse>;

  getRoom(
    request: debate_management_debate_pb.GetRoomRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetRoomResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetRoomResponse>;

  getRoom(
    request: debate_management_debate_pb.GetRoomRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetRoomResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetRoom',
        request,
        metadata || {},
        this.methodDescriptorGetRoom,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetRoom',
    request,
    metadata || {},
    this.methodDescriptorGetRoom);
  }

  methodDescriptorUpdateRoom = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/UpdateRoom',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.UpdateRoomRequest,
    debate_management_debate_pb.UpdateRoomResponse,
    (request: debate_management_debate_pb.UpdateRoomRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.UpdateRoomResponse.deserializeBinary
  );

  updateRoom(
    request: debate_management_debate_pb.UpdateRoomRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.UpdateRoomResponse>;

  updateRoom(
    request: debate_management_debate_pb.UpdateRoomRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdateRoomResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.UpdateRoomResponse>;

  updateRoom(
    request: debate_management_debate_pb.UpdateRoomRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdateRoomResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/UpdateRoom',
        request,
        metadata || {},
        this.methodDescriptorUpdateRoom,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/UpdateRoom',
    request,
    metadata || {},
    this.methodDescriptorUpdateRoom);
  }

  methodDescriptorGetJudges = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetJudges',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetJudgesRequest,
    debate_management_debate_pb.GetJudgesResponse,
    (request: debate_management_debate_pb.GetJudgesRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetJudgesResponse.deserializeBinary
  );

  getJudges(
    request: debate_management_debate_pb.GetJudgesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetJudgesResponse>;

  getJudges(
    request: debate_management_debate_pb.GetJudgesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetJudgesResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetJudgesResponse>;

  getJudges(
    request: debate_management_debate_pb.GetJudgesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetJudgesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetJudges',
        request,
        metadata || {},
        this.methodDescriptorGetJudges,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetJudges',
    request,
    metadata || {},
    this.methodDescriptorGetJudges);
  }

  methodDescriptorGetJudge = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetJudge',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetJudgeRequest,
    debate_management_debate_pb.GetJudgeResponse,
    (request: debate_management_debate_pb.GetJudgeRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetJudgeResponse.deserializeBinary
  );

  getJudge(
    request: debate_management_debate_pb.GetJudgeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetJudgeResponse>;

  getJudge(
    request: debate_management_debate_pb.GetJudgeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetJudgeResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetJudgeResponse>;

  getJudge(
    request: debate_management_debate_pb.GetJudgeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetJudgeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetJudge',
        request,
        metadata || {},
        this.methodDescriptorGetJudge,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetJudge',
    request,
    metadata || {},
    this.methodDescriptorGetJudge);
  }

  methodDescriptorUpdateJudge = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/UpdateJudge',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.UpdateJudgeRequest,
    debate_management_debate_pb.UpdateJudgeResponse,
    (request: debate_management_debate_pb.UpdateJudgeRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.UpdateJudgeResponse.deserializeBinary
  );

  updateJudge(
    request: debate_management_debate_pb.UpdateJudgeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.UpdateJudgeResponse>;

  updateJudge(
    request: debate_management_debate_pb.UpdateJudgeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdateJudgeResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.UpdateJudgeResponse>;

  updateJudge(
    request: debate_management_debate_pb.UpdateJudgeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdateJudgeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/UpdateJudge',
        request,
        metadata || {},
        this.methodDescriptorUpdateJudge,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/UpdateJudge',
    request,
    metadata || {},
    this.methodDescriptorUpdateJudge);
  }

  methodDescriptorGetPairings = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetPairings',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetPairingsRequest,
    debate_management_debate_pb.GetPairingsResponse,
    (request: debate_management_debate_pb.GetPairingsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetPairingsResponse.deserializeBinary
  );

  getPairings(
    request: debate_management_debate_pb.GetPairingsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetPairingsResponse>;

  getPairings(
    request: debate_management_debate_pb.GetPairingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetPairingsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetPairingsResponse>;

  getPairings(
    request: debate_management_debate_pb.GetPairingsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetPairingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetPairings',
        request,
        metadata || {},
        this.methodDescriptorGetPairings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetPairings',
    request,
    metadata || {},
    this.methodDescriptorGetPairings);
  }

  methodDescriptorUpdatePairings = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/UpdatePairings',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.UpdatePairingsRequest,
    debate_management_debate_pb.UpdatePairingsResponse,
    (request: debate_management_debate_pb.UpdatePairingsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.UpdatePairingsResponse.deserializeBinary
  );

  updatePairings(
    request: debate_management_debate_pb.UpdatePairingsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.UpdatePairingsResponse>;

  updatePairings(
    request: debate_management_debate_pb.UpdatePairingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdatePairingsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.UpdatePairingsResponse>;

  updatePairings(
    request: debate_management_debate_pb.UpdatePairingsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdatePairingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/UpdatePairings',
        request,
        metadata || {},
        this.methodDescriptorUpdatePairings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/UpdatePairings',
    request,
    metadata || {},
    this.methodDescriptorUpdatePairings);
  }

  methodDescriptorGetBallots = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetBallots',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetBallotsRequest,
    debate_management_debate_pb.GetBallotsResponse,
    (request: debate_management_debate_pb.GetBallotsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetBallotsResponse.deserializeBinary
  );

  getBallots(
    request: debate_management_debate_pb.GetBallotsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetBallotsResponse>;

  getBallots(
    request: debate_management_debate_pb.GetBallotsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetBallotsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetBallotsResponse>;

  getBallots(
    request: debate_management_debate_pb.GetBallotsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetBallotsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetBallots',
        request,
        metadata || {},
        this.methodDescriptorGetBallots,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetBallots',
    request,
    metadata || {},
    this.methodDescriptorGetBallots);
  }

  methodDescriptorGetBallot = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetBallot',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetBallotRequest,
    debate_management_debate_pb.GetBallotResponse,
    (request: debate_management_debate_pb.GetBallotRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetBallotResponse.deserializeBinary
  );

  getBallot(
    request: debate_management_debate_pb.GetBallotRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetBallotResponse>;

  getBallot(
    request: debate_management_debate_pb.GetBallotRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetBallotResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetBallotResponse>;

  getBallot(
    request: debate_management_debate_pb.GetBallotRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetBallotResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetBallot',
        request,
        metadata || {},
        this.methodDescriptorGetBallot,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetBallot',
    request,
    metadata || {},
    this.methodDescriptorGetBallot);
  }

  methodDescriptorUpdateBallot = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/UpdateBallot',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.UpdateBallotRequest,
    debate_management_debate_pb.UpdateBallotResponse,
    (request: debate_management_debate_pb.UpdateBallotRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.UpdateBallotResponse.deserializeBinary
  );

  updateBallot(
    request: debate_management_debate_pb.UpdateBallotRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.UpdateBallotResponse>;

  updateBallot(
    request: debate_management_debate_pb.UpdateBallotRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdateBallotResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.UpdateBallotResponse>;

  updateBallot(
    request: debate_management_debate_pb.UpdateBallotRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.UpdateBallotResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/UpdateBallot',
        request,
        metadata || {},
        this.methodDescriptorUpdateBallot,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/UpdateBallot',
    request,
    metadata || {},
    this.methodDescriptorUpdateBallot);
  }

  methodDescriptorGetBallotByJudgeID = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetBallotByJudgeID',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetBallotByJudgeIDRequest,
    debate_management_debate_pb.GetBallotByJudgeIDResponse,
    (request: debate_management_debate_pb.GetBallotByJudgeIDRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetBallotByJudgeIDResponse.deserializeBinary
  );

  getBallotByJudgeID(
    request: debate_management_debate_pb.GetBallotByJudgeIDRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetBallotByJudgeIDResponse>;

  getBallotByJudgeID(
    request: debate_management_debate_pb.GetBallotByJudgeIDRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetBallotByJudgeIDResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetBallotByJudgeIDResponse>;

  getBallotByJudgeID(
    request: debate_management_debate_pb.GetBallotByJudgeIDRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetBallotByJudgeIDResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetBallotByJudgeID',
        request,
        metadata || {},
        this.methodDescriptorGetBallotByJudgeID,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetBallotByJudgeID',
    request,
    metadata || {},
    this.methodDescriptorGetBallotByJudgeID);
  }

  methodDescriptorGeneratePreliminaryPairings = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GeneratePreliminaryPairings',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GeneratePreliminaryPairingsRequest,
    debate_management_debate_pb.GeneratePairingsResponse,
    (request: debate_management_debate_pb.GeneratePreliminaryPairingsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GeneratePairingsResponse.deserializeBinary
  );

  generatePreliminaryPairings(
    request: debate_management_debate_pb.GeneratePreliminaryPairingsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GeneratePairingsResponse>;

  generatePreliminaryPairings(
    request: debate_management_debate_pb.GeneratePreliminaryPairingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GeneratePairingsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GeneratePairingsResponse>;

  generatePreliminaryPairings(
    request: debate_management_debate_pb.GeneratePreliminaryPairingsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GeneratePairingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GeneratePreliminaryPairings',
        request,
        metadata || {},
        this.methodDescriptorGeneratePreliminaryPairings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GeneratePreliminaryPairings',
    request,
    metadata || {},
    this.methodDescriptorGeneratePreliminaryPairings);
  }

  methodDescriptorGenerateEliminationPairings = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GenerateEliminationPairings',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GenerateEliminationPairingsRequest,
    debate_management_debate_pb.GeneratePairingsResponse,
    (request: debate_management_debate_pb.GenerateEliminationPairingsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GeneratePairingsResponse.deserializeBinary
  );

  generateEliminationPairings(
    request: debate_management_debate_pb.GenerateEliminationPairingsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GeneratePairingsResponse>;

  generateEliminationPairings(
    request: debate_management_debate_pb.GenerateEliminationPairingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GeneratePairingsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GeneratePairingsResponse>;

  generateEliminationPairings(
    request: debate_management_debate_pb.GenerateEliminationPairingsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GeneratePairingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GenerateEliminationPairings',
        request,
        metadata || {},
        this.methodDescriptorGenerateEliminationPairings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GenerateEliminationPairings',
    request,
    metadata || {},
    this.methodDescriptorGenerateEliminationPairings);
  }

  methodDescriptorCreateTeam = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/CreateTeam',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.CreateTeamRequest,
    debate_management_debate_pb.Team,
    (request: debate_management_debate_pb.CreateTeamRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.Team.deserializeBinary
  );

  createTeam(
    request: debate_management_debate_pb.CreateTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.Team>;

  createTeam(
    request: debate_management_debate_pb.CreateTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.Team) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.Team>;

  createTeam(
    request: debate_management_debate_pb.CreateTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.Team) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/CreateTeam',
        request,
        metadata || {},
        this.methodDescriptorCreateTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/CreateTeam',
    request,
    metadata || {},
    this.methodDescriptorCreateTeam);
  }

  methodDescriptorGetTeam = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetTeam',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetTeamRequest,
    debate_management_debate_pb.Team,
    (request: debate_management_debate_pb.GetTeamRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.Team.deserializeBinary
  );

  getTeam(
    request: debate_management_debate_pb.GetTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.Team>;

  getTeam(
    request: debate_management_debate_pb.GetTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.Team) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.Team>;

  getTeam(
    request: debate_management_debate_pb.GetTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.Team) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetTeam',
        request,
        metadata || {},
        this.methodDescriptorGetTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetTeam',
    request,
    metadata || {},
    this.methodDescriptorGetTeam);
  }

  methodDescriptorUpdateTeam = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/UpdateTeam',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.UpdateTeamRequest,
    debate_management_debate_pb.Team,
    (request: debate_management_debate_pb.UpdateTeamRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.Team.deserializeBinary
  );

  updateTeam(
    request: debate_management_debate_pb.UpdateTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.Team>;

  updateTeam(
    request: debate_management_debate_pb.UpdateTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.Team) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.Team>;

  updateTeam(
    request: debate_management_debate_pb.UpdateTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.Team) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/UpdateTeam',
        request,
        metadata || {},
        this.methodDescriptorUpdateTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/UpdateTeam',
    request,
    metadata || {},
    this.methodDescriptorUpdateTeam);
  }

  methodDescriptorGetTeamsByTournament = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetTeamsByTournament',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetTeamsByTournamentRequest,
    debate_management_debate_pb.GetTeamsByTournamentResponse,
    (request: debate_management_debate_pb.GetTeamsByTournamentRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetTeamsByTournamentResponse.deserializeBinary
  );

  getTeamsByTournament(
    request: debate_management_debate_pb.GetTeamsByTournamentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetTeamsByTournamentResponse>;

  getTeamsByTournament(
    request: debate_management_debate_pb.GetTeamsByTournamentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetTeamsByTournamentResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetTeamsByTournamentResponse>;

  getTeamsByTournament(
    request: debate_management_debate_pb.GetTeamsByTournamentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetTeamsByTournamentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetTeamsByTournament',
        request,
        metadata || {},
        this.methodDescriptorGetTeamsByTournament,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetTeamsByTournament',
    request,
    metadata || {},
    this.methodDescriptorGetTeamsByTournament);
  }

  methodDescriptorDeleteTeam = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/DeleteTeam',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.DeleteTeamRequest,
    debate_management_debate_pb.DeleteTeamResponse,
    (request: debate_management_debate_pb.DeleteTeamRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.DeleteTeamResponse.deserializeBinary
  );

  deleteTeam(
    request: debate_management_debate_pb.DeleteTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.DeleteTeamResponse>;

  deleteTeam(
    request: debate_management_debate_pb.DeleteTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.DeleteTeamResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.DeleteTeamResponse>;

  deleteTeam(
    request: debate_management_debate_pb.DeleteTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.DeleteTeamResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/DeleteTeam',
        request,
        metadata || {},
        this.methodDescriptorDeleteTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/DeleteTeam',
    request,
    metadata || {},
    this.methodDescriptorDeleteTeam);
  }

  methodDescriptorGetTournamentStudentRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetTournamentStudentRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.TournamentRankingRequest,
    debate_management_debate_pb.TournamentRankingResponse,
    (request: debate_management_debate_pb.TournamentRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.TournamentRankingResponse.deserializeBinary
  );

  getTournamentStudentRanking(
    request: debate_management_debate_pb.TournamentRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.TournamentRankingResponse>;

  getTournamentStudentRanking(
    request: debate_management_debate_pb.TournamentRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.TournamentRankingResponse>;

  getTournamentStudentRanking(
    request: debate_management_debate_pb.TournamentRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetTournamentStudentRanking',
        request,
        metadata || {},
        this.methodDescriptorGetTournamentStudentRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetTournamentStudentRanking',
    request,
    metadata || {},
    this.methodDescriptorGetTournamentStudentRanking);
  }

  methodDescriptorGetOverallStudentRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetOverallStudentRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.OverallRankingRequest,
    debate_management_debate_pb.OverallRankingResponse,
    (request: debate_management_debate_pb.OverallRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.OverallRankingResponse.deserializeBinary
  );

  getOverallStudentRanking(
    request: debate_management_debate_pb.OverallRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.OverallRankingResponse>;

  getOverallStudentRanking(
    request: debate_management_debate_pb.OverallRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.OverallRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.OverallRankingResponse>;

  getOverallStudentRanking(
    request: debate_management_debate_pb.OverallRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.OverallRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetOverallStudentRanking',
        request,
        metadata || {},
        this.methodDescriptorGetOverallStudentRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetOverallStudentRanking',
    request,
    metadata || {},
    this.methodDescriptorGetOverallStudentRanking);
  }

  methodDescriptorGetStudentOverallPerformance = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetStudentOverallPerformance',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.PerformanceRequest,
    debate_management_debate_pb.PerformanceResponse,
    (request: debate_management_debate_pb.PerformanceRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.PerformanceResponse.deserializeBinary
  );

  getStudentOverallPerformance(
    request: debate_management_debate_pb.PerformanceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.PerformanceResponse>;

  getStudentOverallPerformance(
    request: debate_management_debate_pb.PerformanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.PerformanceResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.PerformanceResponse>;

  getStudentOverallPerformance(
    request: debate_management_debate_pb.PerformanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.PerformanceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetStudentOverallPerformance',
        request,
        metadata || {},
        this.methodDescriptorGetStudentOverallPerformance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetStudentOverallPerformance',
    request,
    metadata || {},
    this.methodDescriptorGetStudentOverallPerformance);
  }

  methodDescriptorGetStudentTournamentStats = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetStudentTournamentStats',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.StudentTournamentStatsRequest,
    debate_management_debate_pb.StudentTournamentStatsResponse,
    (request: debate_management_debate_pb.StudentTournamentStatsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.StudentTournamentStatsResponse.deserializeBinary
  );

  getStudentTournamentStats(
    request: debate_management_debate_pb.StudentTournamentStatsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.StudentTournamentStatsResponse>;

  getStudentTournamentStats(
    request: debate_management_debate_pb.StudentTournamentStatsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.StudentTournamentStatsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.StudentTournamentStatsResponse>;

  getStudentTournamentStats(
    request: debate_management_debate_pb.StudentTournamentStatsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.StudentTournamentStatsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetStudentTournamentStats',
        request,
        metadata || {},
        this.methodDescriptorGetStudentTournamentStats,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetStudentTournamentStats',
    request,
    metadata || {},
    this.methodDescriptorGetStudentTournamentStats);
  }

  methodDescriptorGetTournamentTeamsRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetTournamentTeamsRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.TournamentTeamsRankingRequest,
    debate_management_debate_pb.TournamentTeamsRankingResponse,
    (request: debate_management_debate_pb.TournamentTeamsRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.TournamentTeamsRankingResponse.deserializeBinary
  );

  getTournamentTeamsRanking(
    request: debate_management_debate_pb.TournamentTeamsRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.TournamentTeamsRankingResponse>;

  getTournamentTeamsRanking(
    request: debate_management_debate_pb.TournamentTeamsRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentTeamsRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.TournamentTeamsRankingResponse>;

  getTournamentTeamsRanking(
    request: debate_management_debate_pb.TournamentTeamsRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentTeamsRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetTournamentTeamsRanking',
        request,
        metadata || {},
        this.methodDescriptorGetTournamentTeamsRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetTournamentTeamsRanking',
    request,
    metadata || {},
    this.methodDescriptorGetTournamentTeamsRanking);
  }

  methodDescriptorGetTournamentSchoolRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetTournamentSchoolRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.TournamentSchoolRankingRequest,
    debate_management_debate_pb.TournamentSchoolRankingResponse,
    (request: debate_management_debate_pb.TournamentSchoolRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.TournamentSchoolRankingResponse.deserializeBinary
  );

  getTournamentSchoolRanking(
    request: debate_management_debate_pb.TournamentSchoolRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.TournamentSchoolRankingResponse>;

  getTournamentSchoolRanking(
    request: debate_management_debate_pb.TournamentSchoolRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentSchoolRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.TournamentSchoolRankingResponse>;

  getTournamentSchoolRanking(
    request: debate_management_debate_pb.TournamentSchoolRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentSchoolRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetTournamentSchoolRanking',
        request,
        metadata || {},
        this.methodDescriptorGetTournamentSchoolRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetTournamentSchoolRanking',
    request,
    metadata || {},
    this.methodDescriptorGetTournamentSchoolRanking);
  }

  methodDescriptorGetOverallSchoolRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetOverallSchoolRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.OverallSchoolRankingRequest,
    debate_management_debate_pb.OverallSchoolRankingResponse,
    (request: debate_management_debate_pb.OverallSchoolRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.OverallSchoolRankingResponse.deserializeBinary
  );

  getOverallSchoolRanking(
    request: debate_management_debate_pb.OverallSchoolRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.OverallSchoolRankingResponse>;

  getOverallSchoolRanking(
    request: debate_management_debate_pb.OverallSchoolRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.OverallSchoolRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.OverallSchoolRankingResponse>;

  getOverallSchoolRanking(
    request: debate_management_debate_pb.OverallSchoolRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.OverallSchoolRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetOverallSchoolRanking',
        request,
        metadata || {},
        this.methodDescriptorGetOverallSchoolRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetOverallSchoolRanking',
    request,
    metadata || {},
    this.methodDescriptorGetOverallSchoolRanking);
  }

  methodDescriptorGetSchoolOverallPerformance = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetSchoolOverallPerformance',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.SchoolPerformanceRequest,
    debate_management_debate_pb.SchoolPerformanceResponse,
    (request: debate_management_debate_pb.SchoolPerformanceRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.SchoolPerformanceResponse.deserializeBinary
  );

  getSchoolOverallPerformance(
    request: debate_management_debate_pb.SchoolPerformanceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.SchoolPerformanceResponse>;

  getSchoolOverallPerformance(
    request: debate_management_debate_pb.SchoolPerformanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.SchoolPerformanceResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.SchoolPerformanceResponse>;

  getSchoolOverallPerformance(
    request: debate_management_debate_pb.SchoolPerformanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.SchoolPerformanceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetSchoolOverallPerformance',
        request,
        metadata || {},
        this.methodDescriptorGetSchoolOverallPerformance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetSchoolOverallPerformance',
    request,
    metadata || {},
    this.methodDescriptorGetSchoolOverallPerformance);
  }

  methodDescriptorGetVolunteerTournamentStats = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetVolunteerTournamentStats',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.VolunteerTournamentStatsRequest,
    debate_management_debate_pb.VolunteerTournamentStatsResponse,
    (request: debate_management_debate_pb.VolunteerTournamentStatsRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.VolunteerTournamentStatsResponse.deserializeBinary
  );

  getVolunteerTournamentStats(
    request: debate_management_debate_pb.VolunteerTournamentStatsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.VolunteerTournamentStatsResponse>;

  getVolunteerTournamentStats(
    request: debate_management_debate_pb.VolunteerTournamentStatsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.VolunteerTournamentStatsResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.VolunteerTournamentStatsResponse>;

  getVolunteerTournamentStats(
    request: debate_management_debate_pb.VolunteerTournamentStatsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.VolunteerTournamentStatsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetVolunteerTournamentStats',
        request,
        metadata || {},
        this.methodDescriptorGetVolunteerTournamentStats,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetVolunteerTournamentStats',
    request,
    metadata || {},
    this.methodDescriptorGetVolunteerTournamentStats);
  }

  methodDescriptorGetTournamentVolunteerRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetTournamentVolunteerRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.TournamentVolunteerRankingRequest,
    debate_management_debate_pb.TournamentVolunteerRankingResponse,
    (request: debate_management_debate_pb.TournamentVolunteerRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.TournamentVolunteerRankingResponse.deserializeBinary
  );

  getTournamentVolunteerRanking(
    request: debate_management_debate_pb.TournamentVolunteerRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.TournamentVolunteerRankingResponse>;

  getTournamentVolunteerRanking(
    request: debate_management_debate_pb.TournamentVolunteerRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentVolunteerRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.TournamentVolunteerRankingResponse>;

  getTournamentVolunteerRanking(
    request: debate_management_debate_pb.TournamentVolunteerRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.TournamentVolunteerRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetTournamentVolunteerRanking',
        request,
        metadata || {},
        this.methodDescriptorGetTournamentVolunteerRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetTournamentVolunteerRanking',
    request,
    metadata || {},
    this.methodDescriptorGetTournamentVolunteerRanking);
  }

  methodDescriptorGetStudentFeedback = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetStudentFeedback',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetStudentFeedbackRequest,
    debate_management_debate_pb.GetStudentFeedbackResponse,
    (request: debate_management_debate_pb.GetStudentFeedbackRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetStudentFeedbackResponse.deserializeBinary
  );

  getStudentFeedback(
    request: debate_management_debate_pb.GetStudentFeedbackRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetStudentFeedbackResponse>;

  getStudentFeedback(
    request: debate_management_debate_pb.GetStudentFeedbackRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetStudentFeedbackResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetStudentFeedbackResponse>;

  getStudentFeedback(
    request: debate_management_debate_pb.GetStudentFeedbackRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetStudentFeedbackResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetStudentFeedback',
        request,
        metadata || {},
        this.methodDescriptorGetStudentFeedback,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetStudentFeedback',
    request,
    metadata || {},
    this.methodDescriptorGetStudentFeedback);
  }

  methodDescriptorSubmitJudgeFeedback = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/SubmitJudgeFeedback',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.SubmitJudgeFeedbackRequest,
    debate_management_debate_pb.SubmitJudgeFeedbackResponse,
    (request: debate_management_debate_pb.SubmitJudgeFeedbackRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.SubmitJudgeFeedbackResponse.deserializeBinary
  );

  submitJudgeFeedback(
    request: debate_management_debate_pb.SubmitJudgeFeedbackRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.SubmitJudgeFeedbackResponse>;

  submitJudgeFeedback(
    request: debate_management_debate_pb.SubmitJudgeFeedbackRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.SubmitJudgeFeedbackResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.SubmitJudgeFeedbackResponse>;

  submitJudgeFeedback(
    request: debate_management_debate_pb.SubmitJudgeFeedbackRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.SubmitJudgeFeedbackResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/SubmitJudgeFeedback',
        request,
        metadata || {},
        this.methodDescriptorSubmitJudgeFeedback,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/SubmitJudgeFeedback',
    request,
    metadata || {},
    this.methodDescriptorSubmitJudgeFeedback);
  }

  methodDescriptorGetJudgeFeedback = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetJudgeFeedback',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetJudgeFeedbackRequest,
    debate_management_debate_pb.GetJudgeFeedbackResponse,
    (request: debate_management_debate_pb.GetJudgeFeedbackRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetJudgeFeedbackResponse.deserializeBinary
  );

  getJudgeFeedback(
    request: debate_management_debate_pb.GetJudgeFeedbackRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetJudgeFeedbackResponse>;

  getJudgeFeedback(
    request: debate_management_debate_pb.GetJudgeFeedbackRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetJudgeFeedbackResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetJudgeFeedbackResponse>;

  getJudgeFeedback(
    request: debate_management_debate_pb.GetJudgeFeedbackRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetJudgeFeedbackResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetJudgeFeedback',
        request,
        metadata || {},
        this.methodDescriptorGetJudgeFeedback,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetJudgeFeedback',
    request,
    metadata || {},
    this.methodDescriptorGetJudgeFeedback);
  }

  methodDescriptorGetVolunteerRanking = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetVolunteerRanking',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetVolunteerRankingRequest,
    debate_management_debate_pb.GetVolunteerRankingResponse,
    (request: debate_management_debate_pb.GetVolunteerRankingRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetVolunteerRankingResponse.deserializeBinary
  );

  getVolunteerRanking(
    request: debate_management_debate_pb.GetVolunteerRankingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetVolunteerRankingResponse>;

  getVolunteerRanking(
    request: debate_management_debate_pb.GetVolunteerRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetVolunteerRankingResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetVolunteerRankingResponse>;

  getVolunteerRanking(
    request: debate_management_debate_pb.GetVolunteerRankingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetVolunteerRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetVolunteerRanking',
        request,
        metadata || {},
        this.methodDescriptorGetVolunteerRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetVolunteerRanking',
    request,
    metadata || {},
    this.methodDescriptorGetVolunteerRanking);
  }

  methodDescriptorGetVolunteerPerformance = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/GetVolunteerPerformance',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.GetVolunteerPerformanceRequest,
    debate_management_debate_pb.GetVolunteerPerformanceResponse,
    (request: debate_management_debate_pb.GetVolunteerPerformanceRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.GetVolunteerPerformanceResponse.deserializeBinary
  );

  getVolunteerPerformance(
    request: debate_management_debate_pb.GetVolunteerPerformanceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.GetVolunteerPerformanceResponse>;

  getVolunteerPerformance(
    request: debate_management_debate_pb.GetVolunteerPerformanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetVolunteerPerformanceResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.GetVolunteerPerformanceResponse>;

  getVolunteerPerformance(
    request: debate_management_debate_pb.GetVolunteerPerformanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.GetVolunteerPerformanceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/GetVolunteerPerformance',
        request,
        metadata || {},
        this.methodDescriptorGetVolunteerPerformance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/GetVolunteerPerformance',
    request,
    metadata || {},
    this.methodDescriptorGetVolunteerPerformance);
  }

  methodDescriptorMarkStudentFeedbackAsRead = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/MarkStudentFeedbackAsRead',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.MarkFeedbackAsReadRequest,
    debate_management_debate_pb.MarkFeedbackAsReadResponse,
    (request: debate_management_debate_pb.MarkFeedbackAsReadRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.MarkFeedbackAsReadResponse.deserializeBinary
  );

  markStudentFeedbackAsRead(
    request: debate_management_debate_pb.MarkFeedbackAsReadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.MarkFeedbackAsReadResponse>;

  markStudentFeedbackAsRead(
    request: debate_management_debate_pb.MarkFeedbackAsReadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.MarkFeedbackAsReadResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.MarkFeedbackAsReadResponse>;

  markStudentFeedbackAsRead(
    request: debate_management_debate_pb.MarkFeedbackAsReadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.MarkFeedbackAsReadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/MarkStudentFeedbackAsRead',
        request,
        metadata || {},
        this.methodDescriptorMarkStudentFeedbackAsRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/MarkStudentFeedbackAsRead',
    request,
    metadata || {},
    this.methodDescriptorMarkStudentFeedbackAsRead);
  }

  methodDescriptorMarkJudgeFeedbackAsRead = new grpcWeb.MethodDescriptor(
    '/debate_management.DebateService/MarkJudgeFeedbackAsRead',
    grpcWeb.MethodType.UNARY,
    debate_management_debate_pb.MarkFeedbackAsReadRequest,
    debate_management_debate_pb.MarkFeedbackAsReadResponse,
    (request: debate_management_debate_pb.MarkFeedbackAsReadRequest) => {
      return request.serializeBinary();
    },
    debate_management_debate_pb.MarkFeedbackAsReadResponse.deserializeBinary
  );

  markJudgeFeedbackAsRead(
    request: debate_management_debate_pb.MarkFeedbackAsReadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<debate_management_debate_pb.MarkFeedbackAsReadResponse>;

  markJudgeFeedbackAsRead(
    request: debate_management_debate_pb.MarkFeedbackAsReadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.MarkFeedbackAsReadResponse) => void): grpcWeb.ClientReadableStream<debate_management_debate_pb.MarkFeedbackAsReadResponse>;

  markJudgeFeedbackAsRead(
    request: debate_management_debate_pb.MarkFeedbackAsReadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debate_management_debate_pb.MarkFeedbackAsReadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/debate_management.DebateService/MarkJudgeFeedbackAsRead',
        request,
        metadata || {},
        this.methodDescriptorMarkJudgeFeedbackAsRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/debate_management.DebateService/MarkJudgeFeedbackAsRead',
    request,
    metadata || {},
    this.methodDescriptorMarkJudgeFeedbackAsRead);
  }

}

