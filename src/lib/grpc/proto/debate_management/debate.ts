/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: debate_management/debate.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace debate_management {
    export class Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: number;
            room_name?: string;
            location?: string;
            capacity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("capacity" in data && data.capacity != undefined) {
                    this.capacity = data.capacity;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            room_id?: number;
            room_name?: string;
            location?: string;
            capacity?: number;
        }): Room {
            const message = new Room({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.capacity != null) {
                message.capacity = data.capacity;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: number;
                room_name?: string;
                location?: string;
                capacity?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.capacity != null) {
                data.capacity = this.capacity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id != 0)
                writer.writeInt32(1, this.room_id);
            if (this.room_name.length)
                writer.writeString(2, this.room_name);
            if (this.location.length)
                writer.writeString(3, this.location);
            if (this.capacity != 0)
                writer.writeInt32(4, this.capacity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_name = reader.readString();
                        break;
                    case 3:
                        message.location = reader.readString();
                        break;
                    case 4:
                        message.capacity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Room {
            return Room.deserialize(bytes);
        }
    }
    export class RoundStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            round?: number;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            round?: number;
            status?: string;
        }): RoundStatus {
            const message = new RoundStatus({});
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                round?: number;
                status?: string;
            } = {};
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.round != 0)
                writer.writeInt32(1, this.round);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoundStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoundStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.round = reader.readInt32();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoundStatus {
            return RoundStatus.deserialize(bytes);
        }
    }
    export class RoomStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: number;
            room_name?: string;
            preliminary?: string;
            elimination?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("preliminary" in data && data.preliminary != undefined) {
                    this.preliminary = data.preliminary;
                }
                if ("elimination" in data && data.elimination != undefined) {
                    this.elimination = data.elimination;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get preliminary() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set preliminary(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get elimination() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set elimination(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            room_id?: number;
            room_name?: string;
            preliminary?: string;
            elimination?: string;
        }): RoomStatus {
            const message = new RoomStatus({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.preliminary != null) {
                message.preliminary = data.preliminary;
            }
            if (data.elimination != null) {
                message.elimination = data.elimination;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: number;
                room_name?: string;
                preliminary?: string;
                elimination?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.preliminary != null) {
                data.preliminary = this.preliminary;
            }
            if (this.elimination != null) {
                data.elimination = this.elimination;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id != 0)
                writer.writeInt32(1, this.room_id);
            if (this.room_name.length)
                writer.writeString(2, this.room_name);
            if (this.preliminary.length)
                writer.writeString(3, this.preliminary);
            if (this.elimination.length)
                writer.writeString(4, this.elimination);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_name = reader.readString();
                        break;
                    case 3:
                        message.preliminary = reader.readString();
                        break;
                    case 4:
                        message.elimination = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomStatus {
            return RoomStatus.deserialize(bytes);
        }
    }
    export class GetRoomsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            token?: string;
        }): GetRoomsRequest {
            const message = new GetRoomsRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoomsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoomsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoomsRequest {
            return GetRoomsRequest.deserialize(bytes);
        }
    }
    export class GetRoomsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rooms?: RoomStatus[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
            }
        }
        get rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, RoomStatus, 1) as RoomStatus[];
        }
        set rooms(value: RoomStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            rooms?: ReturnType<typeof RoomStatus.prototype.toObject>[];
        }): GetRoomsResponse {
            const message = new GetRoomsResponse({});
            if (data.rooms != null) {
                message.rooms = data.rooms.map(item => RoomStatus.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                rooms?: ReturnType<typeof RoomStatus.prototype.toObject>[];
            } = {};
            if (this.rooms != null) {
                data.rooms = this.rooms.map((item: RoomStatus) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rooms.length)
                writer.writeRepeatedMessage(1, this.rooms, (item: RoomStatus) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoomsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoomsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RoomStatus.deserialize(reader), RoomStatus));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoomsResponse {
            return GetRoomsResponse.deserialize(bytes);
        }
    }
    export class GetRoomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: number;
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            room_id?: number;
            tournament_id?: number;
            token?: string;
        }): GetRoomRequest {
            const message = new GetRoomRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: number;
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id != 0)
                writer.writeInt32(1, this.room_id);
            if (this.tournament_id != 0)
                writer.writeInt32(2, this.tournament_id);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readInt32();
                        break;
                    case 2:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoomRequest {
            return GetRoomRequest.deserialize(bytes);
        }
    }
    export class GetRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: number;
            name?: string;
            preliminary?: RoundStatus[];
            elimination?: RoundStatus[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("preliminary" in data && data.preliminary != undefined) {
                    this.preliminary = data.preliminary;
                }
                if ("elimination" in data && data.elimination != undefined) {
                    this.elimination = data.elimination;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get preliminary() {
            return pb_1.Message.getRepeatedWrapperField(this, RoundStatus, 3) as RoundStatus[];
        }
        set preliminary(value: RoundStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get elimination() {
            return pb_1.Message.getRepeatedWrapperField(this, RoundStatus, 4) as RoundStatus[];
        }
        set elimination(value: RoundStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            room_id?: number;
            name?: string;
            preliminary?: ReturnType<typeof RoundStatus.prototype.toObject>[];
            elimination?: ReturnType<typeof RoundStatus.prototype.toObject>[];
        }): GetRoomResponse {
            const message = new GetRoomResponse({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.preliminary != null) {
                message.preliminary = data.preliminary.map(item => RoundStatus.fromObject(item));
            }
            if (data.elimination != null) {
                message.elimination = data.elimination.map(item => RoundStatus.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: number;
                name?: string;
                preliminary?: ReturnType<typeof RoundStatus.prototype.toObject>[];
                elimination?: ReturnType<typeof RoundStatus.prototype.toObject>[];
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.preliminary != null) {
                data.preliminary = this.preliminary.map((item: RoundStatus) => item.toObject());
            }
            if (this.elimination != null) {
                data.elimination = this.elimination.map((item: RoundStatus) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id != 0)
                writer.writeInt32(1, this.room_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.preliminary.length)
                writer.writeRepeatedMessage(3, this.preliminary, (item: RoundStatus) => item.serialize(writer));
            if (this.elimination.length)
                writer.writeRepeatedMessage(4, this.elimination, (item: RoundStatus) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.preliminary, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RoundStatus.deserialize(reader), RoundStatus));
                        break;
                    case 4:
                        reader.readMessage(message.elimination, () => pb_1.Message.addToRepeatedWrapperField(message, 4, RoundStatus.deserialize(reader), RoundStatus));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoomResponse {
            return GetRoomResponse.deserialize(bytes);
        }
    }
    export class UpdateRoomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room?: Room;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get room() {
            return pb_1.Message.getWrapperField(this, Room, 1) as Room;
        }
        set room(value: Room) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_room() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room?: ReturnType<typeof Room.prototype.toObject>;
            token?: string;
        }): UpdateRoomRequest {
            const message = new UpdateRoomRequest({});
            if (data.room != null) {
                message.room = Room.fromObject(data.room);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                room?: ReturnType<typeof Room.prototype.toObject>;
                token?: string;
            } = {};
            if (this.room != null) {
                data.room = this.room.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_room)
                writer.writeMessage(1, this.room, () => this.room.serialize(writer));
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.room, () => message.room = Room.deserialize(reader));
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRoomRequest {
            return UpdateRoomRequest.deserialize(bytes);
        }
    }
    export class UpdateRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room?: Room;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
            }
        }
        get room() {
            return pb_1.Message.getWrapperField(this, Room, 1) as Room;
        }
        set room(value: Room) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_room() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            room?: ReturnType<typeof Room.prototype.toObject>;
        }): UpdateRoomResponse {
            const message = new UpdateRoomResponse({});
            if (data.room != null) {
                message.room = Room.fromObject(data.room);
            }
            return message;
        }
        toObject() {
            const data: {
                room?: ReturnType<typeof Room.prototype.toObject>;
            } = {};
            if (this.room != null) {
                data.room = this.room.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_room)
                writer.writeMessage(1, this.room, () => this.room.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.room, () => message.room = Room.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRoomResponse {
            return UpdateRoomResponse.deserialize(bytes);
        }
    }
    export class Judge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            judge_id?: number;
            name?: string;
            idebate_id?: string;
            preliminary_debates?: number;
            elimination_debates?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("judge_id" in data && data.judge_id != undefined) {
                    this.judge_id = data.judge_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("idebate_id" in data && data.idebate_id != undefined) {
                    this.idebate_id = data.idebate_id;
                }
                if ("preliminary_debates" in data && data.preliminary_debates != undefined) {
                    this.preliminary_debates = data.preliminary_debates;
                }
                if ("elimination_debates" in data && data.elimination_debates != undefined) {
                    this.elimination_debates = data.elimination_debates;
                }
            }
        }
        get judge_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set judge_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get idebate_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set idebate_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get preliminary_debates() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set preliminary_debates(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get elimination_debates() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set elimination_debates(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            judge_id?: number;
            name?: string;
            idebate_id?: string;
            preliminary_debates?: number;
            elimination_debates?: number;
        }): Judge {
            const message = new Judge({});
            if (data.judge_id != null) {
                message.judge_id = data.judge_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.idebate_id != null) {
                message.idebate_id = data.idebate_id;
            }
            if (data.preliminary_debates != null) {
                message.preliminary_debates = data.preliminary_debates;
            }
            if (data.elimination_debates != null) {
                message.elimination_debates = data.elimination_debates;
            }
            return message;
        }
        toObject() {
            const data: {
                judge_id?: number;
                name?: string;
                idebate_id?: string;
                preliminary_debates?: number;
                elimination_debates?: number;
            } = {};
            if (this.judge_id != null) {
                data.judge_id = this.judge_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.idebate_id != null) {
                data.idebate_id = this.idebate_id;
            }
            if (this.preliminary_debates != null) {
                data.preliminary_debates = this.preliminary_debates;
            }
            if (this.elimination_debates != null) {
                data.elimination_debates = this.elimination_debates;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.judge_id != 0)
                writer.writeInt32(1, this.judge_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.idebate_id.length)
                writer.writeString(3, this.idebate_id);
            if (this.preliminary_debates != 0)
                writer.writeInt32(4, this.preliminary_debates);
            if (this.elimination_debates != 0)
                writer.writeInt32(5, this.elimination_debates);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Judge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Judge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.judge_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.idebate_id = reader.readString();
                        break;
                    case 4:
                        message.preliminary_debates = reader.readInt32();
                        break;
                    case 5:
                        message.elimination_debates = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Judge {
            return Judge.deserialize(bytes);
        }
    }
    export class GetJudgesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            token?: string;
        }): GetJudgesRequest {
            const message = new GetJudgesRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetJudgesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetJudgesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetJudgesRequest {
            return GetJudgesRequest.deserialize(bytes);
        }
    }
    export class GetJudgesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            judges?: Judge[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("judges" in data && data.judges != undefined) {
                    this.judges = data.judges;
                }
            }
        }
        get judges() {
            return pb_1.Message.getRepeatedWrapperField(this, Judge, 1) as Judge[];
        }
        set judges(value: Judge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            judges?: ReturnType<typeof Judge.prototype.toObject>[];
        }): GetJudgesResponse {
            const message = new GetJudgesResponse({});
            if (data.judges != null) {
                message.judges = data.judges.map(item => Judge.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                judges?: ReturnType<typeof Judge.prototype.toObject>[];
            } = {};
            if (this.judges != null) {
                data.judges = this.judges.map((item: Judge) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.judges.length)
                writer.writeRepeatedMessage(1, this.judges, (item: Judge) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetJudgesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetJudgesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.judges, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Judge.deserialize(reader), Judge));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetJudgesResponse {
            return GetJudgesResponse.deserialize(bytes);
        }
    }
    export class RoomInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: number;
            room_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: number;
            room_name?: string;
        }): RoomInfo {
            const message = new RoomInfo({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: number;
                room_name?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id != 0)
                writer.writeInt32(1, this.room_id);
            if (this.room_name.length)
                writer.writeString(2, this.room_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomInfo {
            return RoomInfo.deserialize(bytes);
        }
    }
    export class RoundInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rooms?: Map<number, RoomInfo>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
            }
            if (!this.rooms)
                this.rooms = new Map();
        }
        get rooms() {
            return pb_1.Message.getField(this, 1) as any as Map<number, RoomInfo>;
        }
        set rooms(value: Map<number, RoomInfo>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            rooms?: {
                [key: number]: ReturnType<typeof RoomInfo.prototype.toObject>;
            };
        }): RoundInfo {
            const message = new RoundInfo({});
            if (typeof data.rooms == "object") {
                message.rooms = new Map(Object.entries(data.rooms).map(([key, value]) => [Number(key), RoomInfo.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                rooms?: {
                    [key: number]: ReturnType<typeof RoomInfo.prototype.toObject>;
                };
            } = {};
            if (this.rooms != null) {
                data.rooms = (Object.fromEntries)((Array.from)(this.rooms).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.rooms) {
                writer.writeMessage(1, this.rooms, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoundInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoundInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.rooms as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = RoomInfo.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoundInfo {
            return RoundInfo.deserialize(bytes);
        }
    }
    export class GetJudgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            judge_id?: number;
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("judge_id" in data && data.judge_id != undefined) {
                    this.judge_id = data.judge_id;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get judge_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set judge_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            judge_id?: number;
            tournament_id?: number;
            token?: string;
        }): GetJudgeRequest {
            const message = new GetJudgeRequest({});
            if (data.judge_id != null) {
                message.judge_id = data.judge_id;
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                judge_id?: number;
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.judge_id != null) {
                data.judge_id = this.judge_id;
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.judge_id != 0)
                writer.writeInt32(1, this.judge_id);
            if (this.tournament_id != 0)
                writer.writeInt32(2, this.tournament_id);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetJudgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetJudgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.judge_id = reader.readInt32();
                        break;
                    case 2:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetJudgeRequest {
            return GetJudgeRequest.deserialize(bytes);
        }
    }
    export class GetJudgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            judge_id?: number;
            name?: string;
            idebate_id?: string;
            preliminary?: Map<number, RoomInfo>;
            elimination?: Map<number, RoomInfo>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("judge_id" in data && data.judge_id != undefined) {
                    this.judge_id = data.judge_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("idebate_id" in data && data.idebate_id != undefined) {
                    this.idebate_id = data.idebate_id;
                }
                if ("preliminary" in data && data.preliminary != undefined) {
                    this.preliminary = data.preliminary;
                }
                if ("elimination" in data && data.elimination != undefined) {
                    this.elimination = data.elimination;
                }
            }
            if (!this.preliminary)
                this.preliminary = new Map();
            if (!this.elimination)
                this.elimination = new Map();
        }
        get judge_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set judge_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get idebate_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set idebate_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get preliminary() {
            return pb_1.Message.getField(this, 4) as any as Map<number, RoomInfo>;
        }
        set preliminary(value: Map<number, RoomInfo>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get elimination() {
            return pb_1.Message.getField(this, 5) as any as Map<number, RoomInfo>;
        }
        set elimination(value: Map<number, RoomInfo>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            judge_id?: number;
            name?: string;
            idebate_id?: string;
            preliminary?: {
                [key: number]: ReturnType<typeof RoomInfo.prototype.toObject>;
            };
            elimination?: {
                [key: number]: ReturnType<typeof RoomInfo.prototype.toObject>;
            };
        }): GetJudgeResponse {
            const message = new GetJudgeResponse({});
            if (data.judge_id != null) {
                message.judge_id = data.judge_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.idebate_id != null) {
                message.idebate_id = data.idebate_id;
            }
            if (typeof data.preliminary == "object") {
                message.preliminary = new Map(Object.entries(data.preliminary).map(([key, value]) => [Number(key), RoomInfo.fromObject(value)]));
            }
            if (typeof data.elimination == "object") {
                message.elimination = new Map(Object.entries(data.elimination).map(([key, value]) => [Number(key), RoomInfo.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                judge_id?: number;
                name?: string;
                idebate_id?: string;
                preliminary?: {
                    [key: number]: ReturnType<typeof RoomInfo.prototype.toObject>;
                };
                elimination?: {
                    [key: number]: ReturnType<typeof RoomInfo.prototype.toObject>;
                };
            } = {};
            if (this.judge_id != null) {
                data.judge_id = this.judge_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.idebate_id != null) {
                data.idebate_id = this.idebate_id;
            }
            if (this.preliminary != null) {
                data.preliminary = (Object.fromEntries)((Array.from)(this.preliminary).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.elimination != null) {
                data.elimination = (Object.fromEntries)((Array.from)(this.elimination).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.judge_id != 0)
                writer.writeInt32(1, this.judge_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.idebate_id.length)
                writer.writeString(3, this.idebate_id);
            for (const [key, value] of this.preliminary) {
                writer.writeMessage(4, this.preliminary, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.elimination) {
                writer.writeMessage(5, this.elimination, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetJudgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetJudgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.judge_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.idebate_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.preliminary as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = RoomInfo.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.elimination as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = RoomInfo.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetJudgeResponse {
            return GetJudgeResponse.deserialize(bytes);
        }
    }
    export class UpdateJudgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            judge_id?: number;
            tournament_id?: number;
            room_assignments?: Map<number, number>;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("judge_id" in data && data.judge_id != undefined) {
                    this.judge_id = data.judge_id;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("room_assignments" in data && data.room_assignments != undefined) {
                    this.room_assignments = data.room_assignments;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
            if (!this.room_assignments)
                this.room_assignments = new Map();
        }
        get judge_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set judge_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_assignments() {
            return pb_1.Message.getField(this, 3) as any as Map<number, number>;
        }
        set room_assignments(value: Map<number, number>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            judge_id?: number;
            tournament_id?: number;
            room_assignments?: {
                [key: number]: number;
            };
            token?: string;
        }): UpdateJudgeRequest {
            const message = new UpdateJudgeRequest({});
            if (data.judge_id != null) {
                message.judge_id = data.judge_id;
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (typeof data.room_assignments == "object") {
                message.room_assignments = new Map(Object.entries(data.room_assignments).map(([key, value]) => [Number(key), value]));
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                judge_id?: number;
                tournament_id?: number;
                room_assignments?: {
                    [key: number]: number;
                };
                token?: string;
            } = {};
            if (this.judge_id != null) {
                data.judge_id = this.judge_id;
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.room_assignments != null) {
                data.room_assignments = (Object.fromEntries)(this.room_assignments);
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.judge_id != 0)
                writer.writeInt32(1, this.judge_id);
            if (this.tournament_id != 0)
                writer.writeInt32(2, this.tournament_id);
            for (const [key, value] of this.room_assignments) {
                writer.writeMessage(3, this.room_assignments, () => {
                    writer.writeInt32(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateJudgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateJudgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.judge_id = reader.readInt32();
                        break;
                    case 2:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.room_assignments as any, reader, reader.readInt32, reader.readInt32));
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateJudgeRequest {
            return UpdateJudgeRequest.deserialize(bytes);
        }
    }
    export class UpdateJudgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): UpdateJudgeResponse {
            const message = new UpdateJudgeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateJudgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateJudgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateJudgeResponse {
            return UpdateJudgeResponse.deserialize(bytes);
        }
    }
    export class Pairing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairing_id?: number;
            round_number?: number;
            is_elimination_round?: boolean;
            room_id?: number;
            room_name?: string;
            team1?: Team;
            team2?: Team;
            head_judge_name?: string;
            judges?: Judge[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairing_id" in data && data.pairing_id != undefined) {
                    this.pairing_id = data.pairing_id;
                }
                if ("round_number" in data && data.round_number != undefined) {
                    this.round_number = data.round_number;
                }
                if ("is_elimination_round" in data && data.is_elimination_round != undefined) {
                    this.is_elimination_round = data.is_elimination_round;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("team1" in data && data.team1 != undefined) {
                    this.team1 = data.team1;
                }
                if ("team2" in data && data.team2 != undefined) {
                    this.team2 = data.team2;
                }
                if ("head_judge_name" in data && data.head_judge_name != undefined) {
                    this.head_judge_name = data.head_judge_name;
                }
                if ("judges" in data && data.judges != undefined) {
                    this.judges = data.judges;
                }
            }
        }
        get pairing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set pairing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_elimination_round() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_elimination_round(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get team1() {
            return pb_1.Message.getWrapperField(this, Team, 6) as Team;
        }
        set team1(value: Team) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_team1() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get team2() {
            return pb_1.Message.getWrapperField(this, Team, 7) as Team;
        }
        set team2(value: Team) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_team2() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get head_judge_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set head_judge_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get judges() {
            return pb_1.Message.getRepeatedWrapperField(this, Judge, 9) as Judge[];
        }
        set judges(value: Judge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            pairing_id?: number;
            round_number?: number;
            is_elimination_round?: boolean;
            room_id?: number;
            room_name?: string;
            team1?: ReturnType<typeof Team.prototype.toObject>;
            team2?: ReturnType<typeof Team.prototype.toObject>;
            head_judge_name?: string;
            judges?: ReturnType<typeof Judge.prototype.toObject>[];
        }): Pairing {
            const message = new Pairing({});
            if (data.pairing_id != null) {
                message.pairing_id = data.pairing_id;
            }
            if (data.round_number != null) {
                message.round_number = data.round_number;
            }
            if (data.is_elimination_round != null) {
                message.is_elimination_round = data.is_elimination_round;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.team1 != null) {
                message.team1 = Team.fromObject(data.team1);
            }
            if (data.team2 != null) {
                message.team2 = Team.fromObject(data.team2);
            }
            if (data.head_judge_name != null) {
                message.head_judge_name = data.head_judge_name;
            }
            if (data.judges != null) {
                message.judges = data.judges.map(item => Judge.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pairing_id?: number;
                round_number?: number;
                is_elimination_round?: boolean;
                room_id?: number;
                room_name?: string;
                team1?: ReturnType<typeof Team.prototype.toObject>;
                team2?: ReturnType<typeof Team.prototype.toObject>;
                head_judge_name?: string;
                judges?: ReturnType<typeof Judge.prototype.toObject>[];
            } = {};
            if (this.pairing_id != null) {
                data.pairing_id = this.pairing_id;
            }
            if (this.round_number != null) {
                data.round_number = this.round_number;
            }
            if (this.is_elimination_round != null) {
                data.is_elimination_round = this.is_elimination_round;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.team1 != null) {
                data.team1 = this.team1.toObject();
            }
            if (this.team2 != null) {
                data.team2 = this.team2.toObject();
            }
            if (this.head_judge_name != null) {
                data.head_judge_name = this.head_judge_name;
            }
            if (this.judges != null) {
                data.judges = this.judges.map((item: Judge) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairing_id != 0)
                writer.writeInt32(1, this.pairing_id);
            if (this.round_number != 0)
                writer.writeInt32(2, this.round_number);
            if (this.is_elimination_round != false)
                writer.writeBool(3, this.is_elimination_round);
            if (this.room_id != 0)
                writer.writeInt32(4, this.room_id);
            if (this.room_name.length)
                writer.writeString(5, this.room_name);
            if (this.has_team1)
                writer.writeMessage(6, this.team1, () => this.team1.serialize(writer));
            if (this.has_team2)
                writer.writeMessage(7, this.team2, () => this.team2.serialize(writer));
            if (this.head_judge_name.length)
                writer.writeString(8, this.head_judge_name);
            if (this.judges.length)
                writer.writeRepeatedMessage(9, this.judges, (item: Judge) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pairing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pairing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pairing_id = reader.readInt32();
                        break;
                    case 2:
                        message.round_number = reader.readInt32();
                        break;
                    case 3:
                        message.is_elimination_round = reader.readBool();
                        break;
                    case 4:
                        message.room_id = reader.readInt32();
                        break;
                    case 5:
                        message.room_name = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.team1, () => message.team1 = Team.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.team2, () => message.team2 = Team.deserialize(reader));
                        break;
                    case 8:
                        message.head_judge_name = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.judges, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Judge.deserialize(reader), Judge));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pairing {
            return Pairing.deserialize(bytes);
        }
    }
    export class Team extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            name?: string;
            speakers?: Speaker[];
            speaker_names?: string[];
            total_points?: number;
            league_name?: string;
            feedback?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("speakers" in data && data.speakers != undefined) {
                    this.speakers = data.speakers;
                }
                if ("speaker_names" in data && data.speaker_names != undefined) {
                    this.speaker_names = data.speaker_names;
                }
                if ("total_points" in data && data.total_points != undefined) {
                    this.total_points = data.total_points;
                }
                if ("league_name" in data && data.league_name != undefined) {
                    this.league_name = data.league_name;
                }
                if ("feedback" in data && data.feedback != undefined) {
                    this.feedback = data.feedback;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get speakers() {
            return pb_1.Message.getRepeatedWrapperField(this, Speaker, 3) as Speaker[];
        }
        set speakers(value: Speaker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get speaker_names() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set speaker_names(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_points() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_points(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get league_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set league_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get feedback() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set feedback(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            team_id?: number;
            name?: string;
            speakers?: ReturnType<typeof Speaker.prototype.toObject>[];
            speaker_names?: string[];
            total_points?: number;
            league_name?: string;
            feedback?: string;
        }): Team {
            const message = new Team({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.speakers != null) {
                message.speakers = data.speakers.map(item => Speaker.fromObject(item));
            }
            if (data.speaker_names != null) {
                message.speaker_names = data.speaker_names;
            }
            if (data.total_points != null) {
                message.total_points = data.total_points;
            }
            if (data.league_name != null) {
                message.league_name = data.league_name;
            }
            if (data.feedback != null) {
                message.feedback = data.feedback;
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                name?: string;
                speakers?: ReturnType<typeof Speaker.prototype.toObject>[];
                speaker_names?: string[];
                total_points?: number;
                league_name?: string;
                feedback?: string;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.speakers != null) {
                data.speakers = this.speakers.map((item: Speaker) => item.toObject());
            }
            if (this.speaker_names != null) {
                data.speaker_names = this.speaker_names;
            }
            if (this.total_points != null) {
                data.total_points = this.total_points;
            }
            if (this.league_name != null) {
                data.league_name = this.league_name;
            }
            if (this.feedback != null) {
                data.feedback = this.feedback;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeInt32(1, this.team_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.speakers.length)
                writer.writeRepeatedMessage(3, this.speakers, (item: Speaker) => item.serialize(writer));
            if (this.speaker_names.length)
                writer.writeRepeatedString(4, this.speaker_names);
            if (this.total_points != 0)
                writer.writeDouble(5, this.total_points);
            if (this.league_name.length)
                writer.writeString(6, this.league_name);
            if (this.feedback.length)
                writer.writeString(7, this.feedback);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Team {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Team();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.speakers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Speaker.deserialize(reader), Speaker));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.total_points = reader.readDouble();
                        break;
                    case 6:
                        message.league_name = reader.readString();
                        break;
                    case 7:
                        message.feedback = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Team {
            return Team.deserialize(bytes);
        }
    }
    export class Speaker extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            speaker_id?: number;
            name?: string;
            score_id?: number;
            rank?: number;
            points?: number;
            feedback?: string;
            team_id?: number;
            team_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speaker_id" in data && data.speaker_id != undefined) {
                    this.speaker_id = data.speaker_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("score_id" in data && data.score_id != undefined) {
                    this.score_id = data.score_id;
                }
                if ("rank" in data && data.rank != undefined) {
                    this.rank = data.rank;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("feedback" in data && data.feedback != undefined) {
                    this.feedback = data.feedback;
                }
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("team_name" in data && data.team_name != undefined) {
                    this.team_name = data.team_name;
                }
            }
        }
        get speaker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set speaker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get score_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set score_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rank() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set points(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get feedback() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set feedback(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get team_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set team_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            speaker_id?: number;
            name?: string;
            score_id?: number;
            rank?: number;
            points?: number;
            feedback?: string;
            team_id?: number;
            team_name?: string;
        }): Speaker {
            const message = new Speaker({});
            if (data.speaker_id != null) {
                message.speaker_id = data.speaker_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.score_id != null) {
                message.score_id = data.score_id;
            }
            if (data.rank != null) {
                message.rank = data.rank;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.feedback != null) {
                message.feedback = data.feedback;
            }
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.team_name != null) {
                message.team_name = data.team_name;
            }
            return message;
        }
        toObject() {
            const data: {
                speaker_id?: number;
                name?: string;
                score_id?: number;
                rank?: number;
                points?: number;
                feedback?: string;
                team_id?: number;
                team_name?: string;
            } = {};
            if (this.speaker_id != null) {
                data.speaker_id = this.speaker_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.score_id != null) {
                data.score_id = this.score_id;
            }
            if (this.rank != null) {
                data.rank = this.rank;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.feedback != null) {
                data.feedback = this.feedback;
            }
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.team_name != null) {
                data.team_name = this.team_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.speaker_id != 0)
                writer.writeInt32(1, this.speaker_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.score_id != 0)
                writer.writeInt32(3, this.score_id);
            if (this.rank != 0)
                writer.writeInt32(4, this.rank);
            if (this.points != 0)
                writer.writeDouble(5, this.points);
            if (this.feedback.length)
                writer.writeString(6, this.feedback);
            if (this.team_id != 0)
                writer.writeInt32(7, this.team_id);
            if (this.team_name.length)
                writer.writeString(8, this.team_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Speaker {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Speaker();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.speaker_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.score_id = reader.readInt32();
                        break;
                    case 4:
                        message.rank = reader.readInt32();
                        break;
                    case 5:
                        message.points = reader.readDouble();
                        break;
                    case 6:
                        message.feedback = reader.readString();
                        break;
                    case 7:
                        message.team_id = reader.readInt32();
                        break;
                    case 8:
                        message.team_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Speaker {
            return Speaker.deserialize(bytes);
        }
    }
    export class GetPairingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("round_number" in data && data.round_number != undefined) {
                    this.round_number = data.round_number;
                }
                if ("is_elimination" in data && data.is_elimination != undefined) {
                    this.is_elimination = data.is_elimination;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_elimination(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            token?: string;
        }): GetPairingsRequest {
            const message = new GetPairingsRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.round_number != null) {
                message.round_number = data.round_number;
            }
            if (data.is_elimination != null) {
                message.is_elimination = data.is_elimination;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                round_number?: number;
                is_elimination?: boolean;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.round_number != null) {
                data.round_number = this.round_number;
            }
            if (this.is_elimination != null) {
                data.is_elimination = this.is_elimination;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.round_number != 0)
                writer.writeInt32(2, this.round_number);
            if (this.is_elimination != false)
                writer.writeBool(3, this.is_elimination);
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPairingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPairingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.round_number = reader.readInt32();
                        break;
                    case 3:
                        message.is_elimination = reader.readBool();
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPairingsRequest {
            return GetPairingsRequest.deserialize(bytes);
        }
    }
    export class GetPairingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairings?: Pairing[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairings" in data && data.pairings != undefined) {
                    this.pairings = data.pairings;
                }
            }
        }
        get pairings() {
            return pb_1.Message.getRepeatedWrapperField(this, Pairing, 1) as Pairing[];
        }
        set pairings(value: Pairing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
        }): GetPairingsResponse {
            const message = new GetPairingsResponse({});
            if (data.pairings != null) {
                message.pairings = data.pairings.map(item => Pairing.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
            } = {};
            if (this.pairings != null) {
                data.pairings = this.pairings.map((item: Pairing) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairings.length)
                writer.writeRepeatedMessage(1, this.pairings, (item: Pairing) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPairingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPairingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Pairing.deserialize(reader), Pairing));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPairingsResponse {
            return GetPairingsResponse.deserialize(bytes);
        }
    }
    export class GetPairingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairing_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairing_id" in data && data.pairing_id != undefined) {
                    this.pairing_id = data.pairing_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get pairing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set pairing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pairing_id?: number;
            token?: string;
        }): GetPairingRequest {
            const message = new GetPairingRequest({});
            if (data.pairing_id != null) {
                message.pairing_id = data.pairing_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                pairing_id?: number;
                token?: string;
            } = {};
            if (this.pairing_id != null) {
                data.pairing_id = this.pairing_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairing_id != 0)
                writer.writeInt32(1, this.pairing_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPairingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPairingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pairing_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPairingRequest {
            return GetPairingRequest.deserialize(bytes);
        }
    }
    export class GetPairingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairing?: Pairing;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairing" in data && data.pairing != undefined) {
                    this.pairing = data.pairing;
                }
            }
        }
        get pairing() {
            return pb_1.Message.getWrapperField(this, Pairing, 1) as Pairing;
        }
        set pairing(value: Pairing) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pairing() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pairing?: ReturnType<typeof Pairing.prototype.toObject>;
        }): GetPairingResponse {
            const message = new GetPairingResponse({});
            if (data.pairing != null) {
                message.pairing = Pairing.fromObject(data.pairing);
            }
            return message;
        }
        toObject() {
            const data: {
                pairing?: ReturnType<typeof Pairing.prototype.toObject>;
            } = {};
            if (this.pairing != null) {
                data.pairing = this.pairing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pairing)
                writer.writeMessage(1, this.pairing, () => this.pairing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPairingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPairingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairing, () => message.pairing = Pairing.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPairingResponse {
            return GetPairingResponse.deserialize(bytes);
        }
    }
    export class UpdatePairingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairings?: Pairing[];
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairings" in data && data.pairings != undefined) {
                    this.pairings = data.pairings;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get pairings() {
            return pb_1.Message.getRepeatedWrapperField(this, Pairing, 1) as Pairing[];
        }
        set pairings(value: Pairing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
            token?: string;
        }): UpdatePairingsRequest {
            const message = new UpdatePairingsRequest({});
            if (data.pairings != null) {
                message.pairings = data.pairings.map(item => Pairing.fromObject(item));
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
                token?: string;
            } = {};
            if (this.pairings != null) {
                data.pairings = this.pairings.map((item: Pairing) => item.toObject());
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairings.length)
                writer.writeRepeatedMessage(1, this.pairings, (item: Pairing) => item.serialize(writer));
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePairingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePairingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Pairing.deserialize(reader), Pairing));
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePairingsRequest {
            return UpdatePairingsRequest.deserialize(bytes);
        }
    }
    export class UpdatePairingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairings?: Pairing[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairings" in data && data.pairings != undefined) {
                    this.pairings = data.pairings;
                }
            }
        }
        get pairings() {
            return pb_1.Message.getRepeatedWrapperField(this, Pairing, 1) as Pairing[];
        }
        set pairings(value: Pairing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
        }): UpdatePairingsResponse {
            const message = new UpdatePairingsResponse({});
            if (data.pairings != null) {
                message.pairings = data.pairings.map(item => Pairing.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
            } = {};
            if (this.pairings != null) {
                data.pairings = this.pairings.map((item: Pairing) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairings.length)
                writer.writeRepeatedMessage(1, this.pairings, (item: Pairing) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePairingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePairingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Pairing.deserialize(reader), Pairing));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePairingsResponse {
            return UpdatePairingsResponse.deserialize(bytes);
        }
    }
    export class Ballot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ballot_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            room_id?: number;
            room_name?: string;
            judges?: Judge[];
            team1?: Team;
            team2?: Team;
            recording_status?: string;
            verdict?: string;
            last_updated_by?: number;
            last_updated_at?: string;
            head_judge_submitted?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ballot_id" in data && data.ballot_id != undefined) {
                    this.ballot_id = data.ballot_id;
                }
                if ("round_number" in data && data.round_number != undefined) {
                    this.round_number = data.round_number;
                }
                if ("is_elimination" in data && data.is_elimination != undefined) {
                    this.is_elimination = data.is_elimination;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("judges" in data && data.judges != undefined) {
                    this.judges = data.judges;
                }
                if ("team1" in data && data.team1 != undefined) {
                    this.team1 = data.team1;
                }
                if ("team2" in data && data.team2 != undefined) {
                    this.team2 = data.team2;
                }
                if ("recording_status" in data && data.recording_status != undefined) {
                    this.recording_status = data.recording_status;
                }
                if ("verdict" in data && data.verdict != undefined) {
                    this.verdict = data.verdict;
                }
                if ("last_updated_by" in data && data.last_updated_by != undefined) {
                    this.last_updated_by = data.last_updated_by;
                }
                if ("last_updated_at" in data && data.last_updated_at != undefined) {
                    this.last_updated_at = data.last_updated_at;
                }
                if ("head_judge_submitted" in data && data.head_judge_submitted != undefined) {
                    this.head_judge_submitted = data.head_judge_submitted;
                }
            }
        }
        get ballot_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set ballot_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_elimination(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set room_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get judges() {
            return pb_1.Message.getRepeatedWrapperField(this, Judge, 6) as Judge[];
        }
        set judges(value: Judge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get team1() {
            return pb_1.Message.getWrapperField(this, Team, 7) as Team;
        }
        set team1(value: Team) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_team1() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get team2() {
            return pb_1.Message.getWrapperField(this, Team, 8) as Team;
        }
        set team2(value: Team) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_team2() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get recording_status() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set recording_status(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get verdict() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set verdict(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get last_updated_by() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set last_updated_by(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get last_updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set last_updated_at(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get head_judge_submitted() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set head_judge_submitted(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            ballot_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            room_id?: number;
            room_name?: string;
            judges?: ReturnType<typeof Judge.prototype.toObject>[];
            team1?: ReturnType<typeof Team.prototype.toObject>;
            team2?: ReturnType<typeof Team.prototype.toObject>;
            recording_status?: string;
            verdict?: string;
            last_updated_by?: number;
            last_updated_at?: string;
            head_judge_submitted?: boolean;
        }): Ballot {
            const message = new Ballot({});
            if (data.ballot_id != null) {
                message.ballot_id = data.ballot_id;
            }
            if (data.round_number != null) {
                message.round_number = data.round_number;
            }
            if (data.is_elimination != null) {
                message.is_elimination = data.is_elimination;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.judges != null) {
                message.judges = data.judges.map(item => Judge.fromObject(item));
            }
            if (data.team1 != null) {
                message.team1 = Team.fromObject(data.team1);
            }
            if (data.team2 != null) {
                message.team2 = Team.fromObject(data.team2);
            }
            if (data.recording_status != null) {
                message.recording_status = data.recording_status;
            }
            if (data.verdict != null) {
                message.verdict = data.verdict;
            }
            if (data.last_updated_by != null) {
                message.last_updated_by = data.last_updated_by;
            }
            if (data.last_updated_at != null) {
                message.last_updated_at = data.last_updated_at;
            }
            if (data.head_judge_submitted != null) {
                message.head_judge_submitted = data.head_judge_submitted;
            }
            return message;
        }
        toObject() {
            const data: {
                ballot_id?: number;
                round_number?: number;
                is_elimination?: boolean;
                room_id?: number;
                room_name?: string;
                judges?: ReturnType<typeof Judge.prototype.toObject>[];
                team1?: ReturnType<typeof Team.prototype.toObject>;
                team2?: ReturnType<typeof Team.prototype.toObject>;
                recording_status?: string;
                verdict?: string;
                last_updated_by?: number;
                last_updated_at?: string;
                head_judge_submitted?: boolean;
            } = {};
            if (this.ballot_id != null) {
                data.ballot_id = this.ballot_id;
            }
            if (this.round_number != null) {
                data.round_number = this.round_number;
            }
            if (this.is_elimination != null) {
                data.is_elimination = this.is_elimination;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.judges != null) {
                data.judges = this.judges.map((item: Judge) => item.toObject());
            }
            if (this.team1 != null) {
                data.team1 = this.team1.toObject();
            }
            if (this.team2 != null) {
                data.team2 = this.team2.toObject();
            }
            if (this.recording_status != null) {
                data.recording_status = this.recording_status;
            }
            if (this.verdict != null) {
                data.verdict = this.verdict;
            }
            if (this.last_updated_by != null) {
                data.last_updated_by = this.last_updated_by;
            }
            if (this.last_updated_at != null) {
                data.last_updated_at = this.last_updated_at;
            }
            if (this.head_judge_submitted != null) {
                data.head_judge_submitted = this.head_judge_submitted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ballot_id != 0)
                writer.writeInt32(1, this.ballot_id);
            if (this.round_number != 0)
                writer.writeInt32(2, this.round_number);
            if (this.is_elimination != false)
                writer.writeBool(3, this.is_elimination);
            if (this.room_id != 0)
                writer.writeInt32(4, this.room_id);
            if (this.room_name.length)
                writer.writeString(5, this.room_name);
            if (this.judges.length)
                writer.writeRepeatedMessage(6, this.judges, (item: Judge) => item.serialize(writer));
            if (this.has_team1)
                writer.writeMessage(7, this.team1, () => this.team1.serialize(writer));
            if (this.has_team2)
                writer.writeMessage(8, this.team2, () => this.team2.serialize(writer));
            if (this.recording_status.length)
                writer.writeString(9, this.recording_status);
            if (this.verdict.length)
                writer.writeString(10, this.verdict);
            if (this.last_updated_by != 0)
                writer.writeInt32(11, this.last_updated_by);
            if (this.last_updated_at.length)
                writer.writeString(12, this.last_updated_at);
            if (this.head_judge_submitted != false)
                writer.writeBool(13, this.head_judge_submitted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ballot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ballot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ballot_id = reader.readInt32();
                        break;
                    case 2:
                        message.round_number = reader.readInt32();
                        break;
                    case 3:
                        message.is_elimination = reader.readBool();
                        break;
                    case 4:
                        message.room_id = reader.readInt32();
                        break;
                    case 5:
                        message.room_name = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.judges, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Judge.deserialize(reader), Judge));
                        break;
                    case 7:
                        reader.readMessage(message.team1, () => message.team1 = Team.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.team2, () => message.team2 = Team.deserialize(reader));
                        break;
                    case 9:
                        message.recording_status = reader.readString();
                        break;
                    case 10:
                        message.verdict = reader.readString();
                        break;
                    case 11:
                        message.last_updated_by = reader.readInt32();
                        break;
                    case 12:
                        message.last_updated_at = reader.readString();
                        break;
                    case 13:
                        message.head_judge_submitted = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ballot {
            return Ballot.deserialize(bytes);
        }
    }
    export class GetBallotsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("round_number" in data && data.round_number != undefined) {
                    this.round_number = data.round_number;
                }
                if ("is_elimination" in data && data.is_elimination != undefined) {
                    this.is_elimination = data.is_elimination;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_elimination(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            token?: string;
        }): GetBallotsRequest {
            const message = new GetBallotsRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.round_number != null) {
                message.round_number = data.round_number;
            }
            if (data.is_elimination != null) {
                message.is_elimination = data.is_elimination;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                round_number?: number;
                is_elimination?: boolean;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.round_number != null) {
                data.round_number = this.round_number;
            }
            if (this.is_elimination != null) {
                data.is_elimination = this.is_elimination;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.round_number != 0)
                writer.writeInt32(2, this.round_number);
            if (this.is_elimination != false)
                writer.writeBool(3, this.is_elimination);
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBallotsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBallotsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.round_number = reader.readInt32();
                        break;
                    case 3:
                        message.is_elimination = reader.readBool();
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBallotsRequest {
            return GetBallotsRequest.deserialize(bytes);
        }
    }
    export class GetBallotsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ballots?: Ballot[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ballots" in data && data.ballots != undefined) {
                    this.ballots = data.ballots;
                }
            }
        }
        get ballots() {
            return pb_1.Message.getRepeatedWrapperField(this, Ballot, 1) as Ballot[];
        }
        set ballots(value: Ballot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            ballots?: ReturnType<typeof Ballot.prototype.toObject>[];
        }): GetBallotsResponse {
            const message = new GetBallotsResponse({});
            if (data.ballots != null) {
                message.ballots = data.ballots.map(item => Ballot.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ballots?: ReturnType<typeof Ballot.prototype.toObject>[];
            } = {};
            if (this.ballots != null) {
                data.ballots = this.ballots.map((item: Ballot) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ballots.length)
                writer.writeRepeatedMessage(1, this.ballots, (item: Ballot) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBallotsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBallotsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ballots, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Ballot.deserialize(reader), Ballot));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBallotsResponse {
            return GetBallotsResponse.deserialize(bytes);
        }
    }
    export class GetBallotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ballot_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ballot_id" in data && data.ballot_id != undefined) {
                    this.ballot_id = data.ballot_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get ballot_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set ballot_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ballot_id?: number;
            token?: string;
        }): GetBallotRequest {
            const message = new GetBallotRequest({});
            if (data.ballot_id != null) {
                message.ballot_id = data.ballot_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                ballot_id?: number;
                token?: string;
            } = {};
            if (this.ballot_id != null) {
                data.ballot_id = this.ballot_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ballot_id != 0)
                writer.writeInt32(1, this.ballot_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBallotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBallotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ballot_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBallotRequest {
            return GetBallotRequest.deserialize(bytes);
        }
    }
    export class GetBallotResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ballot?: Ballot;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ballot" in data && data.ballot != undefined) {
                    this.ballot = data.ballot;
                }
            }
        }
        get ballot() {
            return pb_1.Message.getWrapperField(this, Ballot, 1) as Ballot;
        }
        set ballot(value: Ballot) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ballot() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            ballot?: ReturnType<typeof Ballot.prototype.toObject>;
        }): GetBallotResponse {
            const message = new GetBallotResponse({});
            if (data.ballot != null) {
                message.ballot = Ballot.fromObject(data.ballot);
            }
            return message;
        }
        toObject() {
            const data: {
                ballot?: ReturnType<typeof Ballot.prototype.toObject>;
            } = {};
            if (this.ballot != null) {
                data.ballot = this.ballot.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ballot)
                writer.writeMessage(1, this.ballot, () => this.ballot.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBallotResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBallotResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ballot, () => message.ballot = Ballot.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBallotResponse {
            return GetBallotResponse.deserialize(bytes);
        }
    }
    export class UpdateBallotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ballot?: Ballot;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ballot" in data && data.ballot != undefined) {
                    this.ballot = data.ballot;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get ballot() {
            return pb_1.Message.getWrapperField(this, Ballot, 1) as Ballot;
        }
        set ballot(value: Ballot) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ballot() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ballot?: ReturnType<typeof Ballot.prototype.toObject>;
            token?: string;
        }): UpdateBallotRequest {
            const message = new UpdateBallotRequest({});
            if (data.ballot != null) {
                message.ballot = Ballot.fromObject(data.ballot);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                ballot?: ReturnType<typeof Ballot.prototype.toObject>;
                token?: string;
            } = {};
            if (this.ballot != null) {
                data.ballot = this.ballot.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ballot)
                writer.writeMessage(1, this.ballot, () => this.ballot.serialize(writer));
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateBallotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateBallotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ballot, () => message.ballot = Ballot.deserialize(reader));
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateBallotRequest {
            return UpdateBallotRequest.deserialize(bytes);
        }
    }
    export class UpdateBallotResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ballot?: Ballot;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ballot" in data && data.ballot != undefined) {
                    this.ballot = data.ballot;
                }
            }
        }
        get ballot() {
            return pb_1.Message.getWrapperField(this, Ballot, 1) as Ballot;
        }
        set ballot(value: Ballot) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ballot() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            ballot?: ReturnType<typeof Ballot.prototype.toObject>;
        }): UpdateBallotResponse {
            const message = new UpdateBallotResponse({});
            if (data.ballot != null) {
                message.ballot = Ballot.fromObject(data.ballot);
            }
            return message;
        }
        toObject() {
            const data: {
                ballot?: ReturnType<typeof Ballot.prototype.toObject>;
            } = {};
            if (this.ballot != null) {
                data.ballot = this.ballot.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ballot)
                writer.writeMessage(1, this.ballot, () => this.ballot.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateBallotResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateBallotResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ballot, () => message.ballot = Ballot.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateBallotResponse {
            return UpdateBallotResponse.deserialize(bytes);
        }
    }
    export class GeneratePairingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            is_elimination_round?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("is_elimination_round" in data && data.is_elimination_round != undefined) {
                    this.is_elimination_round = data.is_elimination_round;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_elimination_round() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_elimination_round(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            is_elimination_round?: boolean;
            token?: string;
        }): GeneratePairingsRequest {
            const message = new GeneratePairingsRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.is_elimination_round != null) {
                message.is_elimination_round = data.is_elimination_round;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                is_elimination_round?: boolean;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.is_elimination_round != null) {
                data.is_elimination_round = this.is_elimination_round;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.is_elimination_round != false)
                writer.writeBool(3, this.is_elimination_round);
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneratePairingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneratePairingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 3:
                        message.is_elimination_round = reader.readBool();
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeneratePairingsRequest {
            return GeneratePairingsRequest.deserialize(bytes);
        }
    }
    export class GeneratePairingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairings?: Pairing[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairings" in data && data.pairings != undefined) {
                    this.pairings = data.pairings;
                }
            }
        }
        get pairings() {
            return pb_1.Message.getRepeatedWrapperField(this, Pairing, 1) as Pairing[];
        }
        set pairings(value: Pairing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
        }): GeneratePairingsResponse {
            const message = new GeneratePairingsResponse({});
            if (data.pairings != null) {
                message.pairings = data.pairings.map(item => Pairing.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
            } = {};
            if (this.pairings != null) {
                data.pairings = this.pairings.map((item: Pairing) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairings.length)
                writer.writeRepeatedMessage(1, this.pairings, (item: Pairing) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneratePairingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneratePairingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Pairing.deserialize(reader), Pairing));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeneratePairingsResponse {
            return GeneratePairingsResponse.deserialize(bytes);
        }
    }
    export class AssignJudgesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("round_number" in data && data.round_number != undefined) {
                    this.round_number = data.round_number;
                }
                if ("is_elimination" in data && data.is_elimination != undefined) {
                    this.is_elimination = data.is_elimination;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_elimination(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            round_number?: number;
            is_elimination?: boolean;
            token?: string;
        }): AssignJudgesRequest {
            const message = new AssignJudgesRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.round_number != null) {
                message.round_number = data.round_number;
            }
            if (data.is_elimination != null) {
                message.is_elimination = data.is_elimination;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                round_number?: number;
                is_elimination?: boolean;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.round_number != null) {
                data.round_number = this.round_number;
            }
            if (this.is_elimination != null) {
                data.is_elimination = this.is_elimination;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.round_number != 0)
                writer.writeInt32(2, this.round_number);
            if (this.is_elimination != false)
                writer.writeBool(3, this.is_elimination);
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignJudgesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignJudgesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.round_number = reader.readInt32();
                        break;
                    case 3:
                        message.is_elimination = reader.readBool();
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignJudgesRequest {
            return AssignJudgesRequest.deserialize(bytes);
        }
    }
    export class AssignJudgesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairings?: Pairing[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairings" in data && data.pairings != undefined) {
                    this.pairings = data.pairings;
                }
            }
        }
        get pairings() {
            return pb_1.Message.getRepeatedWrapperField(this, Pairing, 1) as Pairing[];
        }
        set pairings(value: Pairing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
        }): AssignJudgesResponse {
            const message = new AssignJudgesResponse({});
            if (data.pairings != null) {
                message.pairings = data.pairings.map(item => Pairing.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pairings?: ReturnType<typeof Pairing.prototype.toObject>[];
            } = {};
            if (this.pairings != null) {
                data.pairings = this.pairings.map((item: Pairing) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairings.length)
                writer.writeRepeatedMessage(1, this.pairings, (item: Pairing) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignJudgesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignJudgesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Pairing.deserialize(reader), Pairing));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignJudgesResponse {
            return AssignJudgesResponse.deserialize(bytes);
        }
    }
    export class CreateTeamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            tournament_id?: number;
            speakers?: Speaker[];
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("speakers" in data && data.speakers != undefined) {
                    this.speakers = data.speakers;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get speakers() {
            return pb_1.Message.getRepeatedWrapperField(this, Speaker, 3) as Speaker[];
        }
        set speakers(value: Speaker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            tournament_id?: number;
            speakers?: ReturnType<typeof Speaker.prototype.toObject>[];
            token?: string;
        }): CreateTeamRequest {
            const message = new CreateTeamRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.speakers != null) {
                message.speakers = data.speakers.map(item => Speaker.fromObject(item));
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                tournament_id?: number;
                speakers?: ReturnType<typeof Speaker.prototype.toObject>[];
                token?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.speakers != null) {
                data.speakers = this.speakers.map((item: Speaker) => item.toObject());
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.tournament_id != 0)
                writer.writeInt32(2, this.tournament_id);
            if (this.speakers.length)
                writer.writeRepeatedMessage(3, this.speakers, (item: Speaker) => item.serialize(writer));
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTeamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTeamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.speakers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Speaker.deserialize(reader), Speaker));
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTeamRequest {
            return CreateTeamRequest.deserialize(bytes);
        }
    }
    export class GetTeamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            team_id?: number;
            token?: string;
        }): GetTeamRequest {
            const message = new GetTeamRequest({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                token?: string;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeInt32(1, this.team_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTeamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTeamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTeamRequest {
            return GetTeamRequest.deserialize(bytes);
        }
    }
    export class UpdateTeamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team?: Team;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team" in data && data.team != undefined) {
                    this.team = data.team;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get team() {
            return pb_1.Message.getWrapperField(this, Team, 1) as Team;
        }
        set team(value: Team) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_team() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            team?: ReturnType<typeof Team.prototype.toObject>;
            token?: string;
        }): UpdateTeamRequest {
            const message = new UpdateTeamRequest({});
            if (data.team != null) {
                message.team = Team.fromObject(data.team);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                team?: ReturnType<typeof Team.prototype.toObject>;
                token?: string;
            } = {};
            if (this.team != null) {
                data.team = this.team.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_team)
                writer.writeMessage(1, this.team, () => this.team.serialize(writer));
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTeamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTeamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.team, () => message.team = Team.deserialize(reader));
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTeamRequest {
            return UpdateTeamRequest.deserialize(bytes);
        }
    }
    export class DeleteTeamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            team_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("team_id" in data && data.team_id != undefined) {
                    this.team_id = data.team_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get team_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set team_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            team_id?: number;
            token?: string;
        }): DeleteTeamRequest {
            const message = new DeleteTeamRequest({});
            if (data.team_id != null) {
                message.team_id = data.team_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                team_id?: number;
                token?: string;
            } = {};
            if (this.team_id != null) {
                data.team_id = this.team_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.team_id != 0)
                writer.writeInt32(1, this.team_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTeamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTeamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.team_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTeamRequest {
            return DeleteTeamRequest.deserialize(bytes);
        }
    }
    export class DeleteTeamResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteTeamResponse {
            const message = new DeleteTeamResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTeamResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTeamResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTeamResponse {
            return DeleteTeamResponse.deserialize(bytes);
        }
    }
    export class GetTeamsByTournamentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            token?: string;
        }): GetTeamsByTournamentRequest {
            const message = new GetTeamsByTournamentRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTeamsByTournamentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTeamsByTournamentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTeamsByTournamentRequest {
            return GetTeamsByTournamentRequest.deserialize(bytes);
        }
    }
    export class GetTeamsByTournamentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teams?: Team[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teams" in data && data.teams != undefined) {
                    this.teams = data.teams;
                }
            }
        }
        get teams() {
            return pb_1.Message.getRepeatedWrapperField(this, Team, 1) as Team[];
        }
        set teams(value: Team[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            teams?: ReturnType<typeof Team.prototype.toObject>[];
        }): GetTeamsByTournamentResponse {
            const message = new GetTeamsByTournamentResponse({});
            if (data.teams != null) {
                message.teams = data.teams.map(item => Team.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                teams?: ReturnType<typeof Team.prototype.toObject>[];
            } = {};
            if (this.teams != null) {
                data.teams = this.teams.map((item: Team) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.teams.length)
                writer.writeRepeatedMessage(1, this.teams, (item: Team) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTeamsByTournamentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTeamsByTournamentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teams, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Team.deserialize(reader), Team));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTeamsByTournamentResponse {
            return GetTeamsByTournamentResponse.deserialize(bytes);
        }
    }
    export class RegeneratePairingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            is_elimination_round?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("is_elimination_round" in data && data.is_elimination_round != undefined) {
                    this.is_elimination_round = data.is_elimination_round;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_elimination_round() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_elimination_round(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            is_elimination_round?: boolean;
            token?: string;
        }): RegeneratePairingsRequest {
            const message = new RegeneratePairingsRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.is_elimination_round != null) {
                message.is_elimination_round = data.is_elimination_round;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                is_elimination_round?: boolean;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.is_elimination_round != null) {
                data.is_elimination_round = this.is_elimination_round;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.is_elimination_round != false)
                writer.writeBool(2, this.is_elimination_round);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegeneratePairingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegeneratePairingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.is_elimination_round = reader.readBool();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegeneratePairingsRequest {
            return RegeneratePairingsRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDebateServiceService {
        static definition = {
            GetRooms: {
                path: "/debate_management.DebateService/GetRooms",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRoomsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRoomsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRoomsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRoomsResponse.deserialize(new Uint8Array(bytes))
            },
            GetRoom: {
                path: "/debate_management.DebateService/GetRoom",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRoomRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRoomRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRoomResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRoomResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateRoom: {
                path: "/debate_management.DebateService/UpdateRoom",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRoomRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRoomRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateRoomResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateRoomResponse.deserialize(new Uint8Array(bytes))
            },
            GetJudges: {
                path: "/debate_management.DebateService/GetJudges",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetJudgesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetJudgesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetJudgesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetJudgesResponse.deserialize(new Uint8Array(bytes))
            },
            GetJudge: {
                path: "/debate_management.DebateService/GetJudge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetJudgeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetJudgeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetJudgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetJudgeResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateJudge: {
                path: "/debate_management.DebateService/UpdateJudge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateJudgeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateJudgeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateJudgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateJudgeResponse.deserialize(new Uint8Array(bytes))
            },
            GetPairings: {
                path: "/debate_management.DebateService/GetPairings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPairingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPairingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPairingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPairingsResponse.deserialize(new Uint8Array(bytes))
            },
            GetPairing: {
                path: "/debate_management.DebateService/GetPairing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPairingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPairingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPairingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPairingResponse.deserialize(new Uint8Array(bytes))
            },
            UpdatePairings: {
                path: "/debate_management.DebateService/UpdatePairings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdatePairingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdatePairingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdatePairingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdatePairingsResponse.deserialize(new Uint8Array(bytes))
            },
            GetBallots: {
                path: "/debate_management.DebateService/GetBallots",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBallotsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBallotsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBallotsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBallotsResponse.deserialize(new Uint8Array(bytes))
            },
            GetBallot: {
                path: "/debate_management.DebateService/GetBallot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBallotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBallotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBallotResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBallotResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateBallot: {
                path: "/debate_management.DebateService/UpdateBallot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateBallotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateBallotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateBallotResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateBallotResponse.deserialize(new Uint8Array(bytes))
            },
            GeneratePairings: {
                path: "/debate_management.DebateService/GeneratePairings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GeneratePairingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GeneratePairingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GeneratePairingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GeneratePairingsResponse.deserialize(new Uint8Array(bytes))
            },
            AssignJudges: {
                path: "/debate_management.DebateService/AssignJudges",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssignJudgesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssignJudgesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssignJudgesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssignJudgesResponse.deserialize(new Uint8Array(bytes))
            },
            CreateTeam: {
                path: "/debate_management.DebateService/CreateTeam",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTeamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTeamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Team) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Team.deserialize(new Uint8Array(bytes))
            },
            GetTeam: {
                path: "/debate_management.DebateService/GetTeam",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTeamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTeamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Team) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Team.deserialize(new Uint8Array(bytes))
            },
            UpdateTeam: {
                path: "/debate_management.DebateService/UpdateTeam",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTeamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTeamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Team) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Team.deserialize(new Uint8Array(bytes))
            },
            GetTeamsByTournament: {
                path: "/debate_management.DebateService/GetTeamsByTournament",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTeamsByTournamentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTeamsByTournamentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTeamsByTournamentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTeamsByTournamentResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteTeam: {
                path: "/debate_management.DebateService/DeleteTeam",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTeamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTeamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTeamResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTeamResponse.deserialize(new Uint8Array(bytes))
            },
            RegeneratePairings: {
                path: "/debate_management.DebateService/RegeneratePairings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegeneratePairingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegeneratePairingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GeneratePairingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GeneratePairingsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetRooms(call: grpc_1.ServerUnaryCall<GetRoomsRequest, GetRoomsResponse>, callback: grpc_1.sendUnaryData<GetRoomsResponse>): void;
        abstract GetRoom(call: grpc_1.ServerUnaryCall<GetRoomRequest, GetRoomResponse>, callback: grpc_1.sendUnaryData<GetRoomResponse>): void;
        abstract UpdateRoom(call: grpc_1.ServerUnaryCall<UpdateRoomRequest, UpdateRoomResponse>, callback: grpc_1.sendUnaryData<UpdateRoomResponse>): void;
        abstract GetJudges(call: grpc_1.ServerUnaryCall<GetJudgesRequest, GetJudgesResponse>, callback: grpc_1.sendUnaryData<GetJudgesResponse>): void;
        abstract GetJudge(call: grpc_1.ServerUnaryCall<GetJudgeRequest, GetJudgeResponse>, callback: grpc_1.sendUnaryData<GetJudgeResponse>): void;
        abstract UpdateJudge(call: grpc_1.ServerUnaryCall<UpdateJudgeRequest, UpdateJudgeResponse>, callback: grpc_1.sendUnaryData<UpdateJudgeResponse>): void;
        abstract GetPairings(call: grpc_1.ServerUnaryCall<GetPairingsRequest, GetPairingsResponse>, callback: grpc_1.sendUnaryData<GetPairingsResponse>): void;
        abstract GetPairing(call: grpc_1.ServerUnaryCall<GetPairingRequest, GetPairingResponse>, callback: grpc_1.sendUnaryData<GetPairingResponse>): void;
        abstract UpdatePairings(call: grpc_1.ServerUnaryCall<UpdatePairingsRequest, UpdatePairingsResponse>, callback: grpc_1.sendUnaryData<UpdatePairingsResponse>): void;
        abstract GetBallots(call: grpc_1.ServerUnaryCall<GetBallotsRequest, GetBallotsResponse>, callback: grpc_1.sendUnaryData<GetBallotsResponse>): void;
        abstract GetBallot(call: grpc_1.ServerUnaryCall<GetBallotRequest, GetBallotResponse>, callback: grpc_1.sendUnaryData<GetBallotResponse>): void;
        abstract UpdateBallot(call: grpc_1.ServerUnaryCall<UpdateBallotRequest, UpdateBallotResponse>, callback: grpc_1.sendUnaryData<UpdateBallotResponse>): void;
        abstract GeneratePairings(call: grpc_1.ServerUnaryCall<GeneratePairingsRequest, GeneratePairingsResponse>, callback: grpc_1.sendUnaryData<GeneratePairingsResponse>): void;
        abstract AssignJudges(call: grpc_1.ServerUnaryCall<AssignJudgesRequest, AssignJudgesResponse>, callback: grpc_1.sendUnaryData<AssignJudgesResponse>): void;
        abstract CreateTeam(call: grpc_1.ServerUnaryCall<CreateTeamRequest, Team>, callback: grpc_1.sendUnaryData<Team>): void;
        abstract GetTeam(call: grpc_1.ServerUnaryCall<GetTeamRequest, Team>, callback: grpc_1.sendUnaryData<Team>): void;
        abstract UpdateTeam(call: grpc_1.ServerUnaryCall<UpdateTeamRequest, Team>, callback: grpc_1.sendUnaryData<Team>): void;
        abstract GetTeamsByTournament(call: grpc_1.ServerUnaryCall<GetTeamsByTournamentRequest, GetTeamsByTournamentResponse>, callback: grpc_1.sendUnaryData<GetTeamsByTournamentResponse>): void;
        abstract DeleteTeam(call: grpc_1.ServerUnaryCall<DeleteTeamRequest, DeleteTeamResponse>, callback: grpc_1.sendUnaryData<DeleteTeamResponse>): void;
        abstract RegeneratePairings(call: grpc_1.ServerUnaryCall<RegeneratePairingsRequest, GeneratePairingsResponse>, callback: grpc_1.sendUnaryData<GeneratePairingsResponse>): void;
    }
    export class DebateServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDebateServiceService.definition, "DebateService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetRooms: GrpcUnaryServiceInterface<GetRoomsRequest, GetRoomsResponse> = (message: GetRoomsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRoomsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRoomsResponse>, callback?: grpc_1.requestCallback<GetRoomsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRooms(message, metadata, options, callback);
        };
        GetRoom: GrpcUnaryServiceInterface<GetRoomRequest, GetRoomResponse> = (message: GetRoomRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRoomResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRoomResponse>, callback?: grpc_1.requestCallback<GetRoomResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRoom(message, metadata, options, callback);
        };
        UpdateRoom: GrpcUnaryServiceInterface<UpdateRoomRequest, UpdateRoomResponse> = (message: UpdateRoomRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateRoomResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateRoomResponse>, callback?: grpc_1.requestCallback<UpdateRoomResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateRoom(message, metadata, options, callback);
        };
        GetJudges: GrpcUnaryServiceInterface<GetJudgesRequest, GetJudgesResponse> = (message: GetJudgesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetJudgesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetJudgesResponse>, callback?: grpc_1.requestCallback<GetJudgesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetJudges(message, metadata, options, callback);
        };
        GetJudge: GrpcUnaryServiceInterface<GetJudgeRequest, GetJudgeResponse> = (message: GetJudgeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetJudgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetJudgeResponse>, callback?: grpc_1.requestCallback<GetJudgeResponse>): grpc_1.ClientUnaryCall => {
            return super.GetJudge(message, metadata, options, callback);
        };
        UpdateJudge: GrpcUnaryServiceInterface<UpdateJudgeRequest, UpdateJudgeResponse> = (message: UpdateJudgeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateJudgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateJudgeResponse>, callback?: grpc_1.requestCallback<UpdateJudgeResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateJudge(message, metadata, options, callback);
        };
        GetPairings: GrpcUnaryServiceInterface<GetPairingsRequest, GetPairingsResponse> = (message: GetPairingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPairingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPairingsResponse>, callback?: grpc_1.requestCallback<GetPairingsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPairings(message, metadata, options, callback);
        };
        GetPairing: GrpcUnaryServiceInterface<GetPairingRequest, GetPairingResponse> = (message: GetPairingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPairingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPairingResponse>, callback?: grpc_1.requestCallback<GetPairingResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPairing(message, metadata, options, callback);
        };
        UpdatePairings: GrpcUnaryServiceInterface<UpdatePairingsRequest, UpdatePairingsResponse> = (message: UpdatePairingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdatePairingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdatePairingsResponse>, callback?: grpc_1.requestCallback<UpdatePairingsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdatePairings(message, metadata, options, callback);
        };
        GetBallots: GrpcUnaryServiceInterface<GetBallotsRequest, GetBallotsResponse> = (message: GetBallotsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetBallotsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetBallotsResponse>, callback?: grpc_1.requestCallback<GetBallotsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBallots(message, metadata, options, callback);
        };
        GetBallot: GrpcUnaryServiceInterface<GetBallotRequest, GetBallotResponse> = (message: GetBallotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetBallotResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetBallotResponse>, callback?: grpc_1.requestCallback<GetBallotResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBallot(message, metadata, options, callback);
        };
        UpdateBallot: GrpcUnaryServiceInterface<UpdateBallotRequest, UpdateBallotResponse> = (message: UpdateBallotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateBallotResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateBallotResponse>, callback?: grpc_1.requestCallback<UpdateBallotResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateBallot(message, metadata, options, callback);
        };
        GeneratePairings: GrpcUnaryServiceInterface<GeneratePairingsRequest, GeneratePairingsResponse> = (message: GeneratePairingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GeneratePairingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GeneratePairingsResponse>, callback?: grpc_1.requestCallback<GeneratePairingsResponse>): grpc_1.ClientUnaryCall => {
            return super.GeneratePairings(message, metadata, options, callback);
        };
        AssignJudges: GrpcUnaryServiceInterface<AssignJudgesRequest, AssignJudgesResponse> = (message: AssignJudgesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssignJudgesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssignJudgesResponse>, callback?: grpc_1.requestCallback<AssignJudgesResponse>): grpc_1.ClientUnaryCall => {
            return super.AssignJudges(message, metadata, options, callback);
        };
        CreateTeam: GrpcUnaryServiceInterface<CreateTeamRequest, Team> = (message: CreateTeamRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Team>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Team>, callback?: grpc_1.requestCallback<Team>): grpc_1.ClientUnaryCall => {
            return super.CreateTeam(message, metadata, options, callback);
        };
        GetTeam: GrpcUnaryServiceInterface<GetTeamRequest, Team> = (message: GetTeamRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Team>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Team>, callback?: grpc_1.requestCallback<Team>): grpc_1.ClientUnaryCall => {
            return super.GetTeam(message, metadata, options, callback);
        };
        UpdateTeam: GrpcUnaryServiceInterface<UpdateTeamRequest, Team> = (message: UpdateTeamRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Team>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Team>, callback?: grpc_1.requestCallback<Team>): grpc_1.ClientUnaryCall => {
            return super.UpdateTeam(message, metadata, options, callback);
        };
        GetTeamsByTournament: GrpcUnaryServiceInterface<GetTeamsByTournamentRequest, GetTeamsByTournamentResponse> = (message: GetTeamsByTournamentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTeamsByTournamentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTeamsByTournamentResponse>, callback?: grpc_1.requestCallback<GetTeamsByTournamentResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTeamsByTournament(message, metadata, options, callback);
        };
        DeleteTeam: GrpcUnaryServiceInterface<DeleteTeamRequest, DeleteTeamResponse> = (message: DeleteTeamRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTeamResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTeamResponse>, callback?: grpc_1.requestCallback<DeleteTeamResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteTeam(message, metadata, options, callback);
        };
        RegeneratePairings: GrpcUnaryServiceInterface<RegeneratePairingsRequest, GeneratePairingsResponse> = (message: RegeneratePairingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GeneratePairingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GeneratePairingsResponse>, callback?: grpc_1.requestCallback<GeneratePairingsResponse>): grpc_1.ClientUnaryCall => {
            return super.RegeneratePairings(message, metadata, options, callback);
        };
    }
}
