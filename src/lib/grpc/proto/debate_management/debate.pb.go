// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: internal/grpc/proto/debate_management/debate.proto

package debate_management

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Room messages
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName string `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Capacity int32  `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{0}
}

func (x *Room) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Room) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Room) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Room) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type RoundStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round  int32  `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RoundStatus) Reset() {
	*x = RoundStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStatus) ProtoMessage() {}

func (x *RoundStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStatus.ProtoReflect.Descriptor instead.
func (*RoundStatus) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{1}
}

func (x *RoundStatus) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RoundStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RoomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName    string `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Preliminary string `protobuf:"bytes,3,opt,name=preliminary,proto3" json:"preliminary,omitempty"`
	Elimination string `protobuf:"bytes,4,opt,name=elimination,proto3" json:"elimination,omitempty"`
}

func (x *RoomStatus) Reset() {
	*x = RoomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStatus) ProtoMessage() {}

func (x *RoomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStatus.ProtoReflect.Descriptor instead.
func (*RoomStatus) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{2}
}

func (x *RoomStatus) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomStatus) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomStatus) GetPreliminary() string {
	if x != nil {
		return x.Preliminary
	}
	return ""
}

func (x *RoomStatus) GetElimination() string {
	if x != nil {
		return x.Elimination
	}
	return ""
}

type GetRoomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetRoomsRequest) Reset() {
	*x = GetRoomsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomsRequest) ProtoMessage() {}

func (x *GetRoomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomsRequest.ProtoReflect.Descriptor instead.
func (*GetRoomsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{3}
}

func (x *GetRoomsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetRoomsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetRoomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms []*RoomStatus `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *GetRoomsResponse) Reset() {
	*x = GetRoomsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomsResponse) ProtoMessage() {}

func (x *GetRoomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomsResponse.ProtoReflect.Descriptor instead.
func (*GetRoomsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{4}
}

func (x *GetRoomsResponse) GetRooms() []*RoomStatus {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type GetRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	TournamentId int32  `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetRoomRequest) Reset() {
	*x = GetRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomRequest) ProtoMessage() {}

func (x *GetRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomRequest.ProtoReflect.Descriptor instead.
func (*GetRoomRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{5}
}

func (x *GetRoomRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetRoomRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetRoomRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      int32          `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Preliminary []*RoundStatus `protobuf:"bytes,3,rep,name=preliminary,proto3" json:"preliminary,omitempty"`
	Elimination []*RoundStatus `protobuf:"bytes,4,rep,name=elimination,proto3" json:"elimination,omitempty"`
}

func (x *GetRoomResponse) Reset() {
	*x = GetRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomResponse) ProtoMessage() {}

func (x *GetRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomResponse.ProtoReflect.Descriptor instead.
func (*GetRoomResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{6}
}

func (x *GetRoomResponse) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetRoomResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRoomResponse) GetPreliminary() []*RoundStatus {
	if x != nil {
		return x.Preliminary
	}
	return nil
}

func (x *GetRoomResponse) GetElimination() []*RoundStatus {
	if x != nil {
		return x.Elimination
	}
	return nil
}

type UpdateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room  *Room  `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateRoomRequest) Reset() {
	*x = UpdateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoomRequest) ProtoMessage() {}

func (x *UpdateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoomRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoomRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRoomRequest) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *UpdateRoomRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *UpdateRoomResponse) Reset() {
	*x = UpdateRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoomResponse) ProtoMessage() {}

func (x *UpdateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoomResponse.ProtoReflect.Descriptor instead.
func (*UpdateRoomResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRoomResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

// Judge messages
type Judge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId            int32  `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IdebateId          string `protobuf:"bytes,3,opt,name=idebate_id,json=idebateId,proto3" json:"idebate_id,omitempty"`
	PreliminaryDebates int32  `protobuf:"varint,4,opt,name=preliminary_debates,json=preliminaryDebates,proto3" json:"preliminary_debates,omitempty"`
	EliminationDebates int32  `protobuf:"varint,5,opt,name=elimination_debates,json=eliminationDebates,proto3" json:"elimination_debates,omitempty"`
}

func (x *Judge) Reset() {
	*x = Judge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Judge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Judge) ProtoMessage() {}

func (x *Judge) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Judge.ProtoReflect.Descriptor instead.
func (*Judge) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{9}
}

func (x *Judge) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *Judge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Judge) GetIdebateId() string {
	if x != nil {
		return x.IdebateId
	}
	return ""
}

func (x *Judge) GetPreliminaryDebates() int32 {
	if x != nil {
		return x.PreliminaryDebates
	}
	return 0
}

func (x *Judge) GetEliminationDebates() int32 {
	if x != nil {
		return x.EliminationDebates
	}
	return 0
}

type GetJudgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetJudgesRequest) Reset() {
	*x = GetJudgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgesRequest) ProtoMessage() {}

func (x *GetJudgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgesRequest.ProtoReflect.Descriptor instead.
func (*GetJudgesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{10}
}

func (x *GetJudgesRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetJudgesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetJudgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Judges []*Judge `protobuf:"bytes,1,rep,name=judges,proto3" json:"judges,omitempty"`
}

func (x *GetJudgesResponse) Reset() {
	*x = GetJudgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgesResponse) ProtoMessage() {}

func (x *GetJudgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgesResponse.ProtoReflect.Descriptor instead.
func (*GetJudgesResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{11}
}

func (x *GetJudgesResponse) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName    string `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	IsHeadJudge bool   `protobuf:"varint,3,opt,name=is_head_judge,json=isHeadJudge,proto3" json:"is_head_judge,omitempty"`
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{12}
}

func (x *RoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomInfo) GetIsHeadJudge() bool {
	if x != nil {
		return x.IsHeadJudge
	}
	return false
}

type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms map[int32]*RoomInfo `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{13}
}

func (x *RoundInfo) GetRooms() map[int32]*RoomInfo {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type GetJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId      int32  `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	TournamentId int32  `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetJudgeRequest) Reset() {
	*x = GetJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgeRequest) ProtoMessage() {}

func (x *GetJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgeRequest.ProtoReflect.Descriptor instead.
func (*GetJudgeRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{14}
}

func (x *GetJudgeRequest) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *GetJudgeRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetJudgeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetJudgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId     int32               `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IdebateId   string              `protobuf:"bytes,3,opt,name=idebate_id,json=idebateId,proto3" json:"idebate_id,omitempty"`
	Preliminary map[int32]*RoomInfo `protobuf:"bytes,4,rep,name=preliminary,proto3" json:"preliminary,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Elimination map[int32]*RoomInfo `protobuf:"bytes,5,rep,name=elimination,proto3" json:"elimination,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetJudgeResponse) Reset() {
	*x = GetJudgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgeResponse) ProtoMessage() {}

func (x *GetJudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgeResponse.ProtoReflect.Descriptor instead.
func (*GetJudgeResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{15}
}

func (x *GetJudgeResponse) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *GetJudgeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetJudgeResponse) GetIdebateId() string {
	if x != nil {
		return x.IdebateId
	}
	return ""
}

func (x *GetJudgeResponse) GetPreliminary() map[int32]*RoomInfo {
	if x != nil {
		return x.Preliminary
	}
	return nil
}

func (x *GetJudgeResponse) GetElimination() map[int32]*RoomInfo {
	if x != nil {
		return x.Elimination
	}
	return nil
}

type UpdateJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId      int32               `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	TournamentId int32               `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Preliminary  map[int32]*RoomInfo `protobuf:"bytes,3,rep,name=preliminary,proto3" json:"preliminary,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Elimination  map[int32]*RoomInfo `protobuf:"bytes,4,rep,name=elimination,proto3" json:"elimination,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Token        string              `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateJudgeRequest) Reset() {
	*x = UpdateJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJudgeRequest) ProtoMessage() {}

func (x *UpdateJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJudgeRequest.ProtoReflect.Descriptor instead.
func (*UpdateJudgeRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateJudgeRequest) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *UpdateJudgeRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *UpdateJudgeRequest) GetPreliminary() map[int32]*RoomInfo {
	if x != nil {
		return x.Preliminary
	}
	return nil
}

func (x *UpdateJudgeRequest) GetElimination() map[int32]*RoomInfo {
	if x != nil {
		return x.Elimination
	}
	return nil
}

func (x *UpdateJudgeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateJudgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateJudgeResponse) Reset() {
	*x = UpdateJudgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJudgeResponse) ProtoMessage() {}

func (x *UpdateJudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJudgeResponse.ProtoReflect.Descriptor instead.
func (*UpdateJudgeResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateJudgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateJudgeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Pairing messages
type Pairing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairingId          int32    `protobuf:"varint,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	RoundNumber        int32    `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsEliminationRound bool     `protobuf:"varint,3,opt,name=is_elimination_round,json=isEliminationRound,proto3" json:"is_elimination_round,omitempty"`
	RoomId             int32    `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName           string   `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Team1              *Team    `protobuf:"bytes,6,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2              *Team    `protobuf:"bytes,7,opt,name=team2,proto3" json:"team2,omitempty"`
	HeadJudgeName      string   `protobuf:"bytes,8,opt,name=head_judge_name,json=headJudgeName,proto3" json:"head_judge_name,omitempty"`
	Judges             []*Judge `protobuf:"bytes,9,rep,name=judges,proto3" json:"judges,omitempty"`
}

func (x *Pairing) Reset() {
	*x = Pairing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pairing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pairing) ProtoMessage() {}

func (x *Pairing) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pairing.ProtoReflect.Descriptor instead.
func (*Pairing) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{18}
}

func (x *Pairing) GetPairingId() int32 {
	if x != nil {
		return x.PairingId
	}
	return 0
}

func (x *Pairing) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *Pairing) GetIsEliminationRound() bool {
	if x != nil {
		return x.IsEliminationRound
	}
	return false
}

func (x *Pairing) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Pairing) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Pairing) GetTeam1() *Team {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *Pairing) GetTeam2() *Team {
	if x != nil {
		return x.Team2
	}
	return nil
}

func (x *Pairing) GetHeadJudgeName() string {
	if x != nil {
		return x.HeadJudgeName
	}
	return ""
}

func (x *Pairing) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       int32      `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Name         string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Speakers     []*Speaker `protobuf:"bytes,3,rep,name=speakers,proto3" json:"speakers,omitempty"`
	SpeakerNames []string   `protobuf:"bytes,4,rep,name=speaker_names,json=speakerNames,proto3" json:"speaker_names,omitempty"`
	TotalPoints  float64    `protobuf:"fixed64,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	LeagueName   string     `protobuf:"bytes,6,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
	Feedback     string     `protobuf:"bytes,7,opt,name=feedback,proto3" json:"feedback,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{19}
}

func (x *Team) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetSpeakers() []*Speaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

func (x *Team) GetSpeakerNames() []string {
	if x != nil {
		return x.SpeakerNames
	}
	return nil
}

func (x *Team) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *Team) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *Team) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

type Speaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerId int32   `protobuf:"varint,1,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ScoreId   int32   `protobuf:"varint,3,opt,name=score_id,json=scoreId,proto3" json:"score_id,omitempty"`
	Rank      int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Points    float64 `protobuf:"fixed64,5,opt,name=points,proto3" json:"points,omitempty"`
	Feedback  string  `protobuf:"bytes,6,opt,name=feedback,proto3" json:"feedback,omitempty"`
	TeamId    int32   `protobuf:"varint,7,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TeamName  string  `protobuf:"bytes,8,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
}

func (x *Speaker) Reset() {
	*x = Speaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speaker) ProtoMessage() {}

func (x *Speaker) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speaker.ProtoReflect.Descriptor instead.
func (*Speaker) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{20}
}

func (x *Speaker) GetSpeakerId() int32 {
	if x != nil {
		return x.SpeakerId
	}
	return 0
}

func (x *Speaker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Speaker) GetScoreId() int32 {
	if x != nil {
		return x.ScoreId
	}
	return 0
}

func (x *Speaker) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Speaker) GetPoints() float64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Speaker) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *Speaker) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Speaker) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

type GetPairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetPairingsRequest) Reset() {
	*x = GetPairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairingsRequest) ProtoMessage() {}

func (x *GetPairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairingsRequest.ProtoReflect.Descriptor instead.
func (*GetPairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{21}
}

func (x *GetPairingsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetPairingsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GetPairingsRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *GetPairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetPairingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *GetPairingsResponse) Reset() {
	*x = GetPairingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairingsResponse) ProtoMessage() {}

func (x *GetPairingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairingsResponse.ProtoReflect.Descriptor instead.
func (*GetPairingsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{22}
}

func (x *GetPairingsResponse) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

type UpdatePairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
	Token    string     `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdatePairingsRequest) Reset() {
	*x = UpdatePairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePairingsRequest) ProtoMessage() {}

func (x *UpdatePairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePairingsRequest.ProtoReflect.Descriptor instead.
func (*UpdatePairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{23}
}

func (x *UpdatePairingsRequest) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

func (x *UpdatePairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdatePairingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *UpdatePairingsResponse) Reset() {
	*x = UpdatePairingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePairingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePairingsResponse) ProtoMessage() {}

func (x *UpdatePairingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePairingsResponse.ProtoReflect.Descriptor instead.
func (*UpdatePairingsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{24}
}

func (x *UpdatePairingsResponse) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

// Ballot messages
type Ballot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallotId           int32    `protobuf:"varint,1,opt,name=ballot_id,json=ballotId,proto3" json:"ballot_id,omitempty"`
	RoundNumber        int32    `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination      bool     `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	RoomId             int32    `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName           string   `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Judges             []*Judge `protobuf:"bytes,6,rep,name=judges,proto3" json:"judges,omitempty"`
	Team1              *Team    `protobuf:"bytes,7,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2              *Team    `protobuf:"bytes,8,opt,name=team2,proto3" json:"team2,omitempty"`
	RecordingStatus    string   `protobuf:"bytes,9,opt,name=recording_status,json=recordingStatus,proto3" json:"recording_status,omitempty"`
	Verdict            string   `protobuf:"bytes,10,opt,name=verdict,proto3" json:"verdict,omitempty"`
	LastUpdatedBy      int32    `protobuf:"varint,11,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	LastUpdatedAt      string   `protobuf:"bytes,12,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	HeadJudgeSubmitted bool     `protobuf:"varint,13,opt,name=head_judge_submitted,json=headJudgeSubmitted,proto3" json:"head_judge_submitted,omitempty"`
}

func (x *Ballot) Reset() {
	*x = Ballot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ballot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ballot) ProtoMessage() {}

func (x *Ballot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ballot.ProtoReflect.Descriptor instead.
func (*Ballot) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{25}
}

func (x *Ballot) GetBallotId() int32 {
	if x != nil {
		return x.BallotId
	}
	return 0
}

func (x *Ballot) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *Ballot) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *Ballot) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Ballot) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Ballot) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

func (x *Ballot) GetTeam1() *Team {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *Ballot) GetTeam2() *Team {
	if x != nil {
		return x.Team2
	}
	return nil
}

func (x *Ballot) GetRecordingStatus() string {
	if x != nil {
		return x.RecordingStatus
	}
	return ""
}

func (x *Ballot) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *Ballot) GetLastUpdatedBy() int32 {
	if x != nil {
		return x.LastUpdatedBy
	}
	return 0
}

func (x *Ballot) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *Ballot) GetHeadJudgeSubmitted() bool {
	if x != nil {
		return x.HeadJudgeSubmitted
	}
	return false
}

type GetBallotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetBallotsRequest) Reset() {
	*x = GetBallotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotsRequest) ProtoMessage() {}

func (x *GetBallotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotsRequest.ProtoReflect.Descriptor instead.
func (*GetBallotsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{26}
}

func (x *GetBallotsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetBallotsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GetBallotsRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *GetBallotsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetBallotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballots []*Ballot `protobuf:"bytes,1,rep,name=ballots,proto3" json:"ballots,omitempty"`
}

func (x *GetBallotsResponse) Reset() {
	*x = GetBallotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotsResponse) ProtoMessage() {}

func (x *GetBallotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotsResponse.ProtoReflect.Descriptor instead.
func (*GetBallotsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{27}
}

func (x *GetBallotsResponse) GetBallots() []*Ballot {
	if x != nil {
		return x.Ballots
	}
	return nil
}

type GetBallotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallotId int32  `protobuf:"varint,1,opt,name=ballot_id,json=ballotId,proto3" json:"ballot_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetBallotRequest) Reset() {
	*x = GetBallotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotRequest) ProtoMessage() {}

func (x *GetBallotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotRequest.ProtoReflect.Descriptor instead.
func (*GetBallotRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{28}
}

func (x *GetBallotRequest) GetBallotId() int32 {
	if x != nil {
		return x.BallotId
	}
	return 0
}

func (x *GetBallotRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetBallotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *GetBallotResponse) Reset() {
	*x = GetBallotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotResponse) ProtoMessage() {}

func (x *GetBallotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotResponse.ProtoReflect.Descriptor instead.
func (*GetBallotResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{29}
}

func (x *GetBallotResponse) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

type GetBallotByJudgeIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId      int32  `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	TournamentId int32  `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetBallotByJudgeIDRequest) Reset() {
	*x = GetBallotByJudgeIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotByJudgeIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotByJudgeIDRequest) ProtoMessage() {}

func (x *GetBallotByJudgeIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotByJudgeIDRequest.ProtoReflect.Descriptor instead.
func (*GetBallotByJudgeIDRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{30}
}

func (x *GetBallotByJudgeIDRequest) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *GetBallotByJudgeIDRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetBallotByJudgeIDRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetBallotByJudgeIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *GetBallotByJudgeIDResponse) Reset() {
	*x = GetBallotByJudgeIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotByJudgeIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotByJudgeIDResponse) ProtoMessage() {}

func (x *GetBallotByJudgeIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotByJudgeIDResponse.ProtoReflect.Descriptor instead.
func (*GetBallotByJudgeIDResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{31}
}

func (x *GetBallotByJudgeIDResponse) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

type UpdateBallotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
	Token  string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateBallotRequest) Reset() {
	*x = UpdateBallotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBallotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBallotRequest) ProtoMessage() {}

func (x *UpdateBallotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBallotRequest.ProtoReflect.Descriptor instead.
func (*UpdateBallotRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateBallotRequest) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

func (x *UpdateBallotRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateBallotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *UpdateBallotResponse) Reset() {
	*x = UpdateBallotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBallotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBallotResponse) ProtoMessage() {}

func (x *UpdateBallotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBallotResponse.ProtoReflect.Descriptor instead.
func (*UpdateBallotResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateBallotResponse) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

// Algorithm integration messages
type GeneratePreliminaryPairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GeneratePreliminaryPairingsRequest) Reset() {
	*x = GeneratePreliminaryPairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePreliminaryPairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePreliminaryPairingsRequest) ProtoMessage() {}

func (x *GeneratePreliminaryPairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePreliminaryPairingsRequest.ProtoReflect.Descriptor instead.
func (*GeneratePreliminaryPairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{34}
}

func (x *GeneratePreliminaryPairingsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GeneratePreliminaryPairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GenerateEliminationPairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber  int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GenerateEliminationPairingsRequest) Reset() {
	*x = GenerateEliminationPairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateEliminationPairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateEliminationPairingsRequest) ProtoMessage() {}

func (x *GenerateEliminationPairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateEliminationPairingsRequest.ProtoReflect.Descriptor instead.
func (*GenerateEliminationPairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{35}
}

func (x *GenerateEliminationPairingsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GenerateEliminationPairingsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GenerateEliminationPairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GeneratePairingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *GeneratePairingsResponse) Reset() {
	*x = GeneratePairingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePairingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePairingsResponse) ProtoMessage() {}

func (x *GeneratePairingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePairingsResponse.ProtoReflect.Descriptor instead.
func (*GeneratePairingsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{36}
}

func (x *GeneratePairingsResponse) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TournamentId int32      `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Speakers     []*Speaker `protobuf:"bytes,3,rep,name=speakers,proto3" json:"speakers,omitempty"`
	Token        string     `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{37}
}

func (x *CreateTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTeamRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *CreateTeamRequest) GetSpeakers() []*Speaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

func (x *CreateTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId int32  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{38}
}

func (x *GetTeamRequest) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *GetTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team  *Team  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTeamRequest) Reset() {
	*x = UpdateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamRequest) ProtoMessage() {}

func (x *UpdateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateTeamRequest) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *UpdateTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId int32  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTeamRequest) Reset() {
	*x = DeleteTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamRequest) ProtoMessage() {}

func (x *DeleteTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteTeamRequest) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *DeleteTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTeamResponse) Reset() {
	*x = DeleteTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamResponse) ProtoMessage() {}

func (x *DeleteTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamResponse.ProtoReflect.Descriptor instead.
func (*DeleteTeamResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteTeamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTeamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTeamsByTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTeamsByTournamentRequest) Reset() {
	*x = GetTeamsByTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamsByTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsByTournamentRequest) ProtoMessage() {}

func (x *GetTeamsByTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsByTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsByTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{42}
}

func (x *GetTeamsByTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetTeamsByTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTeamsByTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *GetTeamsByTournamentResponse) Reset() {
	*x = GetTeamsByTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamsByTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsByTournamentResponse) ProtoMessage() {}

func (x *GetTeamsByTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsByTournamentResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsByTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{43}
}

func (x *GetTeamsByTournamentResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type OverallRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *OverallRankingRequest) Reset() {
	*x = OverallRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverallRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverallRankingRequest) ProtoMessage() {}

func (x *OverallRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverallRankingRequest.ProtoReflect.Descriptor instead.
func (*OverallRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{44}
}

func (x *OverallRankingRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OverallRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type OverallRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentRank   int32         `protobuf:"varint,1,opt,name=student_rank,json=studentRank,proto3" json:"student_rank,omitempty"`
	TotalStudents int32         `protobuf:"varint,2,opt,name=total_students,json=totalStudents,proto3" json:"total_students,omitempty"`
	RankChange    int32         `protobuf:"varint,3,opt,name=rank_change,json=rankChange,proto3" json:"rank_change,omitempty"` // Positive for improvement, negative for decline
	TopStudents   []*TopStudent `protobuf:"bytes,4,rep,name=top_students,json=topStudents,proto3" json:"top_students,omitempty"`
	StudentInfo   *StudentInfo  `protobuf:"bytes,5,opt,name=student_info,json=studentInfo,proto3" json:"student_info,omitempty"`
}

func (x *OverallRankingResponse) Reset() {
	*x = OverallRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverallRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverallRankingResponse) ProtoMessage() {}

func (x *OverallRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverallRankingResponse.ProtoReflect.Descriptor instead.
func (*OverallRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{45}
}

func (x *OverallRankingResponse) GetStudentRank() int32 {
	if x != nil {
		return x.StudentRank
	}
	return 0
}

func (x *OverallRankingResponse) GetTotalStudents() int32 {
	if x != nil {
		return x.TotalStudents
	}
	return 0
}

func (x *OverallRankingResponse) GetRankChange() int32 {
	if x != nil {
		return x.RankChange
	}
	return 0
}

func (x *OverallRankingResponse) GetTopStudents() []*TopStudent {
	if x != nil {
		return x.TopStudents
	}
	return nil
}

func (x *OverallRankingResponse) GetStudentInfo() *StudentInfo {
	if x != nil {
		return x.StudentInfo
	}
	return nil
}

type TopStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank        int32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TotalPoints float64 `protobuf:"fixed64,3,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	RankChange  int32   `protobuf:"varint,4,opt,name=rank_change,json=rankChange,proto3" json:"rank_change,omitempty"`
}

func (x *TopStudent) Reset() {
	*x = TopStudent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopStudent) ProtoMessage() {}

func (x *TopStudent) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopStudent.ProtoReflect.Descriptor instead.
func (*TopStudent) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{46}
}

func (x *TopStudent) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TopStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopStudent) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *TopStudent) GetRankChange() int32 {
	if x != nil {
		return x.RankChange
	}
	return 0
}

type StudentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalPoints float64 `protobuf:"fixed64,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
}

func (x *StudentInfo) Reset() {
	*x = StudentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentInfo) ProtoMessage() {}

func (x *StudentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentInfo.ProtoReflect.Descriptor instead.
func (*StudentInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{47}
}

func (x *StudentInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StudentInfo) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

type PerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Token     string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PerformanceRequest) Reset() {
	*x = PerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceRequest) ProtoMessage() {}

func (x *PerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceRequest.ProtoReflect.Descriptor instead.
func (*PerformanceRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{48}
}

func (x *PerformanceRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PerformanceRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *PerformanceRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *PerformanceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformanceData []*PerformanceData `protobuf:"bytes,1,rep,name=performance_data,json=performanceData,proto3" json:"performance_data,omitempty"`
}

func (x *PerformanceResponse) Reset() {
	*x = PerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceResponse) ProtoMessage() {}

func (x *PerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceResponse.ProtoReflect.Descriptor instead.
func (*PerformanceResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{49}
}

func (x *PerformanceResponse) GetPerformanceData() []*PerformanceData {
	if x != nil {
		return x.PerformanceData
	}
	return nil
}

type PerformanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentDate       string  `protobuf:"bytes,1,opt,name=tournament_date,json=tournamentDate,proto3" json:"tournament_date,omitempty"`
	StudentTotalPoints   float64 `protobuf:"fixed64,2,opt,name=student_total_points,json=studentTotalPoints,proto3" json:"student_total_points,omitempty"`
	StudentAveragePoints float64 `protobuf:"fixed64,3,opt,name=student_average_points,json=studentAveragePoints,proto3" json:"student_average_points,omitempty"`
	TournamentRank       int32   `protobuf:"varint,6,opt,name=tournament_rank,json=tournamentRank,proto3" json:"tournament_rank,omitempty"`
}

func (x *PerformanceData) Reset() {
	*x = PerformanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceData) ProtoMessage() {}

func (x *PerformanceData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceData.ProtoReflect.Descriptor instead.
func (*PerformanceData) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{50}
}

func (x *PerformanceData) GetTournamentDate() string {
	if x != nil {
		return x.TournamentDate
	}
	return ""
}

func (x *PerformanceData) GetStudentTotalPoints() float64 {
	if x != nil {
		return x.StudentTotalPoints
	}
	return 0
}

func (x *PerformanceData) GetStudentAveragePoints() float64 {
	if x != nil {
		return x.StudentAveragePoints
	}
	return 0
}

func (x *PerformanceData) GetTournamentRank() int32 {
	if x != nil {
		return x.TournamentRank
	}
	return 0
}

type TournamentRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Page         int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *TournamentRankingRequest) Reset() {
	*x = TournamentRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentRankingRequest) ProtoMessage() {}

func (x *TournamentRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentRankingRequest.ProtoReflect.Descriptor instead.
func (*TournamentRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{51}
}

func (x *TournamentRankingRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TournamentRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TournamentRankingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TournamentRankingRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TournamentRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankings []*StudentRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
}

func (x *TournamentRankingResponse) Reset() {
	*x = TournamentRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentRankingResponse) ProtoMessage() {}

func (x *TournamentRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentRankingResponse.ProtoReflect.Descriptor instead.
func (*TournamentRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{52}
}

func (x *TournamentRankingResponse) GetRankings() []*StudentRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

type StudentRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId   int32   `protobuf:"varint,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName string  `protobuf:"bytes,2,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	SchoolName  string  `protobuf:"bytes,3,opt,name=school_name,json=schoolName,proto3" json:"school_name,omitempty"`
	TotalWins   int32   `protobuf:"varint,4,opt,name=total_wins,json=totalWins,proto3" json:"total_wins,omitempty"`
	TotalPoints float64 `protobuf:"fixed64,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	AverageRank float64 `protobuf:"fixed64,6,opt,name=average_rank,json=averageRank,proto3" json:"average_rank,omitempty"`
}

func (x *StudentRanking) Reset() {
	*x = StudentRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentRanking) ProtoMessage() {}

func (x *StudentRanking) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentRanking.ProtoReflect.Descriptor instead.
func (*StudentRanking) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{53}
}

func (x *StudentRanking) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *StudentRanking) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *StudentRanking) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *StudentRanking) GetTotalWins() int32 {
	if x != nil {
		return x.TotalWins
	}
	return 0
}

func (x *StudentRanking) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *StudentRanking) GetAverageRank() float64 {
	if x != nil {
		return x.AverageRank
	}
	return 0
}

type TournamentTeamsRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Page         int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *TournamentTeamsRankingRequest) Reset() {
	*x = TournamentTeamsRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTeamsRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTeamsRankingRequest) ProtoMessage() {}

func (x *TournamentTeamsRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTeamsRankingRequest.ProtoReflect.Descriptor instead.
func (*TournamentTeamsRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{54}
}

func (x *TournamentTeamsRankingRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TournamentTeamsRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TournamentTeamsRankingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TournamentTeamsRankingRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TournamentTeamsRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankings   []*TeamRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	TotalCount int32          `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *TournamentTeamsRankingResponse) Reset() {
	*x = TournamentTeamsRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTeamsRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTeamsRankingResponse) ProtoMessage() {}

func (x *TournamentTeamsRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTeamsRankingResponse.ProtoReflect.Descriptor instead.
func (*TournamentTeamsRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{55}
}

func (x *TournamentTeamsRankingResponse) GetRankings() []*TeamRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *TournamentTeamsRankingResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type TeamRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      int32    `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TeamName    string   `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	SchoolNames []string `protobuf:"bytes,3,rep,name=school_names,json=schoolNames,proto3" json:"school_names,omitempty"`
	Wins        int32    `protobuf:"varint,4,opt,name=wins,proto3" json:"wins,omitempty"`
	TotalPoints float64  `protobuf:"fixed64,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	AverageRank float64  `protobuf:"fixed64,6,opt,name=average_rank,json=averageRank,proto3" json:"average_rank,omitempty"`
}

func (x *TeamRanking) Reset() {
	*x = TeamRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRanking) ProtoMessage() {}

func (x *TeamRanking) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRanking.ProtoReflect.Descriptor instead.
func (*TeamRanking) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{56}
}

func (x *TeamRanking) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamRanking) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamRanking) GetSchoolNames() []string {
	if x != nil {
		return x.SchoolNames
	}
	return nil
}

func (x *TeamRanking) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *TeamRanking) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *TeamRanking) GetAverageRank() float64 {
	if x != nil {
		return x.AverageRank
	}
	return 0
}

type TournamentSchoolRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Page         int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *TournamentSchoolRankingRequest) Reset() {
	*x = TournamentSchoolRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentSchoolRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentSchoolRankingRequest) ProtoMessage() {}

func (x *TournamentSchoolRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentSchoolRankingRequest.ProtoReflect.Descriptor instead.
func (*TournamentSchoolRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{57}
}

func (x *TournamentSchoolRankingRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TournamentSchoolRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TournamentSchoolRankingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TournamentSchoolRankingRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TournamentSchoolRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankings   []*SchoolRanking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	TotalCount int32            `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *TournamentSchoolRankingResponse) Reset() {
	*x = TournamentSchoolRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentSchoolRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentSchoolRankingResponse) ProtoMessage() {}

func (x *TournamentSchoolRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentSchoolRankingResponse.ProtoReflect.Descriptor instead.
func (*TournamentSchoolRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{58}
}

func (x *TournamentSchoolRankingResponse) GetRankings() []*SchoolRanking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *TournamentSchoolRankingResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type SchoolRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolName  string  `protobuf:"bytes,1,opt,name=school_name,json=schoolName,proto3" json:"school_name,omitempty"`
	TeamCount   int32   `protobuf:"varint,2,opt,name=team_count,json=teamCount,proto3" json:"team_count,omitempty"`
	TotalWins   int32   `protobuf:"varint,3,opt,name=total_wins,json=totalWins,proto3" json:"total_wins,omitempty"`
	AverageRank float64 `protobuf:"fixed64,4,opt,name=average_rank,json=averageRank,proto3" json:"average_rank,omitempty"`
	TotalPoints float64 `protobuf:"fixed64,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
}

func (x *SchoolRanking) Reset() {
	*x = SchoolRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRanking) ProtoMessage() {}

func (x *SchoolRanking) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRanking.ProtoReflect.Descriptor instead.
func (*SchoolRanking) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{59}
}

func (x *SchoolRanking) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *SchoolRanking) GetTeamCount() int32 {
	if x != nil {
		return x.TeamCount
	}
	return 0
}

func (x *SchoolRanking) GetTotalWins() int32 {
	if x != nil {
		return x.TotalWins
	}
	return 0
}

func (x *SchoolRanking) GetAverageRank() float64 {
	if x != nil {
		return x.AverageRank
	}
	return 0
}

func (x *SchoolRanking) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

type OverallSchoolRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *OverallSchoolRankingRequest) Reset() {
	*x = OverallSchoolRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverallSchoolRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverallSchoolRankingRequest) ProtoMessage() {}

func (x *OverallSchoolRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverallSchoolRankingRequest.ProtoReflect.Descriptor instead.
func (*OverallSchoolRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{60}
}

func (x *OverallSchoolRankingRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OverallSchoolRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type OverallSchoolRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolRank   int32        `protobuf:"varint,1,opt,name=school_rank,json=schoolRank,proto3" json:"school_rank,omitempty"`
	TotalSchools int32        `protobuf:"varint,2,opt,name=total_schools,json=totalSchools,proto3" json:"total_schools,omitempty"`
	RankChange   int32        `protobuf:"varint,3,opt,name=rank_change,json=rankChange,proto3" json:"rank_change,omitempty"`
	TopSchools   []*TopSchool `protobuf:"bytes,4,rep,name=top_schools,json=topSchools,proto3" json:"top_schools,omitempty"`
	SchoolInfo   *SchoolInfo  `protobuf:"bytes,5,opt,name=school_info,json=schoolInfo,proto3" json:"school_info,omitempty"`
}

func (x *OverallSchoolRankingResponse) Reset() {
	*x = OverallSchoolRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverallSchoolRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverallSchoolRankingResponse) ProtoMessage() {}

func (x *OverallSchoolRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverallSchoolRankingResponse.ProtoReflect.Descriptor instead.
func (*OverallSchoolRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{61}
}

func (x *OverallSchoolRankingResponse) GetSchoolRank() int32 {
	if x != nil {
		return x.SchoolRank
	}
	return 0
}

func (x *OverallSchoolRankingResponse) GetTotalSchools() int32 {
	if x != nil {
		return x.TotalSchools
	}
	return 0
}

func (x *OverallSchoolRankingResponse) GetRankChange() int32 {
	if x != nil {
		return x.RankChange
	}
	return 0
}

func (x *OverallSchoolRankingResponse) GetTopSchools() []*TopSchool {
	if x != nil {
		return x.TopSchools
	}
	return nil
}

func (x *OverallSchoolRankingResponse) GetSchoolInfo() *SchoolInfo {
	if x != nil {
		return x.SchoolInfo
	}
	return nil
}

type TopSchool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank        int32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TotalPoints float64 `protobuf:"fixed64,3,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	RankChange  int32   `protobuf:"varint,4,opt,name=rank_change,json=rankChange,proto3" json:"rank_change,omitempty"`
}

func (x *TopSchool) Reset() {
	*x = TopSchool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopSchool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopSchool) ProtoMessage() {}

func (x *TopSchool) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopSchool.ProtoReflect.Descriptor instead.
func (*TopSchool) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{62}
}

func (x *TopSchool) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TopSchool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopSchool) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *TopSchool) GetRankChange() int32 {
	if x != nil {
		return x.RankChange
	}
	return 0
}

type SchoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalPoints float64 `protobuf:"fixed64,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
}

func (x *SchoolInfo) Reset() {
	*x = SchoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolInfo) ProtoMessage() {}

func (x *SchoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolInfo.ProtoReflect.Descriptor instead.
func (*SchoolInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{63}
}

func (x *SchoolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchoolInfo) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

type SchoolPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Token     string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SchoolPerformanceRequest) Reset() {
	*x = SchoolPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolPerformanceRequest) ProtoMessage() {}

func (x *SchoolPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolPerformanceRequest.ProtoReflect.Descriptor instead.
func (*SchoolPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{64}
}

func (x *SchoolPerformanceRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SchoolPerformanceRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SchoolPerformanceRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SchoolPerformanceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SchoolPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformanceData []*SchoolPerformanceData `protobuf:"bytes,1,rep,name=performance_data,json=performanceData,proto3" json:"performance_data,omitempty"`
}

func (x *SchoolPerformanceResponse) Reset() {
	*x = SchoolPerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolPerformanceResponse) ProtoMessage() {}

func (x *SchoolPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolPerformanceResponse.ProtoReflect.Descriptor instead.
func (*SchoolPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{65}
}

func (x *SchoolPerformanceResponse) GetPerformanceData() []*SchoolPerformanceData {
	if x != nil {
		return x.PerformanceData
	}
	return nil
}

type SchoolPerformanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentDate      string  `protobuf:"bytes,1,opt,name=tournament_date,json=tournamentDate,proto3" json:"tournament_date,omitempty"`
	SchoolTotalPoints   float64 `protobuf:"fixed64,2,opt,name=school_total_points,json=schoolTotalPoints,proto3" json:"school_total_points,omitempty"`
	SchoolAveragePoints float64 `protobuf:"fixed64,3,opt,name=school_average_points,json=schoolAveragePoints,proto3" json:"school_average_points,omitempty"`
	TournamentRank      int32   `protobuf:"varint,4,opt,name=tournament_rank,json=tournamentRank,proto3" json:"tournament_rank,omitempty"`
}

func (x *SchoolPerformanceData) Reset() {
	*x = SchoolPerformanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolPerformanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolPerformanceData) ProtoMessage() {}

func (x *SchoolPerformanceData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolPerformanceData.ProtoReflect.Descriptor instead.
func (*SchoolPerformanceData) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{66}
}

func (x *SchoolPerformanceData) GetTournamentDate() string {
	if x != nil {
		return x.TournamentDate
	}
	return ""
}

func (x *SchoolPerformanceData) GetSchoolTotalPoints() float64 {
	if x != nil {
		return x.SchoolTotalPoints
	}
	return 0
}

func (x *SchoolPerformanceData) GetSchoolAveragePoints() float64 {
	if x != nil {
		return x.SchoolAveragePoints
	}
	return 0
}

func (x *SchoolPerformanceData) GetTournamentRank() int32 {
	if x != nil {
		return x.TournamentRank
	}
	return 0
}

type StudentTournamentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId int32  `protobuf:"varint,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *StudentTournamentStatsRequest) Reset() {
	*x = StudentTournamentStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentTournamentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentTournamentStatsRequest) ProtoMessage() {}

func (x *StudentTournamentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentTournamentStatsRequest.ProtoReflect.Descriptor instead.
func (*StudentTournamentStatsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{67}
}

func (x *StudentTournamentStatsRequest) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *StudentTournamentStatsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type StudentTournamentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTournaments          int32  `protobuf:"varint,1,opt,name=total_tournaments,json=totalTournaments,proto3" json:"total_tournaments,omitempty"`
	TotalTournamentsChange    string `protobuf:"bytes,2,opt,name=total_tournaments_change,json=totalTournamentsChange,proto3" json:"total_tournaments_change,omitempty"`
	AttendedTournaments       int32  `protobuf:"varint,3,opt,name=attended_tournaments,json=attendedTournaments,proto3" json:"attended_tournaments,omitempty"`
	AttendedTournamentsChange string `protobuf:"bytes,4,opt,name=attended_tournaments_change,json=attendedTournamentsChange,proto3" json:"attended_tournaments_change,omitempty"`
	UpcomingTournaments       int32  `protobuf:"varint,5,opt,name=upcoming_tournaments,json=upcomingTournaments,proto3" json:"upcoming_tournaments,omitempty"`
	UpcomingTournamentsChange string `protobuf:"bytes,6,opt,name=upcoming_tournaments_change,json=upcomingTournamentsChange,proto3" json:"upcoming_tournaments_change,omitempty"`
}

func (x *StudentTournamentStatsResponse) Reset() {
	*x = StudentTournamentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentTournamentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentTournamentStatsResponse) ProtoMessage() {}

func (x *StudentTournamentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentTournamentStatsResponse.ProtoReflect.Descriptor instead.
func (*StudentTournamentStatsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{68}
}

func (x *StudentTournamentStatsResponse) GetTotalTournaments() int32 {
	if x != nil {
		return x.TotalTournaments
	}
	return 0
}

func (x *StudentTournamentStatsResponse) GetTotalTournamentsChange() string {
	if x != nil {
		return x.TotalTournamentsChange
	}
	return ""
}

func (x *StudentTournamentStatsResponse) GetAttendedTournaments() int32 {
	if x != nil {
		return x.AttendedTournaments
	}
	return 0
}

func (x *StudentTournamentStatsResponse) GetAttendedTournamentsChange() string {
	if x != nil {
		return x.AttendedTournamentsChange
	}
	return ""
}

func (x *StudentTournamentStatsResponse) GetUpcomingTournaments() int32 {
	if x != nil {
		return x.UpcomingTournaments
	}
	return 0
}

func (x *StudentTournamentStatsResponse) GetUpcomingTournamentsChange() string {
	if x != nil {
		return x.UpcomingTournamentsChange
	}
	return ""
}

type VolunteerTournamentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *VolunteerTournamentStatsRequest) Reset() {
	*x = VolunteerTournamentStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolunteerTournamentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolunteerTournamentStatsRequest) ProtoMessage() {}

func (x *VolunteerTournamentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolunteerTournamentStatsRequest.ProtoReflect.Descriptor instead.
func (*VolunteerTournamentStatsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{69}
}

func (x *VolunteerTournamentStatsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type VolunteerTournamentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoundsJudged         int32  `protobuf:"varint,1,opt,name=total_rounds_judged,json=totalRoundsJudged,proto3" json:"total_rounds_judged,omitempty"`
	RoundsJudgedChange        string `protobuf:"bytes,2,opt,name=rounds_judged_change,json=roundsJudgedChange,proto3" json:"rounds_judged_change,omitempty"`
	TournamentsAttended       int32  `protobuf:"varint,3,opt,name=tournaments_attended,json=tournamentsAttended,proto3" json:"tournaments_attended,omitempty"`
	TournamentsAttendedChange string `protobuf:"bytes,4,opt,name=tournaments_attended_change,json=tournamentsAttendedChange,proto3" json:"tournaments_attended_change,omitempty"`
	UpcomingTournaments       int32  `protobuf:"varint,5,opt,name=upcoming_tournaments,json=upcomingTournaments,proto3" json:"upcoming_tournaments,omitempty"`
	UpcomingTournamentsChange string `protobuf:"bytes,6,opt,name=upcoming_tournaments_change,json=upcomingTournamentsChange,proto3" json:"upcoming_tournaments_change,omitempty"`
}

func (x *VolunteerTournamentStatsResponse) Reset() {
	*x = VolunteerTournamentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolunteerTournamentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolunteerTournamentStatsResponse) ProtoMessage() {}

func (x *VolunteerTournamentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolunteerTournamentStatsResponse.ProtoReflect.Descriptor instead.
func (*VolunteerTournamentStatsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{70}
}

func (x *VolunteerTournamentStatsResponse) GetTotalRoundsJudged() int32 {
	if x != nil {
		return x.TotalRoundsJudged
	}
	return 0
}

func (x *VolunteerTournamentStatsResponse) GetRoundsJudgedChange() string {
	if x != nil {
		return x.RoundsJudgedChange
	}
	return ""
}

func (x *VolunteerTournamentStatsResponse) GetTournamentsAttended() int32 {
	if x != nil {
		return x.TournamentsAttended
	}
	return 0
}

func (x *VolunteerTournamentStatsResponse) GetTournamentsAttendedChange() string {
	if x != nil {
		return x.TournamentsAttendedChange
	}
	return ""
}

func (x *VolunteerTournamentStatsResponse) GetUpcomingTournaments() int32 {
	if x != nil {
		return x.UpcomingTournaments
	}
	return 0
}

func (x *VolunteerTournamentStatsResponse) GetUpcomingTournamentsChange() string {
	if x != nil {
		return x.UpcomingTournamentsChange
	}
	return ""
}

type GetStudentFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Page         int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetStudentFeedbackRequest) Reset() {
	*x = GetStudentFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudentFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentFeedbackRequest) ProtoMessage() {}

func (x *GetStudentFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentFeedbackRequest.ProtoReflect.Descriptor instead.
func (*GetStudentFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{71}
}

func (x *GetStudentFeedbackRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetStudentFeedbackRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetStudentFeedbackRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetStudentFeedbackRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type StudentFeedbackEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber        int32        `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsEliminationRound bool         `protobuf:"varint,2,opt,name=is_elimination_round,json=isEliminationRound,proto3" json:"is_elimination_round,omitempty"`
	SpeakerPoints      float64      `protobuf:"fixed64,3,opt,name=speaker_points,json=speakerPoints,proto3" json:"speaker_points,omitempty"`
	Feedback           string       `protobuf:"bytes,4,opt,name=feedback,proto3" json:"feedback,omitempty"`
	IsRead             bool         `protobuf:"varint,5,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	HeadJudgeName      string       `protobuf:"bytes,6,opt,name=head_judge_name,json=headJudgeName,proto3" json:"head_judge_name,omitempty"`
	RoomName           string       `protobuf:"bytes,7,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	OpponentTeamName   string       `protobuf:"bytes,8,opt,name=opponent_team_name,json=opponentTeamName,proto3" json:"opponent_team_name,omitempty"`
	StudentTeamName    string       `protobuf:"bytes,9,opt,name=student_team_name,json=studentTeamName,proto3" json:"student_team_name,omitempty"`
	DebateId           int32        `protobuf:"varint,10,opt,name=debate_id,json=debateId,proto3" json:"debate_id,omitempty"`
	Judges             []*JudgeInfo `protobuf:"bytes,11,rep,name=judges,proto3" json:"judges,omitempty"`
	BallotId           int32        `protobuf:"varint,12,opt,name=ballot_id,json=ballotId,proto3" json:"ballot_id,omitempty"`
}

func (x *StudentFeedbackEntry) Reset() {
	*x = StudentFeedbackEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentFeedbackEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentFeedbackEntry) ProtoMessage() {}

func (x *StudentFeedbackEntry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentFeedbackEntry.ProtoReflect.Descriptor instead.
func (*StudentFeedbackEntry) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{72}
}

func (x *StudentFeedbackEntry) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *StudentFeedbackEntry) GetIsEliminationRound() bool {
	if x != nil {
		return x.IsEliminationRound
	}
	return false
}

func (x *StudentFeedbackEntry) GetSpeakerPoints() float64 {
	if x != nil {
		return x.SpeakerPoints
	}
	return 0
}

func (x *StudentFeedbackEntry) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *StudentFeedbackEntry) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *StudentFeedbackEntry) GetHeadJudgeName() string {
	if x != nil {
		return x.HeadJudgeName
	}
	return ""
}

func (x *StudentFeedbackEntry) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *StudentFeedbackEntry) GetOpponentTeamName() string {
	if x != nil {
		return x.OpponentTeamName
	}
	return ""
}

func (x *StudentFeedbackEntry) GetStudentTeamName() string {
	if x != nil {
		return x.StudentTeamName
	}
	return ""
}

func (x *StudentFeedbackEntry) GetDebateId() int32 {
	if x != nil {
		return x.DebateId
	}
	return 0
}

func (x *StudentFeedbackEntry) GetJudges() []*JudgeInfo {
	if x != nil {
		return x.Judges
	}
	return nil
}

func (x *StudentFeedbackEntry) GetBallotId() int32 {
	if x != nil {
		return x.BallotId
	}
	return 0
}

type JudgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId     int32  `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	JudgeName   string `protobuf:"bytes,2,opt,name=judge_name,json=judgeName,proto3" json:"judge_name,omitempty"`
	IsHeadJudge bool   `protobuf:"varint,3,opt,name=is_head_judge,json=isHeadJudge,proto3" json:"is_head_judge,omitempty"`
}

func (x *JudgeInfo) Reset() {
	*x = JudgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeInfo) ProtoMessage() {}

func (x *JudgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeInfo.ProtoReflect.Descriptor instead.
func (*JudgeInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{73}
}

func (x *JudgeInfo) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *JudgeInfo) GetJudgeName() string {
	if x != nil {
		return x.JudgeName
	}
	return ""
}

func (x *JudgeInfo) GetIsHeadJudge() bool {
	if x != nil {
		return x.IsHeadJudge
	}
	return false
}

type GetStudentFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackEntries []*StudentFeedbackEntry `protobuf:"bytes,1,rep,name=feedback_entries,json=feedbackEntries,proto3" json:"feedback_entries,omitempty"`
	TotalCount      int32                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GetStudentFeedbackResponse) Reset() {
	*x = GetStudentFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudentFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentFeedbackResponse) ProtoMessage() {}

func (x *GetStudentFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentFeedbackResponse.ProtoReflect.Descriptor instead.
func (*GetStudentFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{74}
}

func (x *GetStudentFeedbackResponse) GetFeedbackEntries() []*StudentFeedbackEntry {
	if x != nil {
		return x.FeedbackEntries
	}
	return nil
}

func (x *GetStudentFeedbackResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type SubmitJudgeFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId                int32   `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	DebateId               int32   `protobuf:"varint,2,opt,name=debate_id,json=debateId,proto3" json:"debate_id,omitempty"`
	ClarityRating          float64 `protobuf:"fixed64,3,opt,name=clarity_rating,json=clarityRating,proto3" json:"clarity_rating,omitempty"`
	ConstructivenessRating float64 `protobuf:"fixed64,4,opt,name=constructiveness_rating,json=constructivenessRating,proto3" json:"constructiveness_rating,omitempty"`
	TimelinessRating       float64 `protobuf:"fixed64,5,opt,name=timeliness_rating,json=timelinessRating,proto3" json:"timeliness_rating,omitempty"`
	FairnessRating         float64 `protobuf:"fixed64,6,opt,name=fairness_rating,json=fairnessRating,proto3" json:"fairness_rating,omitempty"`
	EngagementRating       float64 `protobuf:"fixed64,7,opt,name=engagement_rating,json=engagementRating,proto3" json:"engagement_rating,omitempty"`
	TextFeedback           string  `protobuf:"bytes,8,opt,name=text_feedback,json=textFeedback,proto3" json:"text_feedback,omitempty"`
	Token                  string  `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SubmitJudgeFeedbackRequest) Reset() {
	*x = SubmitJudgeFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJudgeFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJudgeFeedbackRequest) ProtoMessage() {}

func (x *SubmitJudgeFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJudgeFeedbackRequest.ProtoReflect.Descriptor instead.
func (*SubmitJudgeFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{75}
}

func (x *SubmitJudgeFeedbackRequest) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetDebateId() int32 {
	if x != nil {
		return x.DebateId
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetClarityRating() float64 {
	if x != nil {
		return x.ClarityRating
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetConstructivenessRating() float64 {
	if x != nil {
		return x.ConstructivenessRating
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetTimelinessRating() float64 {
	if x != nil {
		return x.TimelinessRating
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetFairnessRating() float64 {
	if x != nil {
		return x.FairnessRating
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetEngagementRating() float64 {
	if x != nil {
		return x.EngagementRating
	}
	return 0
}

func (x *SubmitJudgeFeedbackRequest) GetTextFeedback() string {
	if x != nil {
		return x.TextFeedback
	}
	return ""
}

func (x *SubmitJudgeFeedbackRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SubmitJudgeFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitJudgeFeedbackResponse) Reset() {
	*x = SubmitJudgeFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJudgeFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJudgeFeedbackResponse) ProtoMessage() {}

func (x *SubmitJudgeFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJudgeFeedbackResponse.ProtoReflect.Descriptor instead.
func (*SubmitJudgeFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{76}
}

func (x *SubmitJudgeFeedbackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitJudgeFeedbackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetJudgeFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetJudgeFeedbackRequest) Reset() {
	*x = GetJudgeFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgeFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgeFeedbackRequest) ProtoMessage() {}

func (x *GetJudgeFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgeFeedbackRequest.ProtoReflect.Descriptor instead.
func (*GetJudgeFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{77}
}

func (x *GetJudgeFeedbackRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetJudgeFeedbackRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetJudgeFeedbackRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type JudgeFeedbackEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentAlias           string  `protobuf:"bytes,1,opt,name=student_alias,json=studentAlias,proto3" json:"student_alias,omitempty"`
	TournamentDate         string  `protobuf:"bytes,2,opt,name=tournament_date,json=tournamentDate,proto3" json:"tournament_date,omitempty"`
	IsRead                 bool    `protobuf:"varint,3,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	ClarityRating          float64 `protobuf:"fixed64,4,opt,name=clarity_rating,json=clarityRating,proto3" json:"clarity_rating,omitempty"`
	ConstructivenessRating float64 `protobuf:"fixed64,5,opt,name=constructiveness_rating,json=constructivenessRating,proto3" json:"constructiveness_rating,omitempty"`
	TimelinessRating       float64 `protobuf:"fixed64,6,opt,name=timeliness_rating,json=timelinessRating,proto3" json:"timeliness_rating,omitempty"`
	FairnessRating         float64 `protobuf:"fixed64,7,opt,name=fairness_rating,json=fairnessRating,proto3" json:"fairness_rating,omitempty"`
	EngagementRating       float64 `protobuf:"fixed64,8,opt,name=engagement_rating,json=engagementRating,proto3" json:"engagement_rating,omitempty"`
	TextFeedback           string  `protobuf:"bytes,9,opt,name=text_feedback,json=textFeedback,proto3" json:"text_feedback,omitempty"`
	RoundNumber            int32   `protobuf:"varint,10,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsEliminationRound     bool    `protobuf:"varint,11,opt,name=is_elimination_round,json=isEliminationRound,proto3" json:"is_elimination_round,omitempty"`
	FeedbackId             int32   `protobuf:"varint,12,opt,name=feedback_id,json=feedbackId,proto3" json:"feedback_id,omitempty"`
}

func (x *JudgeFeedbackEntry) Reset() {
	*x = JudgeFeedbackEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeFeedbackEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeFeedbackEntry) ProtoMessage() {}

func (x *JudgeFeedbackEntry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeFeedbackEntry.ProtoReflect.Descriptor instead.
func (*JudgeFeedbackEntry) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{78}
}

func (x *JudgeFeedbackEntry) GetStudentAlias() string {
	if x != nil {
		return x.StudentAlias
	}
	return ""
}

func (x *JudgeFeedbackEntry) GetTournamentDate() string {
	if x != nil {
		return x.TournamentDate
	}
	return ""
}

func (x *JudgeFeedbackEntry) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *JudgeFeedbackEntry) GetClarityRating() float64 {
	if x != nil {
		return x.ClarityRating
	}
	return 0
}

func (x *JudgeFeedbackEntry) GetConstructivenessRating() float64 {
	if x != nil {
		return x.ConstructivenessRating
	}
	return 0
}

func (x *JudgeFeedbackEntry) GetTimelinessRating() float64 {
	if x != nil {
		return x.TimelinessRating
	}
	return 0
}

func (x *JudgeFeedbackEntry) GetFairnessRating() float64 {
	if x != nil {
		return x.FairnessRating
	}
	return 0
}

func (x *JudgeFeedbackEntry) GetEngagementRating() float64 {
	if x != nil {
		return x.EngagementRating
	}
	return 0
}

func (x *JudgeFeedbackEntry) GetTextFeedback() string {
	if x != nil {
		return x.TextFeedback
	}
	return ""
}

func (x *JudgeFeedbackEntry) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *JudgeFeedbackEntry) GetIsEliminationRound() bool {
	if x != nil {
		return x.IsEliminationRound
	}
	return false
}

func (x *JudgeFeedbackEntry) GetFeedbackId() int32 {
	if x != nil {
		return x.FeedbackId
	}
	return 0
}

type GetJudgeFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackEntries []*JudgeFeedbackEntry `protobuf:"bytes,1,rep,name=feedback_entries,json=feedbackEntries,proto3" json:"feedback_entries,omitempty"`
	TotalCount      int32                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GetJudgeFeedbackResponse) Reset() {
	*x = GetJudgeFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgeFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgeFeedbackResponse) ProtoMessage() {}

func (x *GetJudgeFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgeFeedbackResponse.ProtoReflect.Descriptor instead.
func (*GetJudgeFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{79}
}

func (x *GetJudgeFeedbackResponse) GetFeedbackEntries() []*JudgeFeedbackEntry {
	if x != nil {
		return x.FeedbackEntries
	}
	return nil
}

func (x *GetJudgeFeedbackResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetVolunteerRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetVolunteerRankingRequest) Reset() {
	*x = GetVolunteerRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolunteerRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolunteerRankingRequest) ProtoMessage() {}

func (x *GetVolunteerRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolunteerRankingRequest.ProtoReflect.Descriptor instead.
func (*GetVolunteerRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{80}
}

func (x *GetVolunteerRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TopVolunteer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank          int32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AverageRating float64 `protobuf:"fixed64,3,opt,name=average_rating,json=averageRating,proto3" json:"average_rating,omitempty"`
	RankChange    int32   `protobuf:"varint,4,opt,name=rank_change,json=rankChange,proto3" json:"rank_change,omitempty"`
}

func (x *TopVolunteer) Reset() {
	*x = TopVolunteer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopVolunteer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopVolunteer) ProtoMessage() {}

func (x *TopVolunteer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopVolunteer.ProtoReflect.Descriptor instead.
func (*TopVolunteer) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{81}
}

func (x *TopVolunteer) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TopVolunteer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopVolunteer) GetAverageRating() float64 {
	if x != nil {
		return x.AverageRating
	}
	return 0
}

func (x *TopVolunteer) GetRankChange() int32 {
	if x != nil {
		return x.RankChange
	}
	return 0
}

type VolunteerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AverageRating float64 `protobuf:"fixed64,2,opt,name=average_rating,json=averageRating,proto3" json:"average_rating,omitempty"`
}

func (x *VolunteerInfo) Reset() {
	*x = VolunteerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolunteerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolunteerInfo) ProtoMessage() {}

func (x *VolunteerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolunteerInfo.ProtoReflect.Descriptor instead.
func (*VolunteerInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{82}
}

func (x *VolunteerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolunteerInfo) GetAverageRating() float64 {
	if x != nil {
		return x.AverageRating
	}
	return 0
}

type GetVolunteerRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolunteerRank   int32           `protobuf:"varint,1,opt,name=volunteer_rank,json=volunteerRank,proto3" json:"volunteer_rank,omitempty"`
	TotalVolunteers int32           `protobuf:"varint,2,opt,name=total_volunteers,json=totalVolunteers,proto3" json:"total_volunteers,omitempty"`
	RankChange      int32           `protobuf:"varint,3,opt,name=rank_change,json=rankChange,proto3" json:"rank_change,omitempty"`
	TopVolunteers   []*TopVolunteer `protobuf:"bytes,4,rep,name=top_volunteers,json=topVolunteers,proto3" json:"top_volunteers,omitempty"`
	VolunteerInfo   *VolunteerInfo  `protobuf:"bytes,5,opt,name=volunteer_info,json=volunteerInfo,proto3" json:"volunteer_info,omitempty"`
}

func (x *GetVolunteerRankingResponse) Reset() {
	*x = GetVolunteerRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolunteerRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolunteerRankingResponse) ProtoMessage() {}

func (x *GetVolunteerRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolunteerRankingResponse.ProtoReflect.Descriptor instead.
func (*GetVolunteerRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{83}
}

func (x *GetVolunteerRankingResponse) GetVolunteerRank() int32 {
	if x != nil {
		return x.VolunteerRank
	}
	return 0
}

func (x *GetVolunteerRankingResponse) GetTotalVolunteers() int32 {
	if x != nil {
		return x.TotalVolunteers
	}
	return 0
}

func (x *GetVolunteerRankingResponse) GetRankChange() int32 {
	if x != nil {
		return x.RankChange
	}
	return 0
}

func (x *GetVolunteerRankingResponse) GetTopVolunteers() []*TopVolunteer {
	if x != nil {
		return x.TopVolunteers
	}
	return nil
}

func (x *GetVolunteerRankingResponse) GetVolunteerInfo() *VolunteerInfo {
	if x != nil {
		return x.VolunteerInfo
	}
	return nil
}

type GetVolunteerPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetVolunteerPerformanceRequest) Reset() {
	*x = GetVolunteerPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolunteerPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolunteerPerformanceRequest) ProtoMessage() {}

func (x *GetVolunteerPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolunteerPerformanceRequest.ProtoReflect.Descriptor instead.
func (*GetVolunteerPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{84}
}

func (x *GetVolunteerPerformanceRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetVolunteerPerformanceRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetVolunteerPerformanceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type VolunteerPerformanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentDate         string  `protobuf:"bytes,1,opt,name=tournament_date,json=tournamentDate,proto3" json:"tournament_date,omitempty"`
	VolunteerAverageRating float64 `protobuf:"fixed64,2,opt,name=volunteer_average_rating,json=volunteerAverageRating,proto3" json:"volunteer_average_rating,omitempty"`
	OverallAverageRating   float64 `protobuf:"fixed64,3,opt,name=overall_average_rating,json=overallAverageRating,proto3" json:"overall_average_rating,omitempty"`
	TournamentRank         int32   `protobuf:"varint,4,opt,name=tournament_rank,json=tournamentRank,proto3" json:"tournament_rank,omitempty"`
}

func (x *VolunteerPerformanceData) Reset() {
	*x = VolunteerPerformanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolunteerPerformanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolunteerPerformanceData) ProtoMessage() {}

func (x *VolunteerPerformanceData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolunteerPerformanceData.ProtoReflect.Descriptor instead.
func (*VolunteerPerformanceData) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{85}
}

func (x *VolunteerPerformanceData) GetTournamentDate() string {
	if x != nil {
		return x.TournamentDate
	}
	return ""
}

func (x *VolunteerPerformanceData) GetVolunteerAverageRating() float64 {
	if x != nil {
		return x.VolunteerAverageRating
	}
	return 0
}

func (x *VolunteerPerformanceData) GetOverallAverageRating() float64 {
	if x != nil {
		return x.OverallAverageRating
	}
	return 0
}

func (x *VolunteerPerformanceData) GetTournamentRank() int32 {
	if x != nil {
		return x.TournamentRank
	}
	return 0
}

type GetVolunteerPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformanceData []*VolunteerPerformanceData `protobuf:"bytes,1,rep,name=performance_data,json=performanceData,proto3" json:"performance_data,omitempty"`
}

func (x *GetVolunteerPerformanceResponse) Reset() {
	*x = GetVolunteerPerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolunteerPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolunteerPerformanceResponse) ProtoMessage() {}

func (x *GetVolunteerPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolunteerPerformanceResponse.ProtoReflect.Descriptor instead.
func (*GetVolunteerPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{86}
}

func (x *GetVolunteerPerformanceResponse) GetPerformanceData() []*VolunteerPerformanceData {
	if x != nil {
		return x.PerformanceData
	}
	return nil
}

type MarkFeedbackAsReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackId int32  `protobuf:"varint,1,opt,name=feedback_id,json=feedbackId,proto3" json:"feedback_id,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MarkFeedbackAsReadRequest) Reset() {
	*x = MarkFeedbackAsReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkFeedbackAsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFeedbackAsReadRequest) ProtoMessage() {}

func (x *MarkFeedbackAsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFeedbackAsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkFeedbackAsReadRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{87}
}

func (x *MarkFeedbackAsReadRequest) GetFeedbackId() int32 {
	if x != nil {
		return x.FeedbackId
	}
	return 0
}

func (x *MarkFeedbackAsReadRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type MarkFeedbackAsReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MarkFeedbackAsReadResponse) Reset() {
	*x = MarkFeedbackAsReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkFeedbackAsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFeedbackAsReadResponse) ProtoMessage() {}

func (x *MarkFeedbackAsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFeedbackAsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkFeedbackAsReadResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{88}
}

func (x *MarkFeedbackAsReadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MarkFeedbackAsReadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TournamentVolunteerRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Page         int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *TournamentVolunteerRankingRequest) Reset() {
	*x = TournamentVolunteerRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentVolunteerRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentVolunteerRankingRequest) ProtoMessage() {}

func (x *TournamentVolunteerRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentVolunteerRankingRequest.ProtoReflect.Descriptor instead.
func (*TournamentVolunteerRankingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{89}
}

func (x *TournamentVolunteerRankingRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TournamentVolunteerRankingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TournamentVolunteerRankingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TournamentVolunteerRankingRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type VolunteerTournamentRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolunteerId       int32   `protobuf:"varint,1,opt,name=volunteer_id,json=volunteerId,proto3" json:"volunteer_id,omitempty"`
	VolunteerName     string  `protobuf:"bytes,2,opt,name=volunteer_name,json=volunteerName,proto3" json:"volunteer_name,omitempty"`
	AverageRating     float64 `protobuf:"fixed64,3,opt,name=average_rating,json=averageRating,proto3" json:"average_rating,omitempty"`
	PreliminaryRounds int32   `protobuf:"varint,4,opt,name=preliminary_rounds,json=preliminaryRounds,proto3" json:"preliminary_rounds,omitempty"`
	EliminationRounds int32   `protobuf:"varint,5,opt,name=elimination_rounds,json=eliminationRounds,proto3" json:"elimination_rounds,omitempty"`
	Rank              int32   `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *VolunteerTournamentRank) Reset() {
	*x = VolunteerTournamentRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolunteerTournamentRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolunteerTournamentRank) ProtoMessage() {}

func (x *VolunteerTournamentRank) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolunteerTournamentRank.ProtoReflect.Descriptor instead.
func (*VolunteerTournamentRank) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{90}
}

func (x *VolunteerTournamentRank) GetVolunteerId() int32 {
	if x != nil {
		return x.VolunteerId
	}
	return 0
}

func (x *VolunteerTournamentRank) GetVolunteerName() string {
	if x != nil {
		return x.VolunteerName
	}
	return ""
}

func (x *VolunteerTournamentRank) GetAverageRating() float64 {
	if x != nil {
		return x.AverageRating
	}
	return 0
}

func (x *VolunteerTournamentRank) GetPreliminaryRounds() int32 {
	if x != nil {
		return x.PreliminaryRounds
	}
	return 0
}

func (x *VolunteerTournamentRank) GetEliminationRounds() int32 {
	if x != nil {
		return x.EliminationRounds
	}
	return 0
}

func (x *VolunteerTournamentRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type TournamentVolunteerRankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankings   []*VolunteerTournamentRank `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	TotalCount int32                      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *TournamentVolunteerRankingResponse) Reset() {
	*x = TournamentVolunteerRankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentVolunteerRankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentVolunteerRankingResponse) ProtoMessage() {}

func (x *TournamentVolunteerRankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentVolunteerRankingResponse.ProtoReflect.Descriptor instead.
func (*TournamentVolunteerRankingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{91}
}

func (x *TournamentVolunteerRankingResponse) GetRankings() []*VolunteerTournamentRank {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *TournamentVolunteerRankingResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_internal_grpc_proto_debate_management_debate_proto protoreflect.FileDescriptor

var file_internal_grpc_proto_debate_management_debate_proto_rawDesc = []byte{
	0x0a, 0x32, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x3b, 0x0a,
	0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x64, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x22, 0xb7, 0x01, 0x0a, 0x05, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73,
	0x22, 0x64, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x65, 0x61,
	0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x1a, 0x55, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xca, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x56,
	0x0a, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x10, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd8, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x58, 0x0a, 0x0b, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x5b, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b,
	0x0a, 0x10, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x2d, 0x0a, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xd5, 0x01, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x65, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x50, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xfc, 0x03, 0x0a, 0x06, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x2d, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x68, 0x65, 0x61, 0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52,
	0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x71, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x42, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x42, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x5e, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x06,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x5f, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x18,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x42, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x46, 0x0a,
	0x15, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x74,
	0x6f, 0x70, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x78, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0b, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x7d, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x64, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5a, 0x0a, 0x19,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x7d, 0x0a, 0x1e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x1b,
	0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x02, 0x0a, 0x1c, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x77, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x0a, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x83, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x19, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x54, 0x0a, 0x1d, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xed, 0x02,
	0x0a, 0x1e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x70,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x1b, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x37, 0x0a,
	0x1f, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xea, 0x02, 0x0a, 0x20, 0x56, 0x6f, 0x6c, 0x75, 0x6e,
	0x74, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd6, 0x03,
	0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x09, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65,
	0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x1b, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xf9, 0x03, 0x0a, 0x12, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61,
	0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7e, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x4a, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xa1, 0x02, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6e, 0x74, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x56, 0x6f,
	0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x56, 0x6f, 0x6c, 0x75,
	0x6e, 0x74, 0x65, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x70, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x6f, 0x6c, 0x75, 0x6e,
	0x74, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x75, 0x6e,
	0x74, 0x65, 0x65, 0x72, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x19, 0x4d,
	0x61, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x50, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x41,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65,
	0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75,
	0x6e, 0x74, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0xda, 0x1e, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x12, 0x22, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x23,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x42, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x2c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x42, 0x79,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x42, 0x79, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x35, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x45, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6e,
	0x74, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e,
	0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a,
	0x19, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x52,
	0x61, 0x6e, 0x6b, 0x48, 0x75, 0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_grpc_proto_debate_management_debate_proto_rawDescOnce sync.Once
	file_internal_grpc_proto_debate_management_debate_proto_rawDescData = file_internal_grpc_proto_debate_management_debate_proto_rawDesc
)

func file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP() []byte {
	file_internal_grpc_proto_debate_management_debate_proto_rawDescOnce.Do(func() {
		file_internal_grpc_proto_debate_management_debate_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_grpc_proto_debate_management_debate_proto_rawDescData)
	})
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescData
}

var file_internal_grpc_proto_debate_management_debate_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_internal_grpc_proto_debate_management_debate_proto_goTypes = []any{
	(*Room)(nil),                               // 0: debate_management.Room
	(*RoundStatus)(nil),                        // 1: debate_management.RoundStatus
	(*RoomStatus)(nil),                         // 2: debate_management.RoomStatus
	(*GetRoomsRequest)(nil),                    // 3: debate_management.GetRoomsRequest
	(*GetRoomsResponse)(nil),                   // 4: debate_management.GetRoomsResponse
	(*GetRoomRequest)(nil),                     // 5: debate_management.GetRoomRequest
	(*GetRoomResponse)(nil),                    // 6: debate_management.GetRoomResponse
	(*UpdateRoomRequest)(nil),                  // 7: debate_management.UpdateRoomRequest
	(*UpdateRoomResponse)(nil),                 // 8: debate_management.UpdateRoomResponse
	(*Judge)(nil),                              // 9: debate_management.Judge
	(*GetJudgesRequest)(nil),                   // 10: debate_management.GetJudgesRequest
	(*GetJudgesResponse)(nil),                  // 11: debate_management.GetJudgesResponse
	(*RoomInfo)(nil),                           // 12: debate_management.RoomInfo
	(*RoundInfo)(nil),                          // 13: debate_management.RoundInfo
	(*GetJudgeRequest)(nil),                    // 14: debate_management.GetJudgeRequest
	(*GetJudgeResponse)(nil),                   // 15: debate_management.GetJudgeResponse
	(*UpdateJudgeRequest)(nil),                 // 16: debate_management.UpdateJudgeRequest
	(*UpdateJudgeResponse)(nil),                // 17: debate_management.UpdateJudgeResponse
	(*Pairing)(nil),                            // 18: debate_management.Pairing
	(*Team)(nil),                               // 19: debate_management.Team
	(*Speaker)(nil),                            // 20: debate_management.Speaker
	(*GetPairingsRequest)(nil),                 // 21: debate_management.GetPairingsRequest
	(*GetPairingsResponse)(nil),                // 22: debate_management.GetPairingsResponse
	(*UpdatePairingsRequest)(nil),              // 23: debate_management.UpdatePairingsRequest
	(*UpdatePairingsResponse)(nil),             // 24: debate_management.UpdatePairingsResponse
	(*Ballot)(nil),                             // 25: debate_management.Ballot
	(*GetBallotsRequest)(nil),                  // 26: debate_management.GetBallotsRequest
	(*GetBallotsResponse)(nil),                 // 27: debate_management.GetBallotsResponse
	(*GetBallotRequest)(nil),                   // 28: debate_management.GetBallotRequest
	(*GetBallotResponse)(nil),                  // 29: debate_management.GetBallotResponse
	(*GetBallotByJudgeIDRequest)(nil),          // 30: debate_management.GetBallotByJudgeIDRequest
	(*GetBallotByJudgeIDResponse)(nil),         // 31: debate_management.GetBallotByJudgeIDResponse
	(*UpdateBallotRequest)(nil),                // 32: debate_management.UpdateBallotRequest
	(*UpdateBallotResponse)(nil),               // 33: debate_management.UpdateBallotResponse
	(*GeneratePreliminaryPairingsRequest)(nil), // 34: debate_management.GeneratePreliminaryPairingsRequest
	(*GenerateEliminationPairingsRequest)(nil), // 35: debate_management.GenerateEliminationPairingsRequest
	(*GeneratePairingsResponse)(nil),           // 36: debate_management.GeneratePairingsResponse
	(*CreateTeamRequest)(nil),                  // 37: debate_management.CreateTeamRequest
	(*GetTeamRequest)(nil),                     // 38: debate_management.GetTeamRequest
	(*UpdateTeamRequest)(nil),                  // 39: debate_management.UpdateTeamRequest
	(*DeleteTeamRequest)(nil),                  // 40: debate_management.DeleteTeamRequest
	(*DeleteTeamResponse)(nil),                 // 41: debate_management.DeleteTeamResponse
	(*GetTeamsByTournamentRequest)(nil),        // 42: debate_management.GetTeamsByTournamentRequest
	(*GetTeamsByTournamentResponse)(nil),       // 43: debate_management.GetTeamsByTournamentResponse
	(*OverallRankingRequest)(nil),              // 44: debate_management.OverallRankingRequest
	(*OverallRankingResponse)(nil),             // 45: debate_management.OverallRankingResponse
	(*TopStudent)(nil),                         // 46: debate_management.TopStudent
	(*StudentInfo)(nil),                        // 47: debate_management.StudentInfo
	(*PerformanceRequest)(nil),                 // 48: debate_management.PerformanceRequest
	(*PerformanceResponse)(nil),                // 49: debate_management.PerformanceResponse
	(*PerformanceData)(nil),                    // 50: debate_management.PerformanceData
	(*TournamentRankingRequest)(nil),           // 51: debate_management.TournamentRankingRequest
	(*TournamentRankingResponse)(nil),          // 52: debate_management.TournamentRankingResponse
	(*StudentRanking)(nil),                     // 53: debate_management.StudentRanking
	(*TournamentTeamsRankingRequest)(nil),      // 54: debate_management.TournamentTeamsRankingRequest
	(*TournamentTeamsRankingResponse)(nil),     // 55: debate_management.TournamentTeamsRankingResponse
	(*TeamRanking)(nil),                        // 56: debate_management.TeamRanking
	(*TournamentSchoolRankingRequest)(nil),     // 57: debate_management.TournamentSchoolRankingRequest
	(*TournamentSchoolRankingResponse)(nil),    // 58: debate_management.TournamentSchoolRankingResponse
	(*SchoolRanking)(nil),                      // 59: debate_management.SchoolRanking
	(*OverallSchoolRankingRequest)(nil),        // 60: debate_management.OverallSchoolRankingRequest
	(*OverallSchoolRankingResponse)(nil),       // 61: debate_management.OverallSchoolRankingResponse
	(*TopSchool)(nil),                          // 62: debate_management.TopSchool
	(*SchoolInfo)(nil),                         // 63: debate_management.SchoolInfo
	(*SchoolPerformanceRequest)(nil),           // 64: debate_management.SchoolPerformanceRequest
	(*SchoolPerformanceResponse)(nil),          // 65: debate_management.SchoolPerformanceResponse
	(*SchoolPerformanceData)(nil),              // 66: debate_management.SchoolPerformanceData
	(*StudentTournamentStatsRequest)(nil),      // 67: debate_management.StudentTournamentStatsRequest
	(*StudentTournamentStatsResponse)(nil),     // 68: debate_management.StudentTournamentStatsResponse
	(*VolunteerTournamentStatsRequest)(nil),    // 69: debate_management.VolunteerTournamentStatsRequest
	(*VolunteerTournamentStatsResponse)(nil),   // 70: debate_management.VolunteerTournamentStatsResponse
	(*GetStudentFeedbackRequest)(nil),          // 71: debate_management.GetStudentFeedbackRequest
	(*StudentFeedbackEntry)(nil),               // 72: debate_management.StudentFeedbackEntry
	(*JudgeInfo)(nil),                          // 73: debate_management.JudgeInfo
	(*GetStudentFeedbackResponse)(nil),         // 74: debate_management.GetStudentFeedbackResponse
	(*SubmitJudgeFeedbackRequest)(nil),         // 75: debate_management.SubmitJudgeFeedbackRequest
	(*SubmitJudgeFeedbackResponse)(nil),        // 76: debate_management.SubmitJudgeFeedbackResponse
	(*GetJudgeFeedbackRequest)(nil),            // 77: debate_management.GetJudgeFeedbackRequest
	(*JudgeFeedbackEntry)(nil),                 // 78: debate_management.JudgeFeedbackEntry
	(*GetJudgeFeedbackResponse)(nil),           // 79: debate_management.GetJudgeFeedbackResponse
	(*GetVolunteerRankingRequest)(nil),         // 80: debate_management.GetVolunteerRankingRequest
	(*TopVolunteer)(nil),                       // 81: debate_management.TopVolunteer
	(*VolunteerInfo)(nil),                      // 82: debate_management.VolunteerInfo
	(*GetVolunteerRankingResponse)(nil),        // 83: debate_management.GetVolunteerRankingResponse
	(*GetVolunteerPerformanceRequest)(nil),     // 84: debate_management.GetVolunteerPerformanceRequest
	(*VolunteerPerformanceData)(nil),           // 85: debate_management.VolunteerPerformanceData
	(*GetVolunteerPerformanceResponse)(nil),    // 86: debate_management.GetVolunteerPerformanceResponse
	(*MarkFeedbackAsReadRequest)(nil),          // 87: debate_management.MarkFeedbackAsReadRequest
	(*MarkFeedbackAsReadResponse)(nil),         // 88: debate_management.MarkFeedbackAsReadResponse
	(*TournamentVolunteerRankingRequest)(nil),  // 89: debate_management.TournamentVolunteerRankingRequest
	(*VolunteerTournamentRank)(nil),            // 90: debate_management.VolunteerTournamentRank
	(*TournamentVolunteerRankingResponse)(nil), // 91: debate_management.TournamentVolunteerRankingResponse
	nil, // 92: debate_management.RoundInfo.RoomsEntry
	nil, // 93: debate_management.GetJudgeResponse.PreliminaryEntry
	nil, // 94: debate_management.GetJudgeResponse.EliminationEntry
	nil, // 95: debate_management.UpdateJudgeRequest.PreliminaryEntry
	nil, // 96: debate_management.UpdateJudgeRequest.EliminationEntry
}
var file_internal_grpc_proto_debate_management_debate_proto_depIdxs = []int32{
	2,  // 0: debate_management.GetRoomsResponse.rooms:type_name -> debate_management.RoomStatus
	1,  // 1: debate_management.GetRoomResponse.preliminary:type_name -> debate_management.RoundStatus
	1,  // 2: debate_management.GetRoomResponse.elimination:type_name -> debate_management.RoundStatus
	0,  // 3: debate_management.UpdateRoomRequest.room:type_name -> debate_management.Room
	0,  // 4: debate_management.UpdateRoomResponse.room:type_name -> debate_management.Room
	9,  // 5: debate_management.GetJudgesResponse.judges:type_name -> debate_management.Judge
	92, // 6: debate_management.RoundInfo.rooms:type_name -> debate_management.RoundInfo.RoomsEntry
	93, // 7: debate_management.GetJudgeResponse.preliminary:type_name -> debate_management.GetJudgeResponse.PreliminaryEntry
	94, // 8: debate_management.GetJudgeResponse.elimination:type_name -> debate_management.GetJudgeResponse.EliminationEntry
	95, // 9: debate_management.UpdateJudgeRequest.preliminary:type_name -> debate_management.UpdateJudgeRequest.PreliminaryEntry
	96, // 10: debate_management.UpdateJudgeRequest.elimination:type_name -> debate_management.UpdateJudgeRequest.EliminationEntry
	19, // 11: debate_management.Pairing.team1:type_name -> debate_management.Team
	19, // 12: debate_management.Pairing.team2:type_name -> debate_management.Team
	9,  // 13: debate_management.Pairing.judges:type_name -> debate_management.Judge
	20, // 14: debate_management.Team.speakers:type_name -> debate_management.Speaker
	18, // 15: debate_management.GetPairingsResponse.pairings:type_name -> debate_management.Pairing
	18, // 16: debate_management.UpdatePairingsRequest.pairings:type_name -> debate_management.Pairing
	18, // 17: debate_management.UpdatePairingsResponse.pairings:type_name -> debate_management.Pairing
	9,  // 18: debate_management.Ballot.judges:type_name -> debate_management.Judge
	19, // 19: debate_management.Ballot.team1:type_name -> debate_management.Team
	19, // 20: debate_management.Ballot.team2:type_name -> debate_management.Team
	25, // 21: debate_management.GetBallotsResponse.ballots:type_name -> debate_management.Ballot
	25, // 22: debate_management.GetBallotResponse.ballot:type_name -> debate_management.Ballot
	25, // 23: debate_management.GetBallotByJudgeIDResponse.ballot:type_name -> debate_management.Ballot
	25, // 24: debate_management.UpdateBallotRequest.ballot:type_name -> debate_management.Ballot
	25, // 25: debate_management.UpdateBallotResponse.ballot:type_name -> debate_management.Ballot
	18, // 26: debate_management.GeneratePairingsResponse.pairings:type_name -> debate_management.Pairing
	20, // 27: debate_management.CreateTeamRequest.speakers:type_name -> debate_management.Speaker
	19, // 28: debate_management.UpdateTeamRequest.team:type_name -> debate_management.Team
	19, // 29: debate_management.GetTeamsByTournamentResponse.teams:type_name -> debate_management.Team
	46, // 30: debate_management.OverallRankingResponse.top_students:type_name -> debate_management.TopStudent
	47, // 31: debate_management.OverallRankingResponse.student_info:type_name -> debate_management.StudentInfo
	50, // 32: debate_management.PerformanceResponse.performance_data:type_name -> debate_management.PerformanceData
	53, // 33: debate_management.TournamentRankingResponse.rankings:type_name -> debate_management.StudentRanking
	56, // 34: debate_management.TournamentTeamsRankingResponse.rankings:type_name -> debate_management.TeamRanking
	59, // 35: debate_management.TournamentSchoolRankingResponse.rankings:type_name -> debate_management.SchoolRanking
	62, // 36: debate_management.OverallSchoolRankingResponse.top_schools:type_name -> debate_management.TopSchool
	63, // 37: debate_management.OverallSchoolRankingResponse.school_info:type_name -> debate_management.SchoolInfo
	66, // 38: debate_management.SchoolPerformanceResponse.performance_data:type_name -> debate_management.SchoolPerformanceData
	73, // 39: debate_management.StudentFeedbackEntry.judges:type_name -> debate_management.JudgeInfo
	72, // 40: debate_management.GetStudentFeedbackResponse.feedback_entries:type_name -> debate_management.StudentFeedbackEntry
	78, // 41: debate_management.GetJudgeFeedbackResponse.feedback_entries:type_name -> debate_management.JudgeFeedbackEntry
	81, // 42: debate_management.GetVolunteerRankingResponse.top_volunteers:type_name -> debate_management.TopVolunteer
	82, // 43: debate_management.GetVolunteerRankingResponse.volunteer_info:type_name -> debate_management.VolunteerInfo
	85, // 44: debate_management.GetVolunteerPerformanceResponse.performance_data:type_name -> debate_management.VolunteerPerformanceData
	90, // 45: debate_management.TournamentVolunteerRankingResponse.rankings:type_name -> debate_management.VolunteerTournamentRank
	12, // 46: debate_management.RoundInfo.RoomsEntry.value:type_name -> debate_management.RoomInfo
	12, // 47: debate_management.GetJudgeResponse.PreliminaryEntry.value:type_name -> debate_management.RoomInfo
	12, // 48: debate_management.GetJudgeResponse.EliminationEntry.value:type_name -> debate_management.RoomInfo
	12, // 49: debate_management.UpdateJudgeRequest.PreliminaryEntry.value:type_name -> debate_management.RoomInfo
	12, // 50: debate_management.UpdateJudgeRequest.EliminationEntry.value:type_name -> debate_management.RoomInfo
	3,  // 51: debate_management.DebateService.GetRooms:input_type -> debate_management.GetRoomsRequest
	5,  // 52: debate_management.DebateService.GetRoom:input_type -> debate_management.GetRoomRequest
	7,  // 53: debate_management.DebateService.UpdateRoom:input_type -> debate_management.UpdateRoomRequest
	10, // 54: debate_management.DebateService.GetJudges:input_type -> debate_management.GetJudgesRequest
	14, // 55: debate_management.DebateService.GetJudge:input_type -> debate_management.GetJudgeRequest
	16, // 56: debate_management.DebateService.UpdateJudge:input_type -> debate_management.UpdateJudgeRequest
	21, // 57: debate_management.DebateService.GetPairings:input_type -> debate_management.GetPairingsRequest
	23, // 58: debate_management.DebateService.UpdatePairings:input_type -> debate_management.UpdatePairingsRequest
	26, // 59: debate_management.DebateService.GetBallots:input_type -> debate_management.GetBallotsRequest
	28, // 60: debate_management.DebateService.GetBallot:input_type -> debate_management.GetBallotRequest
	32, // 61: debate_management.DebateService.UpdateBallot:input_type -> debate_management.UpdateBallotRequest
	30, // 62: debate_management.DebateService.GetBallotByJudgeID:input_type -> debate_management.GetBallotByJudgeIDRequest
	34, // 63: debate_management.DebateService.GeneratePreliminaryPairings:input_type -> debate_management.GeneratePreliminaryPairingsRequest
	35, // 64: debate_management.DebateService.GenerateEliminationPairings:input_type -> debate_management.GenerateEliminationPairingsRequest
	37, // 65: debate_management.DebateService.CreateTeam:input_type -> debate_management.CreateTeamRequest
	38, // 66: debate_management.DebateService.GetTeam:input_type -> debate_management.GetTeamRequest
	39, // 67: debate_management.DebateService.UpdateTeam:input_type -> debate_management.UpdateTeamRequest
	42, // 68: debate_management.DebateService.GetTeamsByTournament:input_type -> debate_management.GetTeamsByTournamentRequest
	40, // 69: debate_management.DebateService.DeleteTeam:input_type -> debate_management.DeleteTeamRequest
	51, // 70: debate_management.DebateService.GetTournamentStudentRanking:input_type -> debate_management.TournamentRankingRequest
	44, // 71: debate_management.DebateService.GetOverallStudentRanking:input_type -> debate_management.OverallRankingRequest
	48, // 72: debate_management.DebateService.GetStudentOverallPerformance:input_type -> debate_management.PerformanceRequest
	67, // 73: debate_management.DebateService.GetStudentTournamentStats:input_type -> debate_management.StudentTournamentStatsRequest
	54, // 74: debate_management.DebateService.GetTournamentTeamsRanking:input_type -> debate_management.TournamentTeamsRankingRequest
	57, // 75: debate_management.DebateService.GetTournamentSchoolRanking:input_type -> debate_management.TournamentSchoolRankingRequest
	60, // 76: debate_management.DebateService.GetOverallSchoolRanking:input_type -> debate_management.OverallSchoolRankingRequest
	64, // 77: debate_management.DebateService.GetSchoolOverallPerformance:input_type -> debate_management.SchoolPerformanceRequest
	69, // 78: debate_management.DebateService.GetVolunteerTournamentStats:input_type -> debate_management.VolunteerTournamentStatsRequest
	89, // 79: debate_management.DebateService.GetTournamentVolunteerRanking:input_type -> debate_management.TournamentVolunteerRankingRequest
	71, // 80: debate_management.DebateService.GetStudentFeedback:input_type -> debate_management.GetStudentFeedbackRequest
	75, // 81: debate_management.DebateService.SubmitJudgeFeedback:input_type -> debate_management.SubmitJudgeFeedbackRequest
	77, // 82: debate_management.DebateService.GetJudgeFeedback:input_type -> debate_management.GetJudgeFeedbackRequest
	80, // 83: debate_management.DebateService.GetVolunteerRanking:input_type -> debate_management.GetVolunteerRankingRequest
	84, // 84: debate_management.DebateService.GetVolunteerPerformance:input_type -> debate_management.GetVolunteerPerformanceRequest
	87, // 85: debate_management.DebateService.MarkStudentFeedbackAsRead:input_type -> debate_management.MarkFeedbackAsReadRequest
	87, // 86: debate_management.DebateService.MarkJudgeFeedbackAsRead:input_type -> debate_management.MarkFeedbackAsReadRequest
	4,  // 87: debate_management.DebateService.GetRooms:output_type -> debate_management.GetRoomsResponse
	6,  // 88: debate_management.DebateService.GetRoom:output_type -> debate_management.GetRoomResponse
	8,  // 89: debate_management.DebateService.UpdateRoom:output_type -> debate_management.UpdateRoomResponse
	11, // 90: debate_management.DebateService.GetJudges:output_type -> debate_management.GetJudgesResponse
	15, // 91: debate_management.DebateService.GetJudge:output_type -> debate_management.GetJudgeResponse
	17, // 92: debate_management.DebateService.UpdateJudge:output_type -> debate_management.UpdateJudgeResponse
	22, // 93: debate_management.DebateService.GetPairings:output_type -> debate_management.GetPairingsResponse
	24, // 94: debate_management.DebateService.UpdatePairings:output_type -> debate_management.UpdatePairingsResponse
	27, // 95: debate_management.DebateService.GetBallots:output_type -> debate_management.GetBallotsResponse
	29, // 96: debate_management.DebateService.GetBallot:output_type -> debate_management.GetBallotResponse
	33, // 97: debate_management.DebateService.UpdateBallot:output_type -> debate_management.UpdateBallotResponse
	31, // 98: debate_management.DebateService.GetBallotByJudgeID:output_type -> debate_management.GetBallotByJudgeIDResponse
	36, // 99: debate_management.DebateService.GeneratePreliminaryPairings:output_type -> debate_management.GeneratePairingsResponse
	36, // 100: debate_management.DebateService.GenerateEliminationPairings:output_type -> debate_management.GeneratePairingsResponse
	19, // 101: debate_management.DebateService.CreateTeam:output_type -> debate_management.Team
	19, // 102: debate_management.DebateService.GetTeam:output_type -> debate_management.Team
	19, // 103: debate_management.DebateService.UpdateTeam:output_type -> debate_management.Team
	43, // 104: debate_management.DebateService.GetTeamsByTournament:output_type -> debate_management.GetTeamsByTournamentResponse
	41, // 105: debate_management.DebateService.DeleteTeam:output_type -> debate_management.DeleteTeamResponse
	52, // 106: debate_management.DebateService.GetTournamentStudentRanking:output_type -> debate_management.TournamentRankingResponse
	45, // 107: debate_management.DebateService.GetOverallStudentRanking:output_type -> debate_management.OverallRankingResponse
	49, // 108: debate_management.DebateService.GetStudentOverallPerformance:output_type -> debate_management.PerformanceResponse
	68, // 109: debate_management.DebateService.GetStudentTournamentStats:output_type -> debate_management.StudentTournamentStatsResponse
	55, // 110: debate_management.DebateService.GetTournamentTeamsRanking:output_type -> debate_management.TournamentTeamsRankingResponse
	58, // 111: debate_management.DebateService.GetTournamentSchoolRanking:output_type -> debate_management.TournamentSchoolRankingResponse
	61, // 112: debate_management.DebateService.GetOverallSchoolRanking:output_type -> debate_management.OverallSchoolRankingResponse
	65, // 113: debate_management.DebateService.GetSchoolOverallPerformance:output_type -> debate_management.SchoolPerformanceResponse
	70, // 114: debate_management.DebateService.GetVolunteerTournamentStats:output_type -> debate_management.VolunteerTournamentStatsResponse
	91, // 115: debate_management.DebateService.GetTournamentVolunteerRanking:output_type -> debate_management.TournamentVolunteerRankingResponse
	74, // 116: debate_management.DebateService.GetStudentFeedback:output_type -> debate_management.GetStudentFeedbackResponse
	76, // 117: debate_management.DebateService.SubmitJudgeFeedback:output_type -> debate_management.SubmitJudgeFeedbackResponse
	79, // 118: debate_management.DebateService.GetJudgeFeedback:output_type -> debate_management.GetJudgeFeedbackResponse
	83, // 119: debate_management.DebateService.GetVolunteerRanking:output_type -> debate_management.GetVolunteerRankingResponse
	86, // 120: debate_management.DebateService.GetVolunteerPerformance:output_type -> debate_management.GetVolunteerPerformanceResponse
	88, // 121: debate_management.DebateService.MarkStudentFeedbackAsRead:output_type -> debate_management.MarkFeedbackAsReadResponse
	88, // 122: debate_management.DebateService.MarkJudgeFeedbackAsRead:output_type -> debate_management.MarkFeedbackAsReadResponse
	87, // [87:123] is the sub-list for method output_type
	51, // [51:87] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_internal_grpc_proto_debate_management_debate_proto_init() }
func file_internal_grpc_proto_debate_management_debate_proto_init() {
	if File_internal_grpc_proto_debate_management_debate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RoundStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Judge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateJudgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Pairing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Speaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetPairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetPairingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePairingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Ballot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotByJudgeIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotByJudgeIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBallotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBallotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePreliminaryPairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateEliminationPairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePairingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamsByTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamsByTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*OverallRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*OverallRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*TopStudent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*StudentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*PerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*PerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*PerformanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*StudentRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentTeamsRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentTeamsRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*TeamRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentSchoolRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentSchoolRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*SchoolRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*OverallSchoolRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*OverallSchoolRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*TopSchool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*SchoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*SchoolPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*SchoolPerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*SchoolPerformanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*StudentTournamentStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*StudentTournamentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*VolunteerTournamentStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*VolunteerTournamentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*GetStudentFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*StudentFeedbackEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*JudgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*GetStudentFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitJudgeFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitJudgeFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgeFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*JudgeFeedbackEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgeFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*GetVolunteerRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*TopVolunteer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*VolunteerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*GetVolunteerRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*GetVolunteerPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*VolunteerPerformanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*GetVolunteerPerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*MarkFeedbackAsReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*MarkFeedbackAsReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentVolunteerRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*VolunteerTournamentRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentVolunteerRankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_grpc_proto_debate_management_debate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_grpc_proto_debate_management_debate_proto_goTypes,
		DependencyIndexes: file_internal_grpc_proto_debate_management_debate_proto_depIdxs,
		MessageInfos:      file_internal_grpc_proto_debate_management_debate_proto_msgTypes,
	}.Build()
	File_internal_grpc_proto_debate_management_debate_proto = out.File
	file_internal_grpc_proto_debate_management_debate_proto_rawDesc = nil
	file_internal_grpc_proto_debate_management_debate_proto_goTypes = nil
	file_internal_grpc_proto_debate_management_debate_proto_depIdxs = nil
}
