/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: analytics/analytics.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace analytics {
    export class DateRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_date?: string;
            end_date?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
            }
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_date() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set end_date(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            start_date?: string;
            end_date?: string;
        }): DateRange {
            const message = new DateRange({});
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_date != null) {
                message.end_date = data.end_date;
            }
            return message;
        }
        toObject() {
            const data: {
                start_date?: string;
                end_date?: string;
            } = {};
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_date != null) {
                data.end_date = this.end_date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_date.length)
                writer.writeString(1, this.start_date);
            if (this.end_date.length)
                writer.writeString(2, this.end_date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_date = reader.readString();
                        break;
                    case 2:
                        message.end_date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DateRange {
            return DateRange.deserialize(bytes);
        }
    }
    export class FinancialReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5]];
        constructor(data?: any[] | ({
            token?: string;
            date_range?: DateRange;
        } & (({
            tournament_id?: string;
        }) | ({
            report_type?: string;
        }) | ({
            group_by?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("date_range" in data && data.date_range != undefined) {
                    this.date_range = data.date_range;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("report_type" in data && data.report_type != undefined) {
                    this.report_type = data.report_type;
                }
                if ("group_by" in data && data.group_by != undefined) {
                    this.group_by = data.group_by;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get date_range() {
            return pb_1.Message.getWrapperField(this, DateRange, 2) as DateRange;
        }
        set date_range(value: DateRange) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_date_range() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tournament_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_tournament_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get report_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set report_type(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_report_type() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get group_by() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set group_by(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_group_by() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _tournament_id() {
            const cases: {
                [index: number]: "none" | "tournament_id";
            } = {
                0: "none",
                3: "tournament_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _report_type() {
            const cases: {
                [index: number]: "none" | "report_type";
            } = {
                0: "none",
                4: "report_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _group_by() {
            const cases: {
                [index: number]: "none" | "group_by";
            } = {
                0: "none",
                5: "group_by"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            token?: string;
            date_range?: ReturnType<typeof DateRange.prototype.toObject>;
            tournament_id?: string;
            report_type?: string;
            group_by?: string;
        }): FinancialReportRequest {
            const message = new FinancialReportRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.date_range != null) {
                message.date_range = DateRange.fromObject(data.date_range);
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.report_type != null) {
                message.report_type = data.report_type;
            }
            if (data.group_by != null) {
                message.group_by = data.group_by;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                date_range?: ReturnType<typeof DateRange.prototype.toObject>;
                tournament_id?: string;
                report_type?: string;
                group_by?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.date_range != null) {
                data.date_range = this.date_range.toObject();
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.report_type != null) {
                data.report_type = this.report_type;
            }
            if (this.group_by != null) {
                data.group_by = this.group_by;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.has_date_range)
                writer.writeMessage(2, this.date_range, () => this.date_range.serialize(writer));
            if (this.has_tournament_id)
                writer.writeString(3, this.tournament_id);
            if (this.has_report_type)
                writer.writeString(4, this.report_type);
            if (this.has_group_by)
                writer.writeString(5, this.group_by);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinancialReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinancialReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.date_range, () => message.date_range = DateRange.deserialize(reader));
                        break;
                    case 3:
                        message.tournament_id = reader.readString();
                        break;
                    case 4:
                        message.report_type = reader.readString();
                        break;
                    case 5:
                        message.group_by = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinancialReportRequest {
            return FinancialReportRequest.deserialize(bytes);
        }
    }
    export class TournamentIncome extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: string;
            tournament_name?: string;
            league_id?: string;
            league_name?: string;
            total_income?: number;
            net_revenue?: number;
            net_profit?: number;
            tournament_date?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("tournament_name" in data && data.tournament_name != undefined) {
                    this.tournament_name = data.tournament_name;
                }
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("league_name" in data && data.league_name != undefined) {
                    this.league_name = data.league_name;
                }
                if ("total_income" in data && data.total_income != undefined) {
                    this.total_income = data.total_income;
                }
                if ("net_revenue" in data && data.net_revenue != undefined) {
                    this.net_revenue = data.net_revenue;
                }
                if ("net_profit" in data && data.net_profit != undefined) {
                    this.net_profit = data.net_profit;
                }
                if ("tournament_date" in data && data.tournament_date != undefined) {
                    this.tournament_date = data.tournament_date;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tournament_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tournament_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set league_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get league_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set league_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_income() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_income(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get net_revenue() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set net_revenue(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get net_profit() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set net_profit(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get tournament_date() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set tournament_date(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            tournament_id?: string;
            tournament_name?: string;
            league_id?: string;
            league_name?: string;
            total_income?: number;
            net_revenue?: number;
            net_profit?: number;
            tournament_date?: string;
        }): TournamentIncome {
            const message = new TournamentIncome({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.tournament_name != null) {
                message.tournament_name = data.tournament_name;
            }
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.league_name != null) {
                message.league_name = data.league_name;
            }
            if (data.total_income != null) {
                message.total_income = data.total_income;
            }
            if (data.net_revenue != null) {
                message.net_revenue = data.net_revenue;
            }
            if (data.net_profit != null) {
                message.net_profit = data.net_profit;
            }
            if (data.tournament_date != null) {
                message.tournament_date = data.tournament_date;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: string;
                tournament_name?: string;
                league_id?: string;
                league_name?: string;
                total_income?: number;
                net_revenue?: number;
                net_profit?: number;
                tournament_date?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.tournament_name != null) {
                data.tournament_name = this.tournament_name;
            }
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.league_name != null) {
                data.league_name = this.league_name;
            }
            if (this.total_income != null) {
                data.total_income = this.total_income;
            }
            if (this.net_revenue != null) {
                data.net_revenue = this.net_revenue;
            }
            if (this.net_profit != null) {
                data.net_profit = this.net_profit;
            }
            if (this.tournament_date != null) {
                data.tournament_date = this.tournament_date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id.length)
                writer.writeString(1, this.tournament_id);
            if (this.tournament_name.length)
                writer.writeString(2, this.tournament_name);
            if (this.league_id.length)
                writer.writeString(3, this.league_id);
            if (this.league_name.length)
                writer.writeString(4, this.league_name);
            if (this.total_income != 0)
                writer.writeDouble(5, this.total_income);
            if (this.net_revenue != 0)
                writer.writeDouble(6, this.net_revenue);
            if (this.net_profit != 0)
                writer.writeDouble(7, this.net_profit);
            if (this.tournament_date.length)
                writer.writeString(8, this.tournament_date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TournamentIncome {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TournamentIncome();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readString();
                        break;
                    case 2:
                        message.tournament_name = reader.readString();
                        break;
                    case 3:
                        message.league_id = reader.readString();
                        break;
                    case 4:
                        message.league_name = reader.readString();
                        break;
                    case 5:
                        message.total_income = reader.readDouble();
                        break;
                    case 6:
                        message.net_revenue = reader.readDouble();
                        break;
                    case 7:
                        message.net_profit = reader.readDouble();
                        break;
                    case 8:
                        message.tournament_date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TournamentIncome {
            return TournamentIncome.deserialize(bytes);
        }
    }
    export class SchoolPerformanceData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_name?: string;
            total_amount?: number;
            school_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("total_amount" in data && data.total_amount != undefined) {
                    this.total_amount = data.total_amount;
                }
                if ("school_count" in data && data.school_count != undefined) {
                    this.school_count = data.school_count;
                }
            }
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get total_amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get school_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set school_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_name?: string;
            total_amount?: number;
            school_count?: number;
        }): SchoolPerformanceData {
            const message = new SchoolPerformanceData({});
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.total_amount != null) {
                message.total_amount = data.total_amount;
            }
            if (data.school_count != null) {
                message.school_count = data.school_count;
            }
            return message;
        }
        toObject() {
            const data: {
                group_name?: string;
                total_amount?: number;
                school_count?: number;
            } = {};
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.total_amount != null) {
                data.total_amount = this.total_amount;
            }
            if (this.school_count != null) {
                data.school_count = this.school_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_name.length)
                writer.writeString(1, this.group_name);
            if (this.total_amount != 0)
                writer.writeDouble(2, this.total_amount);
            if (this.school_count != 0)
                writer.writeInt32(3, this.school_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchoolPerformanceData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchoolPerformanceData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_name = reader.readString();
                        break;
                    case 2:
                        message.total_amount = reader.readDouble();
                        break;
                    case 3:
                        message.school_count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchoolPerformanceData {
            return SchoolPerformanceData.deserialize(bytes);
        }
    }
    export class ExpenseCategory extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: string;
            tournament_name?: string;
            food_expense?: number;
            transport_expense?: number;
            per_diem_expense?: number;
            awarding_expense?: number;
            stationary_expense?: number;
            other_expenses?: number;
            total_expense?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("tournament_name" in data && data.tournament_name != undefined) {
                    this.tournament_name = data.tournament_name;
                }
                if ("food_expense" in data && data.food_expense != undefined) {
                    this.food_expense = data.food_expense;
                }
                if ("transport_expense" in data && data.transport_expense != undefined) {
                    this.transport_expense = data.transport_expense;
                }
                if ("per_diem_expense" in data && data.per_diem_expense != undefined) {
                    this.per_diem_expense = data.per_diem_expense;
                }
                if ("awarding_expense" in data && data.awarding_expense != undefined) {
                    this.awarding_expense = data.awarding_expense;
                }
                if ("stationary_expense" in data && data.stationary_expense != undefined) {
                    this.stationary_expense = data.stationary_expense;
                }
                if ("other_expenses" in data && data.other_expenses != undefined) {
                    this.other_expenses = data.other_expenses;
                }
                if ("total_expense" in data && data.total_expense != undefined) {
                    this.total_expense = data.total_expense;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tournament_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tournament_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get food_expense() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set food_expense(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transport_expense() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transport_expense(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get per_diem_expense() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set per_diem_expense(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get awarding_expense() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set awarding_expense(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get stationary_expense() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set stationary_expense(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get other_expenses() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set other_expenses(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get total_expense() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set total_expense(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            tournament_id?: string;
            tournament_name?: string;
            food_expense?: number;
            transport_expense?: number;
            per_diem_expense?: number;
            awarding_expense?: number;
            stationary_expense?: number;
            other_expenses?: number;
            total_expense?: number;
        }): ExpenseCategory {
            const message = new ExpenseCategory({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.tournament_name != null) {
                message.tournament_name = data.tournament_name;
            }
            if (data.food_expense != null) {
                message.food_expense = data.food_expense;
            }
            if (data.transport_expense != null) {
                message.transport_expense = data.transport_expense;
            }
            if (data.per_diem_expense != null) {
                message.per_diem_expense = data.per_diem_expense;
            }
            if (data.awarding_expense != null) {
                message.awarding_expense = data.awarding_expense;
            }
            if (data.stationary_expense != null) {
                message.stationary_expense = data.stationary_expense;
            }
            if (data.other_expenses != null) {
                message.other_expenses = data.other_expenses;
            }
            if (data.total_expense != null) {
                message.total_expense = data.total_expense;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: string;
                tournament_name?: string;
                food_expense?: number;
                transport_expense?: number;
                per_diem_expense?: number;
                awarding_expense?: number;
                stationary_expense?: number;
                other_expenses?: number;
                total_expense?: number;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.tournament_name != null) {
                data.tournament_name = this.tournament_name;
            }
            if (this.food_expense != null) {
                data.food_expense = this.food_expense;
            }
            if (this.transport_expense != null) {
                data.transport_expense = this.transport_expense;
            }
            if (this.per_diem_expense != null) {
                data.per_diem_expense = this.per_diem_expense;
            }
            if (this.awarding_expense != null) {
                data.awarding_expense = this.awarding_expense;
            }
            if (this.stationary_expense != null) {
                data.stationary_expense = this.stationary_expense;
            }
            if (this.other_expenses != null) {
                data.other_expenses = this.other_expenses;
            }
            if (this.total_expense != null) {
                data.total_expense = this.total_expense;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id.length)
                writer.writeString(1, this.tournament_id);
            if (this.tournament_name.length)
                writer.writeString(2, this.tournament_name);
            if (this.food_expense != 0)
                writer.writeDouble(3, this.food_expense);
            if (this.transport_expense != 0)
                writer.writeDouble(4, this.transport_expense);
            if (this.per_diem_expense != 0)
                writer.writeDouble(5, this.per_diem_expense);
            if (this.awarding_expense != 0)
                writer.writeDouble(6, this.awarding_expense);
            if (this.stationary_expense != 0)
                writer.writeDouble(7, this.stationary_expense);
            if (this.other_expenses != 0)
                writer.writeDouble(8, this.other_expenses);
            if (this.total_expense != 0)
                writer.writeDouble(9, this.total_expense);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExpenseCategory {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExpenseCategory();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readString();
                        break;
                    case 2:
                        message.tournament_name = reader.readString();
                        break;
                    case 3:
                        message.food_expense = reader.readDouble();
                        break;
                    case 4:
                        message.transport_expense = reader.readDouble();
                        break;
                    case 5:
                        message.per_diem_expense = reader.readDouble();
                        break;
                    case 6:
                        message.awarding_expense = reader.readDouble();
                        break;
                    case 7:
                        message.stationary_expense = reader.readDouble();
                        break;
                    case 8:
                        message.other_expenses = reader.readDouble();
                        break;
                    case 9:
                        message.total_expense = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExpenseCategory {
            return ExpenseCategory.deserialize(bytes);
        }
    }
    export class FinancialReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_incomes?: TournamentIncome[];
            school_performance?: SchoolPerformanceData[];
            expense_categories?: ExpenseCategory[];
            report_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_incomes" in data && data.tournament_incomes != undefined) {
                    this.tournament_incomes = data.tournament_incomes;
                }
                if ("school_performance" in data && data.school_performance != undefined) {
                    this.school_performance = data.school_performance;
                }
                if ("expense_categories" in data && data.expense_categories != undefined) {
                    this.expense_categories = data.expense_categories;
                }
                if ("report_type" in data && data.report_type != undefined) {
                    this.report_type = data.report_type;
                }
            }
        }
        get tournament_incomes() {
            return pb_1.Message.getRepeatedWrapperField(this, TournamentIncome, 1) as TournamentIncome[];
        }
        set tournament_incomes(value: TournamentIncome[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get school_performance() {
            return pb_1.Message.getRepeatedWrapperField(this, SchoolPerformanceData, 2) as SchoolPerformanceData[];
        }
        set school_performance(value: SchoolPerformanceData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get expense_categories() {
            return pb_1.Message.getRepeatedWrapperField(this, ExpenseCategory, 3) as ExpenseCategory[];
        }
        set expense_categories(value: ExpenseCategory[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get report_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set report_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tournament_incomes?: ReturnType<typeof TournamentIncome.prototype.toObject>[];
            school_performance?: ReturnType<typeof SchoolPerformanceData.prototype.toObject>[];
            expense_categories?: ReturnType<typeof ExpenseCategory.prototype.toObject>[];
            report_type?: string;
        }): FinancialReportResponse {
            const message = new FinancialReportResponse({});
            if (data.tournament_incomes != null) {
                message.tournament_incomes = data.tournament_incomes.map(item => TournamentIncome.fromObject(item));
            }
            if (data.school_performance != null) {
                message.school_performance = data.school_performance.map(item => SchoolPerformanceData.fromObject(item));
            }
            if (data.expense_categories != null) {
                message.expense_categories = data.expense_categories.map(item => ExpenseCategory.fromObject(item));
            }
            if (data.report_type != null) {
                message.report_type = data.report_type;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_incomes?: ReturnType<typeof TournamentIncome.prototype.toObject>[];
                school_performance?: ReturnType<typeof SchoolPerformanceData.prototype.toObject>[];
                expense_categories?: ReturnType<typeof ExpenseCategory.prototype.toObject>[];
                report_type?: string;
            } = {};
            if (this.tournament_incomes != null) {
                data.tournament_incomes = this.tournament_incomes.map((item: TournamentIncome) => item.toObject());
            }
            if (this.school_performance != null) {
                data.school_performance = this.school_performance.map((item: SchoolPerformanceData) => item.toObject());
            }
            if (this.expense_categories != null) {
                data.expense_categories = this.expense_categories.map((item: ExpenseCategory) => item.toObject());
            }
            if (this.report_type != null) {
                data.report_type = this.report_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_incomes.length)
                writer.writeRepeatedMessage(1, this.tournament_incomes, (item: TournamentIncome) => item.serialize(writer));
            if (this.school_performance.length)
                writer.writeRepeatedMessage(2, this.school_performance, (item: SchoolPerformanceData) => item.serialize(writer));
            if (this.expense_categories.length)
                writer.writeRepeatedMessage(3, this.expense_categories, (item: ExpenseCategory) => item.serialize(writer));
            if (this.report_type.length)
                writer.writeString(4, this.report_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinancialReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinancialReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tournament_incomes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TournamentIncome.deserialize(reader), TournamentIncome));
                        break;
                    case 2:
                        reader.readMessage(message.school_performance, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SchoolPerformanceData.deserialize(reader), SchoolPerformanceData));
                        break;
                    case 3:
                        reader.readMessage(message.expense_categories, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ExpenseCategory.deserialize(reader), ExpenseCategory));
                        break;
                    case 4:
                        message.report_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinancialReportResponse {
            return FinancialReportResponse.deserialize(bytes);
        }
    }
    export class AttendanceReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            token?: string;
            date_range?: DateRange;
            report_type?: string;
            countries?: string[];
        } & (({
            tournament_id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("date_range" in data && data.date_range != undefined) {
                    this.date_range = data.date_range;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("report_type" in data && data.report_type != undefined) {
                    this.report_type = data.report_type;
                }
                if ("countries" in data && data.countries != undefined) {
                    this.countries = data.countries;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get date_range() {
            return pb_1.Message.getWrapperField(this, DateRange, 2) as DateRange;
        }
        set date_range(value: DateRange) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_date_range() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tournament_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_tournament_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get report_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set report_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get countries() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set countries(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get _tournament_id() {
            const cases: {
                [index: number]: "none" | "tournament_id";
            } = {
                0: "none",
                3: "tournament_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            token?: string;
            date_range?: ReturnType<typeof DateRange.prototype.toObject>;
            tournament_id?: string;
            report_type?: string;
            countries?: string[];
        }): AttendanceReportRequest {
            const message = new AttendanceReportRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.date_range != null) {
                message.date_range = DateRange.fromObject(data.date_range);
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.report_type != null) {
                message.report_type = data.report_type;
            }
            if (data.countries != null) {
                message.countries = data.countries;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                date_range?: ReturnType<typeof DateRange.prototype.toObject>;
                tournament_id?: string;
                report_type?: string;
                countries?: string[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.date_range != null) {
                data.date_range = this.date_range.toObject();
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.report_type != null) {
                data.report_type = this.report_type;
            }
            if (this.countries != null) {
                data.countries = this.countries;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.has_date_range)
                writer.writeMessage(2, this.date_range, () => this.date_range.serialize(writer));
            if (this.has_tournament_id)
                writer.writeString(3, this.tournament_id);
            if (this.report_type.length)
                writer.writeString(4, this.report_type);
            if (this.countries.length)
                writer.writeRepeatedString(5, this.countries);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttendanceReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttendanceReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.date_range, () => message.date_range = DateRange.deserialize(reader));
                        break;
                    case 3:
                        message.tournament_id = reader.readString();
                        break;
                    case 4:
                        message.report_type = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttendanceReportRequest {
            return AttendanceReportRequest.deserialize(bytes);
        }
    }
    export class CategoryAttendance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            category?: string;
            school_count?: number;
            percentage_change?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("school_count" in data && data.school_count != undefined) {
                    this.school_count = data.school_count;
                }
                if ("percentage_change" in data && data.percentage_change != undefined) {
                    this.percentage_change = data.percentage_change;
                }
            }
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get school_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set school_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get percentage_change() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set percentage_change(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            category?: string;
            school_count?: number;
            percentage_change?: number;
        }): CategoryAttendance {
            const message = new CategoryAttendance({});
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.school_count != null) {
                message.school_count = data.school_count;
            }
            if (data.percentage_change != null) {
                message.percentage_change = data.percentage_change;
            }
            return message;
        }
        toObject() {
            const data: {
                category?: string;
                school_count?: number;
                percentage_change?: number;
            } = {};
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.school_count != null) {
                data.school_count = this.school_count;
            }
            if (this.percentage_change != null) {
                data.percentage_change = this.percentage_change;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.category.length)
                writer.writeString(1, this.category);
            if (this.school_count != 0)
                writer.writeInt32(2, this.school_count);
            if (this.percentage_change != 0)
                writer.writeDouble(3, this.percentage_change);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CategoryAttendance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CategoryAttendance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.category = reader.readString();
                        break;
                    case 2:
                        message.school_count = reader.readInt32();
                        break;
                    case 3:
                        message.percentage_change = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CategoryAttendance {
            return CategoryAttendance.deserialize(bytes);
        }
    }
    export class LocationAttendance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: string;
            location_type?: string;
            school_count?: number;
            percentage_change?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("location_type" in data && data.location_type != undefined) {
                    this.location_type = data.location_type;
                }
                if ("school_count" in data && data.school_count != undefined) {
                    this.school_count = data.school_count;
                }
                if ("percentage_change" in data && data.percentage_change != undefined) {
                    this.percentage_change = data.percentage_change;
                }
            }
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get location_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set location_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get school_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set school_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get percentage_change() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set percentage_change(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            location?: string;
            location_type?: string;
            school_count?: number;
            percentage_change?: number;
        }): LocationAttendance {
            const message = new LocationAttendance({});
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.location_type != null) {
                message.location_type = data.location_type;
            }
            if (data.school_count != null) {
                message.school_count = data.school_count;
            }
            if (data.percentage_change != null) {
                message.percentage_change = data.percentage_change;
            }
            return message;
        }
        toObject() {
            const data: {
                location?: string;
                location_type?: string;
                school_count?: number;
                percentage_change?: number;
            } = {};
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.location_type != null) {
                data.location_type = this.location_type;
            }
            if (this.school_count != null) {
                data.school_count = this.school_count;
            }
            if (this.percentage_change != null) {
                data.percentage_change = this.percentage_change;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.location.length)
                writer.writeString(1, this.location);
            if (this.location_type.length)
                writer.writeString(2, this.location_type);
            if (this.school_count != 0)
                writer.writeInt32(3, this.school_count);
            if (this.percentage_change != 0)
                writer.writeDouble(4, this.percentage_change);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocationAttendance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocationAttendance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.location = reader.readString();
                        break;
                    case 2:
                        message.location_type = reader.readString();
                        break;
                    case 3:
                        message.school_count = reader.readInt32();
                        break;
                    case 4:
                        message.percentage_change = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocationAttendance {
            return LocationAttendance.deserialize(bytes);
        }
    }
    export class AttendanceReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            report_type?: string;
            category_attendance?: CategoryAttendance[];
            location_attendance?: LocationAttendance[];
            total_schools?: number;
            total_percentage_change?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("report_type" in data && data.report_type != undefined) {
                    this.report_type = data.report_type;
                }
                if ("category_attendance" in data && data.category_attendance != undefined) {
                    this.category_attendance = data.category_attendance;
                }
                if ("location_attendance" in data && data.location_attendance != undefined) {
                    this.location_attendance = data.location_attendance;
                }
                if ("total_schools" in data && data.total_schools != undefined) {
                    this.total_schools = data.total_schools;
                }
                if ("total_percentage_change" in data && data.total_percentage_change != undefined) {
                    this.total_percentage_change = data.total_percentage_change;
                }
            }
        }
        get report_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set report_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get category_attendance() {
            return pb_1.Message.getRepeatedWrapperField(this, CategoryAttendance, 2) as CategoryAttendance[];
        }
        set category_attendance(value: CategoryAttendance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get location_attendance() {
            return pb_1.Message.getRepeatedWrapperField(this, LocationAttendance, 3) as LocationAttendance[];
        }
        set location_attendance(value: LocationAttendance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get total_schools() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total_schools(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_percentage_change() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_percentage_change(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            report_type?: string;
            category_attendance?: ReturnType<typeof CategoryAttendance.prototype.toObject>[];
            location_attendance?: ReturnType<typeof LocationAttendance.prototype.toObject>[];
            total_schools?: number;
            total_percentage_change?: number;
        }): AttendanceReportResponse {
            const message = new AttendanceReportResponse({});
            if (data.report_type != null) {
                message.report_type = data.report_type;
            }
            if (data.category_attendance != null) {
                message.category_attendance = data.category_attendance.map(item => CategoryAttendance.fromObject(item));
            }
            if (data.location_attendance != null) {
                message.location_attendance = data.location_attendance.map(item => LocationAttendance.fromObject(item));
            }
            if (data.total_schools != null) {
                message.total_schools = data.total_schools;
            }
            if (data.total_percentage_change != null) {
                message.total_percentage_change = data.total_percentage_change;
            }
            return message;
        }
        toObject() {
            const data: {
                report_type?: string;
                category_attendance?: ReturnType<typeof CategoryAttendance.prototype.toObject>[];
                location_attendance?: ReturnType<typeof LocationAttendance.prototype.toObject>[];
                total_schools?: number;
                total_percentage_change?: number;
            } = {};
            if (this.report_type != null) {
                data.report_type = this.report_type;
            }
            if (this.category_attendance != null) {
                data.category_attendance = this.category_attendance.map((item: CategoryAttendance) => item.toObject());
            }
            if (this.location_attendance != null) {
                data.location_attendance = this.location_attendance.map((item: LocationAttendance) => item.toObject());
            }
            if (this.total_schools != null) {
                data.total_schools = this.total_schools;
            }
            if (this.total_percentage_change != null) {
                data.total_percentage_change = this.total_percentage_change;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.report_type.length)
                writer.writeString(1, this.report_type);
            if (this.category_attendance.length)
                writer.writeRepeatedMessage(2, this.category_attendance, (item: CategoryAttendance) => item.serialize(writer));
            if (this.location_attendance.length)
                writer.writeRepeatedMessage(3, this.location_attendance, (item: LocationAttendance) => item.serialize(writer));
            if (this.total_schools != 0)
                writer.writeInt32(4, this.total_schools);
            if (this.total_percentage_change != 0)
                writer.writeDouble(5, this.total_percentage_change);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttendanceReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttendanceReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.report_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.category_attendance, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CategoryAttendance.deserialize(reader), CategoryAttendance));
                        break;
                    case 3:
                        reader.readMessage(message.location_attendance, () => pb_1.Message.addToRepeatedWrapperField(message, 3, LocationAttendance.deserialize(reader), LocationAttendance));
                        break;
                    case 4:
                        message.total_schools = reader.readInt32();
                        break;
                    case 5:
                        message.total_percentage_change = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttendanceReportResponse {
            return AttendanceReportResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAnalyticsServiceService {
        static definition = {
            GetFinancialReports: {
                path: "/analytics.AnalyticsService/GetFinancialReports",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FinancialReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FinancialReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FinancialReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FinancialReportResponse.deserialize(new Uint8Array(bytes))
            },
            GetAttendanceReports: {
                path: "/analytics.AnalyticsService/GetAttendanceReports",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AttendanceReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AttendanceReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AttendanceReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AttendanceReportResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetFinancialReports(call: grpc_1.ServerUnaryCall<FinancialReportRequest, FinancialReportResponse>, callback: grpc_1.sendUnaryData<FinancialReportResponse>): void;
        abstract GetAttendanceReports(call: grpc_1.ServerUnaryCall<AttendanceReportRequest, AttendanceReportResponse>, callback: grpc_1.sendUnaryData<AttendanceReportResponse>): void;
    }
    export class AnalyticsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAnalyticsServiceService.definition, "AnalyticsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetFinancialReports: GrpcUnaryServiceInterface<FinancialReportRequest, FinancialReportResponse> = (message: FinancialReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FinancialReportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FinancialReportResponse>, callback?: grpc_1.requestCallback<FinancialReportResponse>): grpc_1.ClientUnaryCall => {
            return super.GetFinancialReports(message, metadata, options, callback);
        };
        GetAttendanceReports: GrpcUnaryServiceInterface<AttendanceReportRequest, AttendanceReportResponse> = (message: AttendanceReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AttendanceReportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AttendanceReportResponse>, callback?: grpc_1.requestCallback<AttendanceReportResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAttendanceReports(message, metadata, options, callback);
        };
    }
}
