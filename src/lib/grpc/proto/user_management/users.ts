/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: user_management/users.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace user_management {
    export class GetPendingUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetPendingUsersRequest {
            const message = new GetPendingUsersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPendingUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPendingUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPendingUsersRequest {
            return GetPendingUsersRequest.deserialize(bytes);
        }
    }
    export class GetPendingUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: UserSummary[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, UserSummary, 1) as UserSummary[];
        }
        set users(value: UserSummary[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof UserSummary.prototype.toObject>[];
        }): GetPendingUsersResponse {
            const message = new GetPendingUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => UserSummary.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof UserSummary.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: UserSummary) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: UserSummary) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPendingUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPendingUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserSummary.deserialize(reader), UserSummary));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPendingUsersResponse {
            return GetPendingUsersResponse.deserialize(bytes);
        }
    }
    export class UserSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            signUpDate?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("signUpDate" in data && data.signUpDate != undefined) {
                    this.signUpDate = data.signUpDate;
                }
            }
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get signUpDate() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set signUpDate(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            signUpDate?: string;
        }): UserSummary {
            const message = new UserSummary({});
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.signUpDate != null) {
                message.signUpDate = data.signUpDate;
            }
            return message;
        }
        toObject() {
            const data: {
                userID?: number;
                name?: string;
                email?: string;
                userRole?: string;
                signUpDate?: string;
            } = {};
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.signUpDate != null) {
                data.signUpDate = this.signUpDate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userID != 0)
                writer.writeInt32(1, this.userID);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.userRole.length)
                writer.writeString(4, this.userRole);
            if (this.signUpDate.length)
                writer.writeString(5, this.signUpDate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userID = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.userRole = reader.readString();
                        break;
                    case 5:
                        message.signUpDate = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserSummary {
            return UserSummary.deserialize(bytes);
        }
    }
    export class GetUserDetailsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): GetUserDetailsRequest {
            const message = new GetUserDetailsRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserDetailsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserDetailsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserDetailsRequest {
            return GetUserDetailsRequest.deserialize(bytes);
        }
    }
    export class GetUserDetailsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: UserDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, UserDetails, 1) as UserDetails;
        }
        set user(value: UserDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof UserDetails.prototype.toObject>;
        }): GetUserDetailsResponse {
            const message = new GetUserDetailsResponse({});
            if (data.user != null) {
                message.user = UserDetails.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof UserDetails.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = UserDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserDetailsResponse {
            return GetUserDetailsResponse.deserialize(bytes);
        }
    }
    export class UserDetails extends pb_1.Message {
        #one_of_decls: number[][] = [[7, 8, 9]];
        constructor(data?: any[] | ({
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            signUpDate?: string;
            profile?: UserProfile;
        } & (({
            studentDetails?: StudentDetails;
            schoolDetails?: never;
            volunteerDetails?: never;
        } | {
            studentDetails?: never;
            schoolDetails?: SchoolDetails;
            volunteerDetails?: never;
        } | {
            studentDetails?: never;
            schoolDetails?: never;
            volunteerDetails?: VolunteerDetails;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("signUpDate" in data && data.signUpDate != undefined) {
                    this.signUpDate = data.signUpDate;
                }
                if ("profile" in data && data.profile != undefined) {
                    this.profile = data.profile;
                }
                if ("studentDetails" in data && data.studentDetails != undefined) {
                    this.studentDetails = data.studentDetails;
                }
                if ("schoolDetails" in data && data.schoolDetails != undefined) {
                    this.schoolDetails = data.schoolDetails;
                }
                if ("volunteerDetails" in data && data.volunteerDetails != undefined) {
                    this.volunteerDetails = data.volunteerDetails;
                }
            }
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get signUpDate() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set signUpDate(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get profile() {
            return pb_1.Message.getWrapperField(this, UserProfile, 6) as UserProfile;
        }
        set profile(value: UserProfile) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_profile() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get studentDetails() {
            return pb_1.Message.getWrapperField(this, StudentDetails, 7) as StudentDetails;
        }
        set studentDetails(value: StudentDetails) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_studentDetails() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get schoolDetails() {
            return pb_1.Message.getWrapperField(this, SchoolDetails, 8) as SchoolDetails;
        }
        set schoolDetails(value: SchoolDetails) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_schoolDetails() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get volunteerDetails() {
            return pb_1.Message.getWrapperField(this, VolunteerDetails, 9) as VolunteerDetails;
        }
        set volunteerDetails(value: VolunteerDetails) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_volunteerDetails() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get role_specific_details() {
            const cases: {
                [index: number]: "none" | "studentDetails" | "schoolDetails" | "volunteerDetails";
            } = {
                0: "none",
                7: "studentDetails",
                8: "schoolDetails",
                9: "volunteerDetails"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7, 8, 9])];
        }
        static fromObject(data: {
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            signUpDate?: string;
            profile?: ReturnType<typeof UserProfile.prototype.toObject>;
            studentDetails?: ReturnType<typeof StudentDetails.prototype.toObject>;
            schoolDetails?: ReturnType<typeof SchoolDetails.prototype.toObject>;
            volunteerDetails?: ReturnType<typeof VolunteerDetails.prototype.toObject>;
        }): UserDetails {
            const message = new UserDetails({});
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.signUpDate != null) {
                message.signUpDate = data.signUpDate;
            }
            if (data.profile != null) {
                message.profile = UserProfile.fromObject(data.profile);
            }
            if (data.studentDetails != null) {
                message.studentDetails = StudentDetails.fromObject(data.studentDetails);
            }
            if (data.schoolDetails != null) {
                message.schoolDetails = SchoolDetails.fromObject(data.schoolDetails);
            }
            if (data.volunteerDetails != null) {
                message.volunteerDetails = VolunteerDetails.fromObject(data.volunteerDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                userID?: number;
                name?: string;
                email?: string;
                userRole?: string;
                signUpDate?: string;
                profile?: ReturnType<typeof UserProfile.prototype.toObject>;
                studentDetails?: ReturnType<typeof StudentDetails.prototype.toObject>;
                schoolDetails?: ReturnType<typeof SchoolDetails.prototype.toObject>;
                volunteerDetails?: ReturnType<typeof VolunteerDetails.prototype.toObject>;
            } = {};
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.signUpDate != null) {
                data.signUpDate = this.signUpDate;
            }
            if (this.profile != null) {
                data.profile = this.profile.toObject();
            }
            if (this.studentDetails != null) {
                data.studentDetails = this.studentDetails.toObject();
            }
            if (this.schoolDetails != null) {
                data.schoolDetails = this.schoolDetails.toObject();
            }
            if (this.volunteerDetails != null) {
                data.volunteerDetails = this.volunteerDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userID != 0)
                writer.writeInt32(1, this.userID);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.userRole.length)
                writer.writeString(4, this.userRole);
            if (this.signUpDate.length)
                writer.writeString(5, this.signUpDate);
            if (this.has_profile)
                writer.writeMessage(6, this.profile, () => this.profile.serialize(writer));
            if (this.has_studentDetails)
                writer.writeMessage(7, this.studentDetails, () => this.studentDetails.serialize(writer));
            if (this.has_schoolDetails)
                writer.writeMessage(8, this.schoolDetails, () => this.schoolDetails.serialize(writer));
            if (this.has_volunteerDetails)
                writer.writeMessage(9, this.volunteerDetails, () => this.volunteerDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userID = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.userRole = reader.readString();
                        break;
                    case 5:
                        message.signUpDate = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.profile, () => message.profile = UserProfile.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.studentDetails, () => message.studentDetails = StudentDetails.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.schoolDetails, () => message.schoolDetails = SchoolDetails.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.volunteerDetails, () => message.volunteerDetails = VolunteerDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserDetails {
            return UserDetails.deserialize(bytes);
        }
    }
    export class UserProfile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("bio" in data && data.bio != undefined) {
                    this.bio = data.bio;
                }
                if ("profilePicture" in data && data.profilePicture != undefined) {
                    this.profilePicture = data.profilePicture;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get bio() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set bio(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get profilePicture() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set profilePicture(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
        }): UserProfile {
            const message = new UserProfile({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.bio != null) {
                message.bio = data.bio;
            }
            if (data.profilePicture != null) {
                message.profilePicture = data.profilePicture;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                phone?: string;
                bio?: string;
                profilePicture?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.bio != null) {
                data.bio = this.bio;
            }
            if (this.profilePicture != null) {
                data.profilePicture = this.profilePicture;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.phone.length)
                writer.writeString(2, this.phone);
            if (this.bio.length)
                writer.writeString(3, this.bio);
            if (this.profilePicture.length)
                writer.writeBytes(4, this.profilePicture);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserProfile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserProfile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.phone = reader.readString();
                        break;
                    case 3:
                        message.bio = reader.readString();
                        break;
                    case 4:
                        message.profilePicture = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserProfile {
            return UserProfile.deserialize(bytes);
        }
    }
    export class StudentDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            grade?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
                if ("schoolName" in data && data.schoolName != undefined) {
                    this.schoolName = data.schoolName;
                }
            }
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set grade(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get schoolName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set schoolName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            grade?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
        }): StudentDetails {
            const message = new StudentDetails({});
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            if (data.schoolName != null) {
                message.schoolName = data.schoolName;
            }
            return message;
        }
        toObject() {
            const data: {
                grade?: string;
                dateOfBirth?: string;
                schoolID?: number;
                schoolName?: string;
            } = {};
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            if (this.schoolName != null) {
                data.schoolName = this.schoolName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.grade.length)
                writer.writeString(1, this.grade);
            if (this.dateOfBirth.length)
                writer.writeString(2, this.dateOfBirth);
            if (this.schoolID != 0)
                writer.writeInt32(3, this.schoolID);
            if (this.schoolName.length)
                writer.writeString(4, this.schoolName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StudentDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StudentDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.grade = reader.readString();
                        break;
                    case 2:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 3:
                        message.schoolID = reader.readInt32();
                        break;
                    case 4:
                        message.schoolName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StudentDetails {
            return StudentDetails.deserialize(bytes);
        }
    }
    export class SchoolDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactPersonNumber?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("province" in data && data.province != undefined) {
                    this.province = data.province;
                }
                if ("district" in data && data.district != undefined) {
                    this.district = data.district;
                }
                if ("schoolType" in data && data.schoolType != undefined) {
                    this.schoolType = data.schoolType;
                }
                if ("contactPersonName" in data && data.contactPersonName != undefined) {
                    this.contactPersonName = data.contactPersonName;
                }
                if ("contactPersonNumber" in data && data.contactPersonNumber != undefined) {
                    this.contactPersonNumber = data.contactPersonNumber;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get province() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set province(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get district() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set district(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get schoolType() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set schoolType(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get contactPersonName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set contactPersonName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get contactPersonNumber() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set contactPersonNumber(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactPersonNumber?: string;
        }): SchoolDetails {
            const message = new SchoolDetails({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.province != null) {
                message.province = data.province;
            }
            if (data.district != null) {
                message.district = data.district;
            }
            if (data.schoolType != null) {
                message.schoolType = data.schoolType;
            }
            if (data.contactPersonName != null) {
                message.contactPersonName = data.contactPersonName;
            }
            if (data.contactPersonNumber != null) {
                message.contactPersonNumber = data.contactPersonNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                country?: string;
                province?: string;
                district?: string;
                schoolType?: string;
                contactPersonName?: string;
                contactPersonNumber?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.province != null) {
                data.province = this.province;
            }
            if (this.district != null) {
                data.district = this.district;
            }
            if (this.schoolType != null) {
                data.schoolType = this.schoolType;
            }
            if (this.contactPersonName != null) {
                data.contactPersonName = this.contactPersonName;
            }
            if (this.contactPersonNumber != null) {
                data.contactPersonNumber = this.contactPersonNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.country.length)
                writer.writeString(2, this.country);
            if (this.province.length)
                writer.writeString(3, this.province);
            if (this.district.length)
                writer.writeString(4, this.district);
            if (this.schoolType.length)
                writer.writeString(5, this.schoolType);
            if (this.contactPersonName.length)
                writer.writeString(6, this.contactPersonName);
            if (this.contactPersonNumber.length)
                writer.writeString(7, this.contactPersonNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchoolDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchoolDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.country = reader.readString();
                        break;
                    case 3:
                        message.province = reader.readString();
                        break;
                    case 4:
                        message.district = reader.readString();
                        break;
                    case 5:
                        message.schoolType = reader.readString();
                        break;
                    case 6:
                        message.contactPersonName = reader.readString();
                        break;
                    case 7:
                        message.contactPersonNumber = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchoolDetails {
            return SchoolDetails.deserialize(bytes);
        }
    }
    export class VolunteerDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dateOfBirth?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            safeguardingCertificate?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("graduationYear" in data && data.graduationYear != undefined) {
                    this.graduationYear = data.graduationYear;
                }
                if ("roleInterestedIn" in data && data.roleInterestedIn != undefined) {
                    this.roleInterestedIn = data.roleInterestedIn;
                }
                if ("safeguardingCertificate" in data && data.safeguardingCertificate != undefined) {
                    this.safeguardingCertificate = data.safeguardingCertificate;
                }
            }
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get graduationYear() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set graduationYear(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get roleInterestedIn() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set roleInterestedIn(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get safeguardingCertificate() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set safeguardingCertificate(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            dateOfBirth?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            safeguardingCertificate?: boolean;
        }): VolunteerDetails {
            const message = new VolunteerDetails({});
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.graduationYear != null) {
                message.graduationYear = data.graduationYear;
            }
            if (data.roleInterestedIn != null) {
                message.roleInterestedIn = data.roleInterestedIn;
            }
            if (data.safeguardingCertificate != null) {
                message.safeguardingCertificate = data.safeguardingCertificate;
            }
            return message;
        }
        toObject() {
            const data: {
                dateOfBirth?: string;
                graduationYear?: number;
                roleInterestedIn?: string;
                safeguardingCertificate?: boolean;
            } = {};
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.graduationYear != null) {
                data.graduationYear = this.graduationYear;
            }
            if (this.roleInterestedIn != null) {
                data.roleInterestedIn = this.roleInterestedIn;
            }
            if (this.safeguardingCertificate != null) {
                data.safeguardingCertificate = this.safeguardingCertificate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dateOfBirth.length)
                writer.writeString(1, this.dateOfBirth);
            if (this.graduationYear != 0)
                writer.writeInt32(2, this.graduationYear);
            if (this.roleInterestedIn.length)
                writer.writeString(3, this.roleInterestedIn);
            if (this.safeguardingCertificate != false)
                writer.writeBool(4, this.safeguardingCertificate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VolunteerDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VolunteerDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 2:
                        message.graduationYear = reader.readInt32();
                        break;
                    case 3:
                        message.roleInterestedIn = reader.readString();
                        break;
                    case 4:
                        message.safeguardingCertificate = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VolunteerDetails {
            return VolunteerDetails.deserialize(bytes);
        }
    }
    export class ApproveUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): ApproveUserRequest {
            const message = new ApproveUserRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApproveUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApproveUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApproveUserRequest {
            return ApproveUserRequest.deserialize(bytes);
        }
    }
    export class ApproveUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): ApproveUserResponse {
            const message = new ApproveUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApproveUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApproveUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApproveUserResponse {
            return ApproveUserResponse.deserialize(bytes);
        }
    }
    export class RejectUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): RejectUserRequest {
            const message = new RejectUserRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RejectUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RejectUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RejectUserRequest {
            return RejectUserRequest.deserialize(bytes);
        }
    }
    export class RejectUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): RejectUserResponse {
            const message = new RejectUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RejectUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RejectUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RejectUserResponse {
            return RejectUserResponse.deserialize(bytes);
        }
    }
    export class UpdateUserProfileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
            name?: string;
            email?: string;
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("bio" in data && data.bio != undefined) {
                    this.bio = data.bio;
                }
                if ("profilePicture" in data && data.profilePicture != undefined) {
                    this.profilePicture = data.profilePicture;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get bio() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set bio(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get profilePicture() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set profilePicture(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
            name?: string;
            email?: string;
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
        }): UpdateUserProfileRequest {
            const message = new UpdateUserProfileRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.bio != null) {
                message.bio = data.bio;
            }
            if (data.profilePicture != null) {
                message.profilePicture = data.profilePicture;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
                name?: string;
                email?: string;
                address?: string;
                phone?: string;
                bio?: string;
                profilePicture?: Uint8Array;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.bio != null) {
                data.bio = this.bio;
            }
            if (this.profilePicture != null) {
                data.profilePicture = this.profilePicture;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (this.address.length)
                writer.writeString(5, this.address);
            if (this.phone.length)
                writer.writeString(6, this.phone);
            if (this.bio.length)
                writer.writeString(7, this.bio);
            if (this.profilePicture.length)
                writer.writeBytes(8, this.profilePicture);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.address = reader.readString();
                        break;
                    case 6:
                        message.phone = reader.readString();
                        break;
                    case 7:
                        message.bio = reader.readString();
                        break;
                    case 8:
                        message.profilePicture = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserProfileRequest {
            return UpdateUserProfileRequest.deserialize(bytes);
        }
    }
    export class UpdateUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): UpdateUserProfileResponse {
            const message = new UpdateUserProfileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserProfileResponse {
            return UpdateUserProfileResponse.deserialize(bytes);
        }
    }
    export class DeleteUserProfileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): DeleteUserProfileRequest {
            const message = new DeleteUserProfileRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserProfileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserProfileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserProfileRequest {
            return DeleteUserProfileRequest.deserialize(bytes);
        }
    }
    export class DeleteUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteUserProfileResponse {
            const message = new DeleteUserProfileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserProfileResponse {
            return DeleteUserProfileResponse.deserialize(bytes);
        }
    }
    export class DeactivateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): DeactivateAccountRequest {
            const message = new DeactivateAccountRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeactivateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeactivateAccountRequest {
            return DeactivateAccountRequest.deserialize(bytes);
        }
    }
    export class DeactivateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeactivateAccountResponse {
            const message = new DeactivateAccountResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeactivateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeactivateAccountResponse {
            return DeactivateAccountResponse.deserialize(bytes);
        }
    }
    export class ReactivateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): ReactivateAccountRequest {
            const message = new ReactivateAccountRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReactivateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReactivateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReactivateAccountRequest {
            return ReactivateAccountRequest.deserialize(bytes);
        }
    }
    export class ReactivateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): ReactivateAccountResponse {
            const message = new ReactivateAccountResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReactivateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReactivateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReactivateAccountResponse {
            return ReactivateAccountResponse.deserialize(bytes);
        }
    }
    export class GetAccountStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): GetAccountStatusRequest {
            const message = new GetAccountStatusRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountStatusRequest {
            return GetAccountStatusRequest.deserialize(bytes);
        }
    }
    export class GetAccountStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): GetAccountStatusResponse {
            const message = new GetAccountStatusResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountStatusResponse {
            return GetAccountStatusResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserManagementServiceService {
        static definition = {
            GetPendingUsers: {
                path: "/user_management.UserManagementService/GetPendingUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPendingUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPendingUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPendingUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPendingUsersResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserDetails: {
                path: "/user_management.UserManagementService/GetUserDetails",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserDetailsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserDetailsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserDetailsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserDetailsResponse.deserialize(new Uint8Array(bytes))
            },
            ApproveUser: {
                path: "/user_management.UserManagementService/ApproveUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ApproveUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ApproveUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ApproveUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ApproveUserResponse.deserialize(new Uint8Array(bytes))
            },
            RejectUser: {
                path: "/user_management.UserManagementService/RejectUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RejectUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RejectUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RejectUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RejectUserResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUserProfile: {
                path: "/user_management.UserManagementService/UpdateUserProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserProfileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserProfileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserProfileResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserProfileResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUserProfile: {
                path: "/user_management.UserManagementService/DeleteUserProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserProfileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserProfileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUserProfileResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUserProfileResponse.deserialize(new Uint8Array(bytes))
            },
            DeactivateAccount: {
                path: "/user_management.UserManagementService/DeactivateAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeactivateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeactivateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeactivateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeactivateAccountResponse.deserialize(new Uint8Array(bytes))
            },
            ReactivateAccount: {
                path: "/user_management.UserManagementService/ReactivateAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReactivateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReactivateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReactivateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReactivateAccountResponse.deserialize(new Uint8Array(bytes))
            },
            GetAccountStatus: {
                path: "/user_management.UserManagementService/GetAccountStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAccountStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAccountStatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetPendingUsers(call: grpc_1.ServerUnaryCall<GetPendingUsersRequest, GetPendingUsersResponse>, callback: grpc_1.sendUnaryData<GetPendingUsersResponse>): void;
        abstract GetUserDetails(call: grpc_1.ServerUnaryCall<GetUserDetailsRequest, GetUserDetailsResponse>, callback: grpc_1.sendUnaryData<GetUserDetailsResponse>): void;
        abstract ApproveUser(call: grpc_1.ServerUnaryCall<ApproveUserRequest, ApproveUserResponse>, callback: grpc_1.sendUnaryData<ApproveUserResponse>): void;
        abstract RejectUser(call: grpc_1.ServerUnaryCall<RejectUserRequest, RejectUserResponse>, callback: grpc_1.sendUnaryData<RejectUserResponse>): void;
        abstract UpdateUserProfile(call: grpc_1.ServerUnaryCall<UpdateUserProfileRequest, UpdateUserProfileResponse>, callback: grpc_1.sendUnaryData<UpdateUserProfileResponse>): void;
        abstract DeleteUserProfile(call: grpc_1.ServerUnaryCall<DeleteUserProfileRequest, DeleteUserProfileResponse>, callback: grpc_1.sendUnaryData<DeleteUserProfileResponse>): void;
        abstract DeactivateAccount(call: grpc_1.ServerUnaryCall<DeactivateAccountRequest, DeactivateAccountResponse>, callback: grpc_1.sendUnaryData<DeactivateAccountResponse>): void;
        abstract ReactivateAccount(call: grpc_1.ServerUnaryCall<ReactivateAccountRequest, ReactivateAccountResponse>, callback: grpc_1.sendUnaryData<ReactivateAccountResponse>): void;
        abstract GetAccountStatus(call: grpc_1.ServerUnaryCall<GetAccountStatusRequest, GetAccountStatusResponse>, callback: grpc_1.sendUnaryData<GetAccountStatusResponse>): void;
    }
    export class UserManagementServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserManagementServiceService.definition, "UserManagementService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetPendingUsers: GrpcUnaryServiceInterface<GetPendingUsersRequest, GetPendingUsersResponse> = (message: GetPendingUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPendingUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPendingUsersResponse>, callback?: grpc_1.requestCallback<GetPendingUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPendingUsers(message, metadata, options, callback);
        };
        GetUserDetails: GrpcUnaryServiceInterface<GetUserDetailsRequest, GetUserDetailsResponse> = (message: GetUserDetailsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserDetailsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserDetailsResponse>, callback?: grpc_1.requestCallback<GetUserDetailsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUserDetails(message, metadata, options, callback);
        };
        ApproveUser: GrpcUnaryServiceInterface<ApproveUserRequest, ApproveUserResponse> = (message: ApproveUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ApproveUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ApproveUserResponse>, callback?: grpc_1.requestCallback<ApproveUserResponse>): grpc_1.ClientUnaryCall => {
            return super.ApproveUser(message, metadata, options, callback);
        };
        RejectUser: GrpcUnaryServiceInterface<RejectUserRequest, RejectUserResponse> = (message: RejectUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RejectUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RejectUserResponse>, callback?: grpc_1.requestCallback<RejectUserResponse>): grpc_1.ClientUnaryCall => {
            return super.RejectUser(message, metadata, options, callback);
        };
        UpdateUserProfile: GrpcUnaryServiceInterface<UpdateUserProfileRequest, UpdateUserProfileResponse> = (message: UpdateUserProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserProfileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserProfileResponse>, callback?: grpc_1.requestCallback<UpdateUserProfileResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserProfile(message, metadata, options, callback);
        };
        DeleteUserProfile: GrpcUnaryServiceInterface<DeleteUserProfileRequest, DeleteUserProfileResponse> = (message: DeleteUserProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserProfileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserProfileResponse>, callback?: grpc_1.requestCallback<DeleteUserProfileResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUserProfile(message, metadata, options, callback);
        };
        DeactivateAccount: GrpcUnaryServiceInterface<DeactivateAccountRequest, DeactivateAccountResponse> = (message: DeactivateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeactivateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeactivateAccountResponse>, callback?: grpc_1.requestCallback<DeactivateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.DeactivateAccount(message, metadata, options, callback);
        };
        ReactivateAccount: GrpcUnaryServiceInterface<ReactivateAccountRequest, ReactivateAccountResponse> = (message: ReactivateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReactivateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReactivateAccountResponse>, callback?: grpc_1.requestCallback<ReactivateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.ReactivateAccount(message, metadata, options, callback);
        };
        GetAccountStatus: GrpcUnaryServiceInterface<GetAccountStatusRequest, GetAccountStatusResponse> = (message: GetAccountStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAccountStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAccountStatusResponse>, callback?: grpc_1.requestCallback<GetAccountStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountStatus(message, metadata, options, callback);
        };
    }
}
