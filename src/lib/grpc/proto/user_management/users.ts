/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: user_management/users.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace user_management {
    export class GetPendingUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetPendingUsersRequest {
            const message = new GetPendingUsersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPendingUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPendingUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPendingUsersRequest {
            return GetPendingUsersRequest.deserialize(bytes);
        }
    }
    export class GetPendingUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: UserSummary[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, UserSummary, 1) as UserSummary[];
        }
        set users(value: UserSummary[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof UserSummary.prototype.toObject>[];
        }): GetPendingUsersResponse {
            const message = new GetPendingUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => UserSummary.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof UserSummary.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: UserSummary) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: UserSummary) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPendingUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPendingUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserSummary.deserialize(reader), UserSummary));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPendingUsersResponse {
            return GetPendingUsersResponse.deserialize(bytes);
        }
    }
    export class GetAllUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            page?: number;
            pageSize?: number;
        }): GetAllUsersRequest {
            const message = new GetAllUsersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllUsersRequest {
            return GetAllUsersRequest.deserialize(bytes);
        }
    }
    export class GetAllUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: UserSummary[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, UserSummary, 1) as UserSummary[];
        }
        set users(value: UserSummary[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof UserSummary.prototype.toObject>[];
            totalCount?: number;
        }): GetAllUsersResponse {
            const message = new GetAllUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => UserSummary.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof UserSummary.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: UserSummary) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: UserSummary) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeInt32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserSummary.deserialize(reader), UserSummary));
                        break;
                    case 2:
                        message.totalCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllUsersResponse {
            return GetAllUsersResponse.deserialize(bytes);
        }
    }
    export class UserSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            signUpDate?: string;
            gender?: string;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("signUpDate" in data && data.signUpDate != undefined) {
                    this.signUpDate = data.signUpDate;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get signUpDate() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set signUpDate(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            signUpDate?: string;
            gender?: string;
            status?: string;
        }): UserSummary {
            const message = new UserSummary({});
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.signUpDate != null) {
                message.signUpDate = data.signUpDate;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                userID?: number;
                name?: string;
                email?: string;
                userRole?: string;
                signUpDate?: string;
                gender?: string;
                status?: string;
            } = {};
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.signUpDate != null) {
                data.signUpDate = this.signUpDate;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userID != 0)
                writer.writeInt32(1, this.userID);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.userRole.length)
                writer.writeString(4, this.userRole);
            if (this.signUpDate.length)
                writer.writeString(5, this.signUpDate);
            if (this.gender.length)
                writer.writeString(6, this.gender);
            if (this.status.length)
                writer.writeString(7, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userID = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.userRole = reader.readString();
                        break;
                    case 5:
                        message.signUpDate = reader.readString();
                        break;
                    case 6:
                        message.gender = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserSummary {
            return UserSummary.deserialize(bytes);
        }
    }
    export class UserProfile extends pb_1.Message {
        #one_of_decls: number[][] = [[14, 15, 16]];
        constructor(data?: any[] | ({
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            gender?: string;
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
            verificationStatus?: boolean;
            signUpDate?: string;
            twoFactorEnabled?: boolean;
            biometricAuthEnabled?: boolean;
        } & (({
            studentDetails?: StudentDetails;
            schoolDetails?: never;
            volunteerDetails?: never;
        } | {
            studentDetails?: never;
            schoolDetails?: SchoolDetails;
            volunteerDetails?: never;
        } | {
            studentDetails?: never;
            schoolDetails?: never;
            volunteerDetails?: VolunteerDetails;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("bio" in data && data.bio != undefined) {
                    this.bio = data.bio;
                }
                if ("profilePicture" in data && data.profilePicture != undefined) {
                    this.profilePicture = data.profilePicture;
                }
                if ("verificationStatus" in data && data.verificationStatus != undefined) {
                    this.verificationStatus = data.verificationStatus;
                }
                if ("signUpDate" in data && data.signUpDate != undefined) {
                    this.signUpDate = data.signUpDate;
                }
                if ("twoFactorEnabled" in data && data.twoFactorEnabled != undefined) {
                    this.twoFactorEnabled = data.twoFactorEnabled;
                }
                if ("biometricAuthEnabled" in data && data.biometricAuthEnabled != undefined) {
                    this.biometricAuthEnabled = data.biometricAuthEnabled;
                }
                if ("studentDetails" in data && data.studentDetails != undefined) {
                    this.studentDetails = data.studentDetails;
                }
                if ("schoolDetails" in data && data.schoolDetails != undefined) {
                    this.schoolDetails = data.schoolDetails;
                }
                if ("volunteerDetails" in data && data.volunteerDetails != undefined) {
                    this.volunteerDetails = data.volunteerDetails;
                }
            }
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get bio() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set bio(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get profilePicture() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set profilePicture(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get verificationStatus() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set verificationStatus(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get signUpDate() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set signUpDate(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get twoFactorEnabled() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set twoFactorEnabled(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get biometricAuthEnabled() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set biometricAuthEnabled(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get studentDetails() {
            return pb_1.Message.getWrapperField(this, StudentDetails, 14) as StudentDetails;
        }
        set studentDetails(value: StudentDetails) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_studentDetails() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get schoolDetails() {
            return pb_1.Message.getWrapperField(this, SchoolDetails, 15) as SchoolDetails;
        }
        set schoolDetails(value: SchoolDetails) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_schoolDetails() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get volunteerDetails() {
            return pb_1.Message.getWrapperField(this, VolunteerDetails, 16) as VolunteerDetails;
        }
        set volunteerDetails(value: VolunteerDetails) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_volunteerDetails() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get role_specific_details() {
            const cases: {
                [index: number]: "none" | "studentDetails" | "schoolDetails" | "volunteerDetails";
            } = {
                0: "none",
                14: "studentDetails",
                15: "schoolDetails",
                16: "volunteerDetails"
            };
            return cases[pb_1.Message.computeOneofCase(this, [14, 15, 16])];
        }
        static fromObject(data: {
            userID?: number;
            name?: string;
            email?: string;
            userRole?: string;
            gender?: string;
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
            verificationStatus?: boolean;
            signUpDate?: string;
            twoFactorEnabled?: boolean;
            biometricAuthEnabled?: boolean;
            studentDetails?: ReturnType<typeof StudentDetails.prototype.toObject>;
            schoolDetails?: ReturnType<typeof SchoolDetails.prototype.toObject>;
            volunteerDetails?: ReturnType<typeof VolunteerDetails.prototype.toObject>;
        }): UserProfile {
            const message = new UserProfile({});
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.bio != null) {
                message.bio = data.bio;
            }
            if (data.profilePicture != null) {
                message.profilePicture = data.profilePicture;
            }
            if (data.verificationStatus != null) {
                message.verificationStatus = data.verificationStatus;
            }
            if (data.signUpDate != null) {
                message.signUpDate = data.signUpDate;
            }
            if (data.twoFactorEnabled != null) {
                message.twoFactorEnabled = data.twoFactorEnabled;
            }
            if (data.biometricAuthEnabled != null) {
                message.biometricAuthEnabled = data.biometricAuthEnabled;
            }
            if (data.studentDetails != null) {
                message.studentDetails = StudentDetails.fromObject(data.studentDetails);
            }
            if (data.schoolDetails != null) {
                message.schoolDetails = SchoolDetails.fromObject(data.schoolDetails);
            }
            if (data.volunteerDetails != null) {
                message.volunteerDetails = VolunteerDetails.fromObject(data.volunteerDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                userID?: number;
                name?: string;
                email?: string;
                userRole?: string;
                gender?: string;
                address?: string;
                phone?: string;
                bio?: string;
                profilePicture?: Uint8Array;
                verificationStatus?: boolean;
                signUpDate?: string;
                twoFactorEnabled?: boolean;
                biometricAuthEnabled?: boolean;
                studentDetails?: ReturnType<typeof StudentDetails.prototype.toObject>;
                schoolDetails?: ReturnType<typeof SchoolDetails.prototype.toObject>;
                volunteerDetails?: ReturnType<typeof VolunteerDetails.prototype.toObject>;
            } = {};
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.bio != null) {
                data.bio = this.bio;
            }
            if (this.profilePicture != null) {
                data.profilePicture = this.profilePicture;
            }
            if (this.verificationStatus != null) {
                data.verificationStatus = this.verificationStatus;
            }
            if (this.signUpDate != null) {
                data.signUpDate = this.signUpDate;
            }
            if (this.twoFactorEnabled != null) {
                data.twoFactorEnabled = this.twoFactorEnabled;
            }
            if (this.biometricAuthEnabled != null) {
                data.biometricAuthEnabled = this.biometricAuthEnabled;
            }
            if (this.studentDetails != null) {
                data.studentDetails = this.studentDetails.toObject();
            }
            if (this.schoolDetails != null) {
                data.schoolDetails = this.schoolDetails.toObject();
            }
            if (this.volunteerDetails != null) {
                data.volunteerDetails = this.volunteerDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userID != 0)
                writer.writeInt32(1, this.userID);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.userRole.length)
                writer.writeString(4, this.userRole);
            if (this.gender.length)
                writer.writeString(5, this.gender);
            if (this.address.length)
                writer.writeString(6, this.address);
            if (this.phone.length)
                writer.writeString(7, this.phone);
            if (this.bio.length)
                writer.writeString(8, this.bio);
            if (this.profilePicture.length)
                writer.writeBytes(9, this.profilePicture);
            if (this.verificationStatus != false)
                writer.writeBool(10, this.verificationStatus);
            if (this.signUpDate.length)
                writer.writeString(11, this.signUpDate);
            if (this.twoFactorEnabled != false)
                writer.writeBool(12, this.twoFactorEnabled);
            if (this.biometricAuthEnabled != false)
                writer.writeBool(13, this.biometricAuthEnabled);
            if (this.has_studentDetails)
                writer.writeMessage(14, this.studentDetails, () => this.studentDetails.serialize(writer));
            if (this.has_schoolDetails)
                writer.writeMessage(15, this.schoolDetails, () => this.schoolDetails.serialize(writer));
            if (this.has_volunteerDetails)
                writer.writeMessage(16, this.volunteerDetails, () => this.volunteerDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserProfile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserProfile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userID = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.userRole = reader.readString();
                        break;
                    case 5:
                        message.gender = reader.readString();
                        break;
                    case 6:
                        message.address = reader.readString();
                        break;
                    case 7:
                        message.phone = reader.readString();
                        break;
                    case 8:
                        message.bio = reader.readString();
                        break;
                    case 9:
                        message.profilePicture = reader.readBytes();
                        break;
                    case 10:
                        message.verificationStatus = reader.readBool();
                        break;
                    case 11:
                        message.signUpDate = reader.readString();
                        break;
                    case 12:
                        message.twoFactorEnabled = reader.readBool();
                        break;
                    case 13:
                        message.biometricAuthEnabled = reader.readBool();
                        break;
                    case 14:
                        reader.readMessage(message.studentDetails, () => message.studentDetails = StudentDetails.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.schoolDetails, () => message.schoolDetails = SchoolDetails.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.volunteerDetails, () => message.volunteerDetails = VolunteerDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserProfile {
            return UserProfile.deserialize(bytes);
        }
    }
    export class StudentDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            grade?: string;
            dateOfBirth?: string;
            schoolID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
            }
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set grade(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            grade?: string;
            dateOfBirth?: string;
            schoolID?: number;
        }): StudentDetails {
            const message = new StudentDetails({});
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            return message;
        }
        toObject() {
            const data: {
                grade?: string;
                dateOfBirth?: string;
                schoolID?: number;
            } = {};
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.grade.length)
                writer.writeString(1, this.grade);
            if (this.dateOfBirth.length)
                writer.writeString(2, this.dateOfBirth);
            if (this.schoolID != 0)
                writer.writeInt32(3, this.schoolID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StudentDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StudentDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.grade = reader.readString();
                        break;
                    case 2:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 3:
                        message.schoolID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StudentDetails {
            return StudentDetails.deserialize(bytes);
        }
    }
    export class SchoolDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schoolName?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schoolName" in data && data.schoolName != undefined) {
                    this.schoolName = data.schoolName;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("province" in data && data.province != undefined) {
                    this.province = data.province;
                }
                if ("district" in data && data.district != undefined) {
                    this.district = data.district;
                }
                if ("schoolType" in data && data.schoolType != undefined) {
                    this.schoolType = data.schoolType;
                }
            }
        }
        get schoolName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schoolName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get province() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set province(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get district() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set district(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get schoolType() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set schoolType(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            schoolName?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
        }): SchoolDetails {
            const message = new SchoolDetails({});
            if (data.schoolName != null) {
                message.schoolName = data.schoolName;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.province != null) {
                message.province = data.province;
            }
            if (data.district != null) {
                message.district = data.district;
            }
            if (data.schoolType != null) {
                message.schoolType = data.schoolType;
            }
            return message;
        }
        toObject() {
            const data: {
                schoolName?: string;
                address?: string;
                country?: string;
                province?: string;
                district?: string;
                schoolType?: string;
            } = {};
            if (this.schoolName != null) {
                data.schoolName = this.schoolName;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.province != null) {
                data.province = this.province;
            }
            if (this.district != null) {
                data.district = this.district;
            }
            if (this.schoolType != null) {
                data.schoolType = this.schoolType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schoolName.length)
                writer.writeString(1, this.schoolName);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (this.country.length)
                writer.writeString(3, this.country);
            if (this.province.length)
                writer.writeString(4, this.province);
            if (this.district.length)
                writer.writeString(5, this.district);
            if (this.schoolType.length)
                writer.writeString(6, this.schoolType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchoolDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchoolDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schoolName = reader.readString();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    case 3:
                        message.country = reader.readString();
                        break;
                    case 4:
                        message.province = reader.readString();
                        break;
                    case 5:
                        message.district = reader.readString();
                        break;
                    case 6:
                        message.schoolType = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchoolDetails {
            return SchoolDetails.deserialize(bytes);
        }
    }
    export class VolunteerDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: string;
            graduateYear?: number;
            safeGuardCertificate?: Uint8Array;
            hasInternship?: boolean;
            isEnrolledInUniversity?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("graduateYear" in data && data.graduateYear != undefined) {
                    this.graduateYear = data.graduateYear;
                }
                if ("safeGuardCertificate" in data && data.safeGuardCertificate != undefined) {
                    this.safeGuardCertificate = data.safeGuardCertificate;
                }
                if ("hasInternship" in data && data.hasInternship != undefined) {
                    this.hasInternship = data.hasInternship;
                }
                if ("isEnrolledInUniversity" in data && data.isEnrolledInUniversity != undefined) {
                    this.isEnrolledInUniversity = data.isEnrolledInUniversity;
                }
            }
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get graduateYear() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set graduateYear(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get safeGuardCertificate() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set safeGuardCertificate(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasInternship() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set hasInternship(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get isEnrolledInUniversity() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set isEnrolledInUniversity(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            role?: string;
            graduateYear?: number;
            safeGuardCertificate?: Uint8Array;
            hasInternship?: boolean;
            isEnrolledInUniversity?: boolean;
        }): VolunteerDetails {
            const message = new VolunteerDetails({});
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.graduateYear != null) {
                message.graduateYear = data.graduateYear;
            }
            if (data.safeGuardCertificate != null) {
                message.safeGuardCertificate = data.safeGuardCertificate;
            }
            if (data.hasInternship != null) {
                message.hasInternship = data.hasInternship;
            }
            if (data.isEnrolledInUniversity != null) {
                message.isEnrolledInUniversity = data.isEnrolledInUniversity;
            }
            return message;
        }
        toObject() {
            const data: {
                role?: string;
                graduateYear?: number;
                safeGuardCertificate?: Uint8Array;
                hasInternship?: boolean;
                isEnrolledInUniversity?: boolean;
            } = {};
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.graduateYear != null) {
                data.graduateYear = this.graduateYear;
            }
            if (this.safeGuardCertificate != null) {
                data.safeGuardCertificate = this.safeGuardCertificate;
            }
            if (this.hasInternship != null) {
                data.hasInternship = this.hasInternship;
            }
            if (this.isEnrolledInUniversity != null) {
                data.isEnrolledInUniversity = this.isEnrolledInUniversity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role.length)
                writer.writeString(1, this.role);
            if (this.graduateYear != 0)
                writer.writeInt32(2, this.graduateYear);
            if (this.safeGuardCertificate.length)
                writer.writeBytes(3, this.safeGuardCertificate);
            if (this.hasInternship != false)
                writer.writeBool(4, this.hasInternship);
            if (this.isEnrolledInUniversity != false)
                writer.writeBool(5, this.isEnrolledInUniversity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VolunteerDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VolunteerDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role = reader.readString();
                        break;
                    case 2:
                        message.graduateYear = reader.readInt32();
                        break;
                    case 3:
                        message.safeGuardCertificate = reader.readBytes();
                        break;
                    case 4:
                        message.hasInternship = reader.readBool();
                        break;
                    case 5:
                        message.isEnrolledInUniversity = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VolunteerDetails {
            return VolunteerDetails.deserialize(bytes);
        }
    }
    export class ApproveUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): ApproveUserRequest {
            const message = new ApproveUserRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApproveUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApproveUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApproveUserRequest {
            return ApproveUserRequest.deserialize(bytes);
        }
    }
    export class ApproveUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): ApproveUserResponse {
            const message = new ApproveUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApproveUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApproveUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApproveUserResponse {
            return ApproveUserResponse.deserialize(bytes);
        }
    }
    export class RejectUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): RejectUserRequest {
            const message = new RejectUserRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RejectUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RejectUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RejectUserRequest {
            return RejectUserRequest.deserialize(bytes);
        }
    }
    export class RejectUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): RejectUserResponse {
            const message = new RejectUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RejectUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RejectUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RejectUserResponse {
            return RejectUserResponse.deserialize(bytes);
        }
    }
    export class ApproveUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userIDs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userIDs" in data && data.userIDs != undefined) {
                    this.userIDs = data.userIDs;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userIDs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set userIDs(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userIDs?: number[];
        }): ApproveUsersRequest {
            const message = new ApproveUsersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userIDs != null) {
                message.userIDs = data.userIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userIDs?: number[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userIDs != null) {
                data.userIDs = this.userIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userIDs.length)
                writer.writePackedInt32(2, this.userIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApproveUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApproveUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userIDs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApproveUsersRequest {
            return ApproveUsersRequest.deserialize(bytes);
        }
    }
    export class ApproveUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            failedUserIDs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("failedUserIDs" in data && data.failedUserIDs != undefined) {
                    this.failedUserIDs = data.failedUserIDs;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get failedUserIDs() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set failedUserIDs(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            failedUserIDs?: number[];
        }): ApproveUsersResponse {
            const message = new ApproveUsersResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.failedUserIDs != null) {
                message.failedUserIDs = data.failedUserIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                failedUserIDs?: number[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.failedUserIDs != null) {
                data.failedUserIDs = this.failedUserIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.failedUserIDs.length)
                writer.writePackedInt32(3, this.failedUserIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApproveUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApproveUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.failedUserIDs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApproveUsersResponse {
            return ApproveUsersResponse.deserialize(bytes);
        }
    }
    export class RejectUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userIDs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userIDs" in data && data.userIDs != undefined) {
                    this.userIDs = data.userIDs;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userIDs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set userIDs(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userIDs?: number[];
        }): RejectUsersRequest {
            const message = new RejectUsersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userIDs != null) {
                message.userIDs = data.userIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userIDs?: number[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userIDs != null) {
                data.userIDs = this.userIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userIDs.length)
                writer.writePackedInt32(2, this.userIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RejectUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RejectUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userIDs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RejectUsersRequest {
            return RejectUsersRequest.deserialize(bytes);
        }
    }
    export class RejectUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            failedUserIDs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("failedUserIDs" in data && data.failedUserIDs != undefined) {
                    this.failedUserIDs = data.failedUserIDs;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get failedUserIDs() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set failedUserIDs(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            failedUserIDs?: number[];
        }): RejectUsersResponse {
            const message = new RejectUsersResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.failedUserIDs != null) {
                message.failedUserIDs = data.failedUserIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                failedUserIDs?: number[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.failedUserIDs != null) {
                data.failedUserIDs = this.failedUserIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.failedUserIDs.length)
                writer.writePackedInt32(3, this.failedUserIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RejectUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RejectUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.failedUserIDs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RejectUsersResponse {
            return RejectUsersResponse.deserialize(bytes);
        }
    }
    export class DeleteUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userIDs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userIDs" in data && data.userIDs != undefined) {
                    this.userIDs = data.userIDs;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userIDs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set userIDs(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userIDs?: number[];
        }): DeleteUsersRequest {
            const message = new DeleteUsersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userIDs != null) {
                message.userIDs = data.userIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userIDs?: number[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userIDs != null) {
                data.userIDs = this.userIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userIDs.length)
                writer.writePackedInt32(2, this.userIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userIDs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUsersRequest {
            return DeleteUsersRequest.deserialize(bytes);
        }
    }
    export class DeleteUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            failedUserIDs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("failedUserIDs" in data && data.failedUserIDs != undefined) {
                    this.failedUserIDs = data.failedUserIDs;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get failedUserIDs() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set failedUserIDs(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            failedUserIDs?: number[];
        }): DeleteUsersResponse {
            const message = new DeleteUsersResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.failedUserIDs != null) {
                message.failedUserIDs = data.failedUserIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                failedUserIDs?: number[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.failedUserIDs != null) {
                data.failedUserIDs = this.failedUserIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.failedUserIDs.length)
                writer.writePackedInt32(3, this.failedUserIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.failedUserIDs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUsersResponse {
            return DeleteUsersResponse.deserialize(bytes);
        }
    }
    export class GetUserProfileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): GetUserProfileRequest {
            const message = new GetUserProfileRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserProfileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserProfileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserProfileRequest {
            return GetUserProfileRequest.deserialize(bytes);
        }
    }
    export class GetUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            profile?: UserProfile;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("profile" in data && data.profile != undefined) {
                    this.profile = data.profile;
                }
            }
        }
        get profile() {
            return pb_1.Message.getWrapperField(this, UserProfile, 1) as UserProfile;
        }
        set profile(value: UserProfile) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_profile() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            profile?: ReturnType<typeof UserProfile.prototype.toObject>;
        }): GetUserProfileResponse {
            const message = new GetUserProfileResponse({});
            if (data.profile != null) {
                message.profile = UserProfile.fromObject(data.profile);
            }
            return message;
        }
        toObject() {
            const data: {
                profile?: ReturnType<typeof UserProfile.prototype.toObject>;
            } = {};
            if (this.profile != null) {
                data.profile = this.profile.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_profile)
                writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.profile, () => message.profile = UserProfile.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserProfileResponse {
            return GetUserProfileResponse.deserialize(bytes);
        }
    }
    export class UpdateUserProfileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12]];
        constructor(data?: any[] | ({
            token?: string;
            userID?: number;
            name?: string;
            email?: string;
            gender?: string;
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
        } & (({
            studentDetails?: StudentDetails;
            schoolDetails?: never;
            volunteerDetails?: never;
        } | {
            studentDetails?: never;
            schoolDetails?: SchoolDetails;
            volunteerDetails?: never;
        } | {
            studentDetails?: never;
            schoolDetails?: never;
            volunteerDetails?: VolunteerDetails;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("bio" in data && data.bio != undefined) {
                    this.bio = data.bio;
                }
                if ("profilePicture" in data && data.profilePicture != undefined) {
                    this.profilePicture = data.profilePicture;
                }
                if ("studentDetails" in data && data.studentDetails != undefined) {
                    this.studentDetails = data.studentDetails;
                }
                if ("schoolDetails" in data && data.schoolDetails != undefined) {
                    this.schoolDetails = data.schoolDetails;
                }
                if ("volunteerDetails" in data && data.volunteerDetails != undefined) {
                    this.volunteerDetails = data.volunteerDetails;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get bio() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set bio(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get profilePicture() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set profilePicture(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get studentDetails() {
            return pb_1.Message.getWrapperField(this, StudentDetails, 10) as StudentDetails;
        }
        set studentDetails(value: StudentDetails) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_studentDetails() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get schoolDetails() {
            return pb_1.Message.getWrapperField(this, SchoolDetails, 11) as SchoolDetails;
        }
        set schoolDetails(value: SchoolDetails) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_schoolDetails() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get volunteerDetails() {
            return pb_1.Message.getWrapperField(this, VolunteerDetails, 12) as VolunteerDetails;
        }
        set volunteerDetails(value: VolunteerDetails) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_volunteerDetails() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get role_specific_details() {
            const cases: {
                [index: number]: "none" | "studentDetails" | "schoolDetails" | "volunteerDetails";
            } = {
                0: "none",
                10: "studentDetails",
                11: "schoolDetails",
                12: "volunteerDetails"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12])];
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
            name?: string;
            email?: string;
            gender?: string;
            address?: string;
            phone?: string;
            bio?: string;
            profilePicture?: Uint8Array;
            studentDetails?: ReturnType<typeof StudentDetails.prototype.toObject>;
            schoolDetails?: ReturnType<typeof SchoolDetails.prototype.toObject>;
            volunteerDetails?: ReturnType<typeof VolunteerDetails.prototype.toObject>;
        }): UpdateUserProfileRequest {
            const message = new UpdateUserProfileRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.bio != null) {
                message.bio = data.bio;
            }
            if (data.profilePicture != null) {
                message.profilePicture = data.profilePicture;
            }
            if (data.studentDetails != null) {
                message.studentDetails = StudentDetails.fromObject(data.studentDetails);
            }
            if (data.schoolDetails != null) {
                message.schoolDetails = SchoolDetails.fromObject(data.schoolDetails);
            }
            if (data.volunteerDetails != null) {
                message.volunteerDetails = VolunteerDetails.fromObject(data.volunteerDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
                name?: string;
                email?: string;
                gender?: string;
                address?: string;
                phone?: string;
                bio?: string;
                profilePicture?: Uint8Array;
                studentDetails?: ReturnType<typeof StudentDetails.prototype.toObject>;
                schoolDetails?: ReturnType<typeof SchoolDetails.prototype.toObject>;
                volunteerDetails?: ReturnType<typeof VolunteerDetails.prototype.toObject>;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.bio != null) {
                data.bio = this.bio;
            }
            if (this.profilePicture != null) {
                data.profilePicture = this.profilePicture;
            }
            if (this.studentDetails != null) {
                data.studentDetails = this.studentDetails.toObject();
            }
            if (this.schoolDetails != null) {
                data.schoolDetails = this.schoolDetails.toObject();
            }
            if (this.volunteerDetails != null) {
                data.volunteerDetails = this.volunteerDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (this.gender.length)
                writer.writeString(5, this.gender);
            if (this.address.length)
                writer.writeString(6, this.address);
            if (this.phone.length)
                writer.writeString(7, this.phone);
            if (this.bio.length)
                writer.writeString(8, this.bio);
            if (this.profilePicture.length)
                writer.writeBytes(9, this.profilePicture);
            if (this.has_studentDetails)
                writer.writeMessage(10, this.studentDetails, () => this.studentDetails.serialize(writer));
            if (this.has_schoolDetails)
                writer.writeMessage(11, this.schoolDetails, () => this.schoolDetails.serialize(writer));
            if (this.has_volunteerDetails)
                writer.writeMessage(12, this.volunteerDetails, () => this.volunteerDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.gender = reader.readString();
                        break;
                    case 6:
                        message.address = reader.readString();
                        break;
                    case 7:
                        message.phone = reader.readString();
                        break;
                    case 8:
                        message.bio = reader.readString();
                        break;
                    case 9:
                        message.profilePicture = reader.readBytes();
                        break;
                    case 10:
                        reader.readMessage(message.studentDetails, () => message.studentDetails = StudentDetails.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.schoolDetails, () => message.schoolDetails = SchoolDetails.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.volunteerDetails, () => message.volunteerDetails = VolunteerDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserProfileRequest {
            return UpdateUserProfileRequest.deserialize(bytes);
        }
    }
    export class UpdateUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): UpdateUserProfileResponse {
            const message = new UpdateUserProfileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserProfileResponse {
            return UpdateUserProfileResponse.deserialize(bytes);
        }
    }
    export class DeleteUserProfileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): DeleteUserProfileRequest {
            const message = new DeleteUserProfileRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserProfileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserProfileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserProfileRequest {
            return DeleteUserProfileRequest.deserialize(bytes);
        }
    }
    export class DeleteUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteUserProfileResponse {
            const message = new DeleteUserProfileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserProfileResponse {
            return DeleteUserProfileResponse.deserialize(bytes);
        }
    }
    export class DeactivateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): DeactivateAccountRequest {
            const message = new DeactivateAccountRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeactivateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeactivateAccountRequest {
            return DeactivateAccountRequest.deserialize(bytes);
        }
    }
    export class DeactivateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeactivateAccountResponse {
            const message = new DeactivateAccountResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeactivateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeactivateAccountResponse {
            return DeactivateAccountResponse.deserialize(bytes);
        }
    }
    export class ReactivateAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): ReactivateAccountRequest {
            const message = new ReactivateAccountRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReactivateAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReactivateAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReactivateAccountRequest {
            return ReactivateAccountRequest.deserialize(bytes);
        }
    }
    export class ReactivateAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): ReactivateAccountResponse {
            const message = new ReactivateAccountResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReactivateAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReactivateAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReactivateAccountResponse {
            return ReactivateAccountResponse.deserialize(bytes);
        }
    }
    export class GetAccountStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): GetAccountStatusRequest {
            const message = new GetAccountStatusRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountStatusRequest {
            return GetAccountStatusRequest.deserialize(bytes);
        }
    }
    export class GetAccountStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): GetAccountStatusResponse {
            const message = new GetAccountStatusResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountStatusResponse {
            return GetAccountStatusResponse.deserialize(bytes);
        }
    }
    export class GetCountriesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetCountriesRequest {
            const message = new GetCountriesRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCountriesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCountriesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCountriesRequest {
            return GetCountriesRequest.deserialize(bytes);
        }
    }
    export class GetCountriesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            countries?: Country[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("countries" in data && data.countries != undefined) {
                    this.countries = data.countries;
                }
            }
        }
        get countries() {
            return pb_1.Message.getRepeatedWrapperField(this, Country, 1) as Country[];
        }
        set countries(value: Country[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            countries?: ReturnType<typeof Country.prototype.toObject>[];
        }): GetCountriesResponse {
            const message = new GetCountriesResponse({});
            if (data.countries != null) {
                message.countries = data.countries.map(item => Country.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                countries?: ReturnType<typeof Country.prototype.toObject>[];
            } = {};
            if (this.countries != null) {
                data.countries = this.countries.map((item: Country) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.countries.length)
                writer.writeRepeatedMessage(1, this.countries, (item: Country) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCountriesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCountriesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.countries, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Country.deserialize(reader), Country));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCountriesResponse {
            return GetCountriesResponse.deserialize(bytes);
        }
    }
    export class Country extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            code?: string;
        }): Country {
            const message = new Country({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                code?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Country {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Country();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Country {
            return Country.deserialize(bytes);
        }
    }
    export class GetSchoolsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            page?: number;
            pageSize?: number;
        }): GetSchoolsRequest {
            const message = new GetSchoolsRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSchoolsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSchoolsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSchoolsRequest {
            return GetSchoolsRequest.deserialize(bytes);
        }
    }
    export class GetSchoolsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schools?: School[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schools" in data && data.schools != undefined) {
                    this.schools = data.schools;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get schools() {
            return pb_1.Message.getRepeatedWrapperField(this, School, 1) as School[];
        }
        set schools(value: School[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            schools?: ReturnType<typeof School.prototype.toObject>[];
            totalCount?: number;
        }): GetSchoolsResponse {
            const message = new GetSchoolsResponse({});
            if (data.schools != null) {
                message.schools = data.schools.map(item => School.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                schools?: ReturnType<typeof School.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.schools != null) {
                data.schools = this.schools.map((item: School) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schools.length)
                writer.writeRepeatedMessage(1, this.schools, (item: School) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeInt32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSchoolsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSchoolsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.schools, () => pb_1.Message.addToRepeatedWrapperField(message, 1, School.deserialize(reader), School));
                        break;
                    case 2:
                        message.totalCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSchoolsResponse {
            return GetSchoolsResponse.deserialize(bytes);
        }
    }
    export class School extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schoolID?: number;
            name?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactEmail?: string;
            schoolEmail?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("province" in data && data.province != undefined) {
                    this.province = data.province;
                }
                if ("district" in data && data.district != undefined) {
                    this.district = data.district;
                }
                if ("schoolType" in data && data.schoolType != undefined) {
                    this.schoolType = data.schoolType;
                }
                if ("contactPersonName" in data && data.contactPersonName != undefined) {
                    this.contactPersonName = data.contactPersonName;
                }
                if ("contactEmail" in data && data.contactEmail != undefined) {
                    this.contactEmail = data.contactEmail;
                }
                if ("schoolEmail" in data && data.schoolEmail != undefined) {
                    this.schoolEmail = data.schoolEmail;
                }
            }
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get province() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set province(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get district() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set district(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get schoolType() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set schoolType(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get contactPersonName() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set contactPersonName(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get contactEmail() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set contactEmail(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get schoolEmail() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set schoolEmail(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            schoolID?: number;
            name?: string;
            address?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactEmail?: string;
            schoolEmail?: string;
        }): School {
            const message = new School({});
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.province != null) {
                message.province = data.province;
            }
            if (data.district != null) {
                message.district = data.district;
            }
            if (data.schoolType != null) {
                message.schoolType = data.schoolType;
            }
            if (data.contactPersonName != null) {
                message.contactPersonName = data.contactPersonName;
            }
            if (data.contactEmail != null) {
                message.contactEmail = data.contactEmail;
            }
            if (data.schoolEmail != null) {
                message.schoolEmail = data.schoolEmail;
            }
            return message;
        }
        toObject() {
            const data: {
                schoolID?: number;
                name?: string;
                address?: string;
                country?: string;
                province?: string;
                district?: string;
                schoolType?: string;
                contactPersonName?: string;
                contactEmail?: string;
                schoolEmail?: string;
            } = {};
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.province != null) {
                data.province = this.province;
            }
            if (this.district != null) {
                data.district = this.district;
            }
            if (this.schoolType != null) {
                data.schoolType = this.schoolType;
            }
            if (this.contactPersonName != null) {
                data.contactPersonName = this.contactPersonName;
            }
            if (this.contactEmail != null) {
                data.contactEmail = this.contactEmail;
            }
            if (this.schoolEmail != null) {
                data.schoolEmail = this.schoolEmail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schoolID != 0)
                writer.writeInt32(1, this.schoolID);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (this.country.length)
                writer.writeString(4, this.country);
            if (this.province.length)
                writer.writeString(5, this.province);
            if (this.district.length)
                writer.writeString(6, this.district);
            if (this.schoolType.length)
                writer.writeString(7, this.schoolType);
            if (this.contactPersonName.length)
                writer.writeString(8, this.contactPersonName);
            if (this.contactEmail.length)
                writer.writeString(9, this.contactEmail);
            if (this.schoolEmail.length)
                writer.writeString(10, this.schoolEmail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): School {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new School();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schoolID = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    case 4:
                        message.country = reader.readString();
                        break;
                    case 5:
                        message.province = reader.readString();
                        break;
                    case 6:
                        message.district = reader.readString();
                        break;
                    case 7:
                        message.schoolType = reader.readString();
                        break;
                    case 8:
                        message.contactPersonName = reader.readString();
                        break;
                    case 9:
                        message.contactEmail = reader.readString();
                        break;
                    case 10:
                        message.schoolEmail = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): School {
            return School.deserialize(bytes);
        }
    }
    export class GetStudentsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            page?: number;
            pageSize?: number;
        }): GetStudentsRequest {
            const message = new GetStudentsRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStudentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStudentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStudentsRequest {
            return GetStudentsRequest.deserialize(bytes);
        }
    }
    export class GetStudentsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            students?: Student[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("students" in data && data.students != undefined) {
                    this.students = data.students;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get students() {
            return pb_1.Message.getRepeatedWrapperField(this, Student, 1) as Student[];
        }
        set students(value: Student[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            students?: ReturnType<typeof Student.prototype.toObject>[];
            totalCount?: number;
        }): GetStudentsResponse {
            const message = new GetStudentsResponse({});
            if (data.students != null) {
                message.students = data.students.map(item => Student.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                students?: ReturnType<typeof Student.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.students != null) {
                data.students = this.students.map((item: Student) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.students.length)
                writer.writeRepeatedMessage(1, this.students, (item: Student) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeInt32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStudentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStudentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.students, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Student.deserialize(reader), Student));
                        break;
                    case 2:
                        message.totalCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStudentsResponse {
            return GetStudentsResponse.deserialize(bytes);
        }
    }
    export class Student extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            studentID?: number;
            firstName?: string;
            lastName?: string;
            grade?: string;
            dateOfBirth?: string;
            email?: string;
            schoolID?: number;
            schoolName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("studentID" in data && data.studentID != undefined) {
                    this.studentID = data.studentID;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
                if ("schoolName" in data && data.schoolName != undefined) {
                    this.schoolName = data.schoolName;
                }
            }
        }
        get studentID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set studentID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set grade(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get schoolName() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set schoolName(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            studentID?: number;
            firstName?: string;
            lastName?: string;
            grade?: string;
            dateOfBirth?: string;
            email?: string;
            schoolID?: number;
            schoolName?: string;
        }): Student {
            const message = new Student({});
            if (data.studentID != null) {
                message.studentID = data.studentID;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            if (data.schoolName != null) {
                message.schoolName = data.schoolName;
            }
            return message;
        }
        toObject() {
            const data: {
                studentID?: number;
                firstName?: string;
                lastName?: string;
                grade?: string;
                dateOfBirth?: string;
                email?: string;
                schoolID?: number;
                schoolName?: string;
            } = {};
            if (this.studentID != null) {
                data.studentID = this.studentID;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            if (this.schoolName != null) {
                data.schoolName = this.schoolName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.studentID != 0)
                writer.writeInt32(1, this.studentID);
            if (this.firstName.length)
                writer.writeString(2, this.firstName);
            if (this.lastName.length)
                writer.writeString(3, this.lastName);
            if (this.grade.length)
                writer.writeString(4, this.grade);
            if (this.dateOfBirth.length)
                writer.writeString(5, this.dateOfBirth);
            if (this.email.length)
                writer.writeString(6, this.email);
            if (this.schoolID != 0)
                writer.writeInt32(7, this.schoolID);
            if (this.schoolName.length)
                writer.writeString(8, this.schoolName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Student {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Student();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.studentID = reader.readInt32();
                        break;
                    case 2:
                        message.firstName = reader.readString();
                        break;
                    case 3:
                        message.lastName = reader.readString();
                        break;
                    case 4:
                        message.grade = reader.readString();
                        break;
                    case 5:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 6:
                        message.email = reader.readString();
                        break;
                    case 7:
                        message.schoolID = reader.readInt32();
                        break;
                    case 8:
                        message.schoolName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Student {
            return Student.deserialize(bytes);
        }
    }
    export class GetVolunteersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            page?: number;
            pageSize?: number;
        }): GetVolunteersRequest {
            const message = new GetVolunteersRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVolunteersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVolunteersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVolunteersRequest {
            return GetVolunteersRequest.deserialize(bytes);
        }
    }
    export class GetVolunteersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            volunteers?: Volunteer[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("volunteers" in data && data.volunteers != undefined) {
                    this.volunteers = data.volunteers;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get volunteers() {
            return pb_1.Message.getRepeatedWrapperField(this, Volunteer, 1) as Volunteer[];
        }
        set volunteers(value: Volunteer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            volunteers?: ReturnType<typeof Volunteer.prototype.toObject>[];
            totalCount?: number;
        }): GetVolunteersResponse {
            const message = new GetVolunteersResponse({});
            if (data.volunteers != null) {
                message.volunteers = data.volunteers.map(item => Volunteer.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                volunteers?: ReturnType<typeof Volunteer.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.volunteers != null) {
                data.volunteers = this.volunteers.map((item: Volunteer) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.volunteers.length)
                writer.writeRepeatedMessage(1, this.volunteers, (item: Volunteer) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeInt32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVolunteersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVolunteersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.volunteers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Volunteer.deserialize(reader), Volunteer));
                        break;
                    case 2:
                        message.totalCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVolunteersResponse {
            return GetVolunteersResponse.deserialize(bytes);
        }
    }
    export class Volunteer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            volunteerID?: number;
            firstName?: string;
            lastName?: string;
            dateOfBirth?: string;
            role?: string;
            graduateYear?: number;
            safeGuardCertificate?: Uint8Array;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("volunteerID" in data && data.volunteerID != undefined) {
                    this.volunteerID = data.volunteerID;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("graduateYear" in data && data.graduateYear != undefined) {
                    this.graduateYear = data.graduateYear;
                }
                if ("safeGuardCertificate" in data && data.safeGuardCertificate != undefined) {
                    this.safeGuardCertificate = data.safeGuardCertificate;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get volunteerID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set volunteerID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get graduateYear() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set graduateYear(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get safeGuardCertificate() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set safeGuardCertificate(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            volunteerID?: number;
            firstName?: string;
            lastName?: string;
            dateOfBirth?: string;
            role?: string;
            graduateYear?: number;
            safeGuardCertificate?: Uint8Array;
            email?: string;
        }): Volunteer {
            const message = new Volunteer({});
            if (data.volunteerID != null) {
                message.volunteerID = data.volunteerID;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.graduateYear != null) {
                message.graduateYear = data.graduateYear;
            }
            if (data.safeGuardCertificate != null) {
                message.safeGuardCertificate = data.safeGuardCertificate;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                volunteerID?: number;
                firstName?: string;
                lastName?: string;
                dateOfBirth?: string;
                role?: string;
                graduateYear?: number;
                safeGuardCertificate?: Uint8Array;
                email?: string;
            } = {};
            if (this.volunteerID != null) {
                data.volunteerID = this.volunteerID;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.graduateYear != null) {
                data.graduateYear = this.graduateYear;
            }
            if (this.safeGuardCertificate != null) {
                data.safeGuardCertificate = this.safeGuardCertificate;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.volunteerID != 0)
                writer.writeInt32(1, this.volunteerID);
            if (this.firstName.length)
                writer.writeString(2, this.firstName);
            if (this.lastName.length)
                writer.writeString(3, this.lastName);
            if (this.dateOfBirth.length)
                writer.writeString(4, this.dateOfBirth);
            if (this.role.length)
                writer.writeString(5, this.role);
            if (this.graduateYear != 0)
                writer.writeInt32(6, this.graduateYear);
            if (this.safeGuardCertificate.length)
                writer.writeBytes(7, this.safeGuardCertificate);
            if (this.email.length)
                writer.writeString(8, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Volunteer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Volunteer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.volunteerID = reader.readInt32();
                        break;
                    case 2:
                        message.firstName = reader.readString();
                        break;
                    case 3:
                        message.lastName = reader.readString();
                        break;
                    case 4:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 5:
                        message.role = reader.readString();
                        break;
                    case 6:
                        message.graduateYear = reader.readInt32();
                        break;
                    case 7:
                        message.safeGuardCertificate = reader.readBytes();
                        break;
                    case 8:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Volunteer {
            return Volunteer.deserialize(bytes);
        }
    }
    export class GetVolunteersAndAdminsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            page?: number;
            pageSize?: number;
        }): GetVolunteersAndAdminsRequest {
            const message = new GetVolunteersAndAdminsRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVolunteersAndAdminsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVolunteersAndAdminsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    case 3:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVolunteersAndAdminsRequest {
            return GetVolunteersAndAdminsRequest.deserialize(bytes);
        }
    }
    export class GetVolunteersAndAdminsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: UserSummary[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, UserSummary, 1) as UserSummary[];
        }
        set users(value: UserSummary[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof UserSummary.prototype.toObject>[];
            totalCount?: number;
        }): GetVolunteersAndAdminsResponse {
            const message = new GetVolunteersAndAdminsResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => UserSummary.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof UserSummary.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: UserSummary) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: UserSummary) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeInt32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVolunteersAndAdminsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVolunteersAndAdminsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserSummary.deserialize(reader), UserSummary));
                        break;
                    case 2:
                        message.totalCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVolunteersAndAdminsResponse {
            return GetVolunteersAndAdminsResponse.deserialize(bytes);
        }
    }
    export class GetSchoolsNoAuthRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            pageSize?: number;
        }): GetSchoolsNoAuthRequest {
            const message = new GetSchoolsNoAuthRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                pageSize?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(2, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSchoolsNoAuthRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSchoolsNoAuthRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSchoolsNoAuthRequest {
            return GetSchoolsNoAuthRequest.deserialize(bytes);
        }
    }
    export class GetSchoolsNoAuthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schools?: School[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schools" in data && data.schools != undefined) {
                    this.schools = data.schools;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get schools() {
            return pb_1.Message.getRepeatedWrapperField(this, School, 1) as School[];
        }
        set schools(value: School[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            schools?: ReturnType<typeof School.prototype.toObject>[];
            totalCount?: number;
        }): GetSchoolsNoAuthResponse {
            const message = new GetSchoolsNoAuthResponse({});
            if (data.schools != null) {
                message.schools = data.schools.map(item => School.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                schools?: ReturnType<typeof School.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.schools != null) {
                data.schools = this.schools.map((item: School) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schools.length)
                writer.writeRepeatedMessage(1, this.schools, (item: School) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeInt32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSchoolsNoAuthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSchoolsNoAuthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.schools, () => pb_1.Message.addToRepeatedWrapperField(message, 1, School.deserialize(reader), School));
                        break;
                    case 2:
                        message.totalCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSchoolsNoAuthResponse {
            return GetSchoolsNoAuthResponse.deserialize(bytes);
        }
    }
    export class InitiatePasswordUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
        }): InitiatePasswordUpdateRequest {
            const message = new InitiatePasswordUpdateRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitiatePasswordUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitiatePasswordUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitiatePasswordUpdateRequest {
            return InitiatePasswordUpdateRequest.deserialize(bytes);
        }
    }
    export class InitiatePasswordUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): InitiatePasswordUpdateResponse {
            const message = new InitiatePasswordUpdateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitiatePasswordUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitiatePasswordUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitiatePasswordUpdateResponse {
            return InitiatePasswordUpdateResponse.deserialize(bytes);
        }
    }
    export class VerifyAndUpdatePasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userID?: number;
            verificationCode?: string;
            newPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("verificationCode" in data && data.verificationCode != undefined) {
                    this.verificationCode = data.verificationCode;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get verificationCode() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set verificationCode(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            token?: string;
            userID?: number;
            verificationCode?: string;
            newPassword?: string;
        }): VerifyAndUpdatePasswordRequest {
            const message = new VerifyAndUpdatePasswordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.verificationCode != null) {
                message.verificationCode = data.verificationCode;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userID?: number;
                verificationCode?: string;
                newPassword?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.verificationCode != null) {
                data.verificationCode = this.verificationCode;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userID != 0)
                writer.writeInt32(2, this.userID);
            if (this.verificationCode.length)
                writer.writeString(3, this.verificationCode);
            if (this.newPassword.length)
                writer.writeString(4, this.newPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyAndUpdatePasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyAndUpdatePasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userID = reader.readInt32();
                        break;
                    case 3:
                        message.verificationCode = reader.readString();
                        break;
                    case 4:
                        message.newPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyAndUpdatePasswordRequest {
            return VerifyAndUpdatePasswordRequest.deserialize(bytes);
        }
    }
    export class VerifyAndUpdatePasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): VerifyAndUpdatePasswordResponse {
            const message = new VerifyAndUpdatePasswordResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyAndUpdatePasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyAndUpdatePasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyAndUpdatePasswordResponse {
            return VerifyAndUpdatePasswordResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserManagementServiceService {
        static definition = {
            GetPendingUsers: {
                path: "/user_management.UserManagementService/GetPendingUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPendingUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPendingUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPendingUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPendingUsersResponse.deserialize(new Uint8Array(bytes))
            },
            ApproveUser: {
                path: "/user_management.UserManagementService/ApproveUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ApproveUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ApproveUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ApproveUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ApproveUserResponse.deserialize(new Uint8Array(bytes))
            },
            RejectUser: {
                path: "/user_management.UserManagementService/RejectUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RejectUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RejectUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RejectUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RejectUserResponse.deserialize(new Uint8Array(bytes))
            },
            ApproveUsers: {
                path: "/user_management.UserManagementService/ApproveUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ApproveUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ApproveUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ApproveUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ApproveUsersResponse.deserialize(new Uint8Array(bytes))
            },
            RejectUsers: {
                path: "/user_management.UserManagementService/RejectUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RejectUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RejectUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RejectUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RejectUsersResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUsers: {
                path: "/user_management.UserManagementService/DeleteUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUsersResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserProfile: {
                path: "/user_management.UserManagementService/GetUserProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserProfileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserProfileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserProfileResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserProfileResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUserProfile: {
                path: "/user_management.UserManagementService/UpdateUserProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserProfileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserProfileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserProfileResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserProfileResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUserProfile: {
                path: "/user_management.UserManagementService/DeleteUserProfile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserProfileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserProfileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUserProfileResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUserProfileResponse.deserialize(new Uint8Array(bytes))
            },
            DeactivateAccount: {
                path: "/user_management.UserManagementService/DeactivateAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeactivateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeactivateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeactivateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeactivateAccountResponse.deserialize(new Uint8Array(bytes))
            },
            ReactivateAccount: {
                path: "/user_management.UserManagementService/ReactivateAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReactivateAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReactivateAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReactivateAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReactivateAccountResponse.deserialize(new Uint8Array(bytes))
            },
            GetAccountStatus: {
                path: "/user_management.UserManagementService/GetAccountStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAccountStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAccountStatusResponse.deserialize(new Uint8Array(bytes))
            },
            GetCountries: {
                path: "/user_management.UserManagementService/GetCountries",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCountriesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCountriesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCountriesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCountriesResponse.deserialize(new Uint8Array(bytes))
            },
            GetSchools: {
                path: "/user_management.UserManagementService/GetSchools",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetSchoolsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetSchoolsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetSchoolsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetSchoolsResponse.deserialize(new Uint8Array(bytes))
            },
            GetStudents: {
                path: "/user_management.UserManagementService/GetStudents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStudentsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStudentsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStudentsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStudentsResponse.deserialize(new Uint8Array(bytes))
            },
            GetVolunteers: {
                path: "/user_management.UserManagementService/GetVolunteers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVolunteersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVolunteersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVolunteersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVolunteersResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllUsers: {
                path: "/user_management.UserManagementService/GetAllUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllUsersResponse.deserialize(new Uint8Array(bytes))
            },
            GetVolunteersAndAdmins: {
                path: "/user_management.UserManagementService/GetVolunteersAndAdmins",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVolunteersAndAdminsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVolunteersAndAdminsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVolunteersAndAdminsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVolunteersAndAdminsResponse.deserialize(new Uint8Array(bytes))
            },
            GetSchoolsNoAuth: {
                path: "/user_management.UserManagementService/GetSchoolsNoAuth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetSchoolsNoAuthRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetSchoolsNoAuthRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetSchoolsNoAuthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetSchoolsNoAuthResponse.deserialize(new Uint8Array(bytes))
            },
            InitiatePasswordUpdate: {
                path: "/user_management.UserManagementService/InitiatePasswordUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InitiatePasswordUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InitiatePasswordUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InitiatePasswordUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InitiatePasswordUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyAndUpdatePassword: {
                path: "/user_management.UserManagementService/VerifyAndUpdatePassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyAndUpdatePasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyAndUpdatePasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyAndUpdatePasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyAndUpdatePasswordResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetPendingUsers(call: grpc_1.ServerUnaryCall<GetPendingUsersRequest, GetPendingUsersResponse>, callback: grpc_1.sendUnaryData<GetPendingUsersResponse>): void;
        abstract ApproveUser(call: grpc_1.ServerUnaryCall<ApproveUserRequest, ApproveUserResponse>, callback: grpc_1.sendUnaryData<ApproveUserResponse>): void;
        abstract RejectUser(call: grpc_1.ServerUnaryCall<RejectUserRequest, RejectUserResponse>, callback: grpc_1.sendUnaryData<RejectUserResponse>): void;
        abstract ApproveUsers(call: grpc_1.ServerUnaryCall<ApproveUsersRequest, ApproveUsersResponse>, callback: grpc_1.sendUnaryData<ApproveUsersResponse>): void;
        abstract RejectUsers(call: grpc_1.ServerUnaryCall<RejectUsersRequest, RejectUsersResponse>, callback: grpc_1.sendUnaryData<RejectUsersResponse>): void;
        abstract DeleteUsers(call: grpc_1.ServerUnaryCall<DeleteUsersRequest, DeleteUsersResponse>, callback: grpc_1.sendUnaryData<DeleteUsersResponse>): void;
        abstract GetUserProfile(call: grpc_1.ServerUnaryCall<GetUserProfileRequest, GetUserProfileResponse>, callback: grpc_1.sendUnaryData<GetUserProfileResponse>): void;
        abstract UpdateUserProfile(call: grpc_1.ServerUnaryCall<UpdateUserProfileRequest, UpdateUserProfileResponse>, callback: grpc_1.sendUnaryData<UpdateUserProfileResponse>): void;
        abstract DeleteUserProfile(call: grpc_1.ServerUnaryCall<DeleteUserProfileRequest, DeleteUserProfileResponse>, callback: grpc_1.sendUnaryData<DeleteUserProfileResponse>): void;
        abstract DeactivateAccount(call: grpc_1.ServerUnaryCall<DeactivateAccountRequest, DeactivateAccountResponse>, callback: grpc_1.sendUnaryData<DeactivateAccountResponse>): void;
        abstract ReactivateAccount(call: grpc_1.ServerUnaryCall<ReactivateAccountRequest, ReactivateAccountResponse>, callback: grpc_1.sendUnaryData<ReactivateAccountResponse>): void;
        abstract GetAccountStatus(call: grpc_1.ServerUnaryCall<GetAccountStatusRequest, GetAccountStatusResponse>, callback: grpc_1.sendUnaryData<GetAccountStatusResponse>): void;
        abstract GetCountries(call: grpc_1.ServerUnaryCall<GetCountriesRequest, GetCountriesResponse>, callback: grpc_1.sendUnaryData<GetCountriesResponse>): void;
        abstract GetSchools(call: grpc_1.ServerUnaryCall<GetSchoolsRequest, GetSchoolsResponse>, callback: grpc_1.sendUnaryData<GetSchoolsResponse>): void;
        abstract GetStudents(call: grpc_1.ServerUnaryCall<GetStudentsRequest, GetStudentsResponse>, callback: grpc_1.sendUnaryData<GetStudentsResponse>): void;
        abstract GetVolunteers(call: grpc_1.ServerUnaryCall<GetVolunteersRequest, GetVolunteersResponse>, callback: grpc_1.sendUnaryData<GetVolunteersResponse>): void;
        abstract GetAllUsers(call: grpc_1.ServerUnaryCall<GetAllUsersRequest, GetAllUsersResponse>, callback: grpc_1.sendUnaryData<GetAllUsersResponse>): void;
        abstract GetVolunteersAndAdmins(call: grpc_1.ServerUnaryCall<GetVolunteersAndAdminsRequest, GetVolunteersAndAdminsResponse>, callback: grpc_1.sendUnaryData<GetVolunteersAndAdminsResponse>): void;
        abstract GetSchoolsNoAuth(call: grpc_1.ServerUnaryCall<GetSchoolsNoAuthRequest, GetSchoolsNoAuthResponse>, callback: grpc_1.sendUnaryData<GetSchoolsNoAuthResponse>): void;
        abstract InitiatePasswordUpdate(call: grpc_1.ServerUnaryCall<InitiatePasswordUpdateRequest, InitiatePasswordUpdateResponse>, callback: grpc_1.sendUnaryData<InitiatePasswordUpdateResponse>): void;
        abstract VerifyAndUpdatePassword(call: grpc_1.ServerUnaryCall<VerifyAndUpdatePasswordRequest, VerifyAndUpdatePasswordResponse>, callback: grpc_1.sendUnaryData<VerifyAndUpdatePasswordResponse>): void;
    }
    export class UserManagementServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserManagementServiceService.definition, "UserManagementService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetPendingUsers: GrpcUnaryServiceInterface<GetPendingUsersRequest, GetPendingUsersResponse> = (message: GetPendingUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPendingUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPendingUsersResponse>, callback?: grpc_1.requestCallback<GetPendingUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPendingUsers(message, metadata, options, callback);
        };
        ApproveUser: GrpcUnaryServiceInterface<ApproveUserRequest, ApproveUserResponse> = (message: ApproveUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ApproveUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ApproveUserResponse>, callback?: grpc_1.requestCallback<ApproveUserResponse>): grpc_1.ClientUnaryCall => {
            return super.ApproveUser(message, metadata, options, callback);
        };
        RejectUser: GrpcUnaryServiceInterface<RejectUserRequest, RejectUserResponse> = (message: RejectUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RejectUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RejectUserResponse>, callback?: grpc_1.requestCallback<RejectUserResponse>): grpc_1.ClientUnaryCall => {
            return super.RejectUser(message, metadata, options, callback);
        };
        ApproveUsers: GrpcUnaryServiceInterface<ApproveUsersRequest, ApproveUsersResponse> = (message: ApproveUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ApproveUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ApproveUsersResponse>, callback?: grpc_1.requestCallback<ApproveUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.ApproveUsers(message, metadata, options, callback);
        };
        RejectUsers: GrpcUnaryServiceInterface<RejectUsersRequest, RejectUsersResponse> = (message: RejectUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RejectUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RejectUsersResponse>, callback?: grpc_1.requestCallback<RejectUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.RejectUsers(message, metadata, options, callback);
        };
        DeleteUsers: GrpcUnaryServiceInterface<DeleteUsersRequest, DeleteUsersResponse> = (message: DeleteUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUsersResponse>, callback?: grpc_1.requestCallback<DeleteUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUsers(message, metadata, options, callback);
        };
        GetUserProfile: GrpcUnaryServiceInterface<GetUserProfileRequest, GetUserProfileResponse> = (message: GetUserProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserProfileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserProfileResponse>, callback?: grpc_1.requestCallback<GetUserProfileResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUserProfile(message, metadata, options, callback);
        };
        UpdateUserProfile: GrpcUnaryServiceInterface<UpdateUserProfileRequest, UpdateUserProfileResponse> = (message: UpdateUserProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserProfileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserProfileResponse>, callback?: grpc_1.requestCallback<UpdateUserProfileResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserProfile(message, metadata, options, callback);
        };
        DeleteUserProfile: GrpcUnaryServiceInterface<DeleteUserProfileRequest, DeleteUserProfileResponse> = (message: DeleteUserProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserProfileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserProfileResponse>, callback?: grpc_1.requestCallback<DeleteUserProfileResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUserProfile(message, metadata, options, callback);
        };
        DeactivateAccount: GrpcUnaryServiceInterface<DeactivateAccountRequest, DeactivateAccountResponse> = (message: DeactivateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeactivateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeactivateAccountResponse>, callback?: grpc_1.requestCallback<DeactivateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.DeactivateAccount(message, metadata, options, callback);
        };
        ReactivateAccount: GrpcUnaryServiceInterface<ReactivateAccountRequest, ReactivateAccountResponse> = (message: ReactivateAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReactivateAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReactivateAccountResponse>, callback?: grpc_1.requestCallback<ReactivateAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.ReactivateAccount(message, metadata, options, callback);
        };
        GetAccountStatus: GrpcUnaryServiceInterface<GetAccountStatusRequest, GetAccountStatusResponse> = (message: GetAccountStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAccountStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAccountStatusResponse>, callback?: grpc_1.requestCallback<GetAccountStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountStatus(message, metadata, options, callback);
        };
        GetCountries: GrpcUnaryServiceInterface<GetCountriesRequest, GetCountriesResponse> = (message: GetCountriesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCountriesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCountriesResponse>, callback?: grpc_1.requestCallback<GetCountriesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCountries(message, metadata, options, callback);
        };
        GetSchools: GrpcUnaryServiceInterface<GetSchoolsRequest, GetSchoolsResponse> = (message: GetSchoolsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetSchoolsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetSchoolsResponse>, callback?: grpc_1.requestCallback<GetSchoolsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSchools(message, metadata, options, callback);
        };
        GetStudents: GrpcUnaryServiceInterface<GetStudentsRequest, GetStudentsResponse> = (message: GetStudentsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStudentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStudentsResponse>, callback?: grpc_1.requestCallback<GetStudentsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStudents(message, metadata, options, callback);
        };
        GetVolunteers: GrpcUnaryServiceInterface<GetVolunteersRequest, GetVolunteersResponse> = (message: GetVolunteersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVolunteersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVolunteersResponse>, callback?: grpc_1.requestCallback<GetVolunteersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetVolunteers(message, metadata, options, callback);
        };
        GetAllUsers: GrpcUnaryServiceInterface<GetAllUsersRequest, GetAllUsersResponse> = (message: GetAllUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllUsersResponse>, callback?: grpc_1.requestCallback<GetAllUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllUsers(message, metadata, options, callback);
        };
        GetVolunteersAndAdmins: GrpcUnaryServiceInterface<GetVolunteersAndAdminsRequest, GetVolunteersAndAdminsResponse> = (message: GetVolunteersAndAdminsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVolunteersAndAdminsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVolunteersAndAdminsResponse>, callback?: grpc_1.requestCallback<GetVolunteersAndAdminsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetVolunteersAndAdmins(message, metadata, options, callback);
        };
        GetSchoolsNoAuth: GrpcUnaryServiceInterface<GetSchoolsNoAuthRequest, GetSchoolsNoAuthResponse> = (message: GetSchoolsNoAuthRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetSchoolsNoAuthResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetSchoolsNoAuthResponse>, callback?: grpc_1.requestCallback<GetSchoolsNoAuthResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSchoolsNoAuth(message, metadata, options, callback);
        };
        InitiatePasswordUpdate: GrpcUnaryServiceInterface<InitiatePasswordUpdateRequest, InitiatePasswordUpdateResponse> = (message: InitiatePasswordUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InitiatePasswordUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InitiatePasswordUpdateResponse>, callback?: grpc_1.requestCallback<InitiatePasswordUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.InitiatePasswordUpdate(message, metadata, options, callback);
        };
        VerifyAndUpdatePassword: GrpcUnaryServiceInterface<VerifyAndUpdatePasswordRequest, VerifyAndUpdatePasswordResponse> = (message: VerifyAndUpdatePasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyAndUpdatePasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyAndUpdatePasswordResponse>, callback?: grpc_1.requestCallback<VerifyAndUpdatePasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyAndUpdatePassword(message, metadata, options, callback);
        };
    }
}
