/**
 * @fileoverview gRPC-Web generated client stub for user_management
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: user_management/users.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as user_management_users_pb from '../user_management/users_pb'; // proto import: "user_management/users.proto"


export class UserManagementServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetPendingUsers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetPendingUsers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetPendingUsersRequest,
    user_management_users_pb.GetPendingUsersResponse,
    (request: user_management_users_pb.GetPendingUsersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetPendingUsersResponse.deserializeBinary
  );

  getPendingUsers(
    request: user_management_users_pb.GetPendingUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetPendingUsersResponse>;

  getPendingUsers(
    request: user_management_users_pb.GetPendingUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetPendingUsersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetPendingUsersResponse>;

  getPendingUsers(
    request: user_management_users_pb.GetPendingUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetPendingUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetPendingUsers',
        request,
        metadata || {},
        this.methodDescriptorGetPendingUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetPendingUsers',
    request,
    metadata || {},
    this.methodDescriptorGetPendingUsers);
  }

  methodDescriptorGetUserDetails = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetUserDetails',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetUserDetailsRequest,
    user_management_users_pb.GetUserDetailsResponse,
    (request: user_management_users_pb.GetUserDetailsRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetUserDetailsResponse.deserializeBinary
  );

  getUserDetails(
    request: user_management_users_pb.GetUserDetailsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetUserDetailsResponse>;

  getUserDetails(
    request: user_management_users_pb.GetUserDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetUserDetailsResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetUserDetailsResponse>;

  getUserDetails(
    request: user_management_users_pb.GetUserDetailsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetUserDetailsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetUserDetails',
        request,
        metadata || {},
        this.methodDescriptorGetUserDetails,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetUserDetails',
    request,
    metadata || {},
    this.methodDescriptorGetUserDetails);
  }

  methodDescriptorApproveUser = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/ApproveUser',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.ApproveUserRequest,
    user_management_users_pb.ApproveUserResponse,
    (request: user_management_users_pb.ApproveUserRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.ApproveUserResponse.deserializeBinary
  );

  approveUser(
    request: user_management_users_pb.ApproveUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.ApproveUserResponse>;

  approveUser(
    request: user_management_users_pb.ApproveUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ApproveUserResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.ApproveUserResponse>;

  approveUser(
    request: user_management_users_pb.ApproveUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ApproveUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/ApproveUser',
        request,
        metadata || {},
        this.methodDescriptorApproveUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/ApproveUser',
    request,
    metadata || {},
    this.methodDescriptorApproveUser);
  }

  methodDescriptorRejectUser = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/RejectUser',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.RejectUserRequest,
    user_management_users_pb.RejectUserResponse,
    (request: user_management_users_pb.RejectUserRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.RejectUserResponse.deserializeBinary
  );

  rejectUser(
    request: user_management_users_pb.RejectUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.RejectUserResponse>;

  rejectUser(
    request: user_management_users_pb.RejectUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.RejectUserResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.RejectUserResponse>;

  rejectUser(
    request: user_management_users_pb.RejectUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.RejectUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/RejectUser',
        request,
        metadata || {},
        this.methodDescriptorRejectUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/RejectUser',
    request,
    metadata || {},
    this.methodDescriptorRejectUser);
  }

  methodDescriptorUpdateUserProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/UpdateUserProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.UpdateUserProfileRequest,
    user_management_users_pb.UpdateUserProfileResponse,
    (request: user_management_users_pb.UpdateUserProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.UpdateUserProfileResponse.deserializeBinary
  );

  updateUserProfile(
    request: user_management_users_pb.UpdateUserProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.UpdateUserProfileResponse>;

  updateUserProfile(
    request: user_management_users_pb.UpdateUserProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateUserProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.UpdateUserProfileResponse>;

  updateUserProfile(
    request: user_management_users_pb.UpdateUserProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateUserProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/UpdateUserProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateUserProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/UpdateUserProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateUserProfile);
  }

  methodDescriptorDeleteUserProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/DeleteUserProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.DeleteUserProfileRequest,
    user_management_users_pb.DeleteUserProfileResponse,
    (request: user_management_users_pb.DeleteUserProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.DeleteUserProfileResponse.deserializeBinary
  );

  deleteUserProfile(
    request: user_management_users_pb.DeleteUserProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.DeleteUserProfileResponse>;

  deleteUserProfile(
    request: user_management_users_pb.DeleteUserProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeleteUserProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.DeleteUserProfileResponse>;

  deleteUserProfile(
    request: user_management_users_pb.DeleteUserProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeleteUserProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/DeleteUserProfile',
        request,
        metadata || {},
        this.methodDescriptorDeleteUserProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/DeleteUserProfile',
    request,
    metadata || {},
    this.methodDescriptorDeleteUserProfile);
  }

  methodDescriptorDeactivateAccount = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/DeactivateAccount',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.DeactivateAccountRequest,
    user_management_users_pb.DeactivateAccountResponse,
    (request: user_management_users_pb.DeactivateAccountRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.DeactivateAccountResponse.deserializeBinary
  );

  deactivateAccount(
    request: user_management_users_pb.DeactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.DeactivateAccountResponse>;

  deactivateAccount(
    request: user_management_users_pb.DeactivateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeactivateAccountResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.DeactivateAccountResponse>;

  deactivateAccount(
    request: user_management_users_pb.DeactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeactivateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/DeactivateAccount',
        request,
        metadata || {},
        this.methodDescriptorDeactivateAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/DeactivateAccount',
    request,
    metadata || {},
    this.methodDescriptorDeactivateAccount);
  }

  methodDescriptorReactivateAccount = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/ReactivateAccount',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.ReactivateAccountRequest,
    user_management_users_pb.ReactivateAccountResponse,
    (request: user_management_users_pb.ReactivateAccountRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.ReactivateAccountResponse.deserializeBinary
  );

  reactivateAccount(
    request: user_management_users_pb.ReactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.ReactivateAccountResponse>;

  reactivateAccount(
    request: user_management_users_pb.ReactivateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ReactivateAccountResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.ReactivateAccountResponse>;

  reactivateAccount(
    request: user_management_users_pb.ReactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ReactivateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/ReactivateAccount',
        request,
        metadata || {},
        this.methodDescriptorReactivateAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/ReactivateAccount',
    request,
    metadata || {},
    this.methodDescriptorReactivateAccount);
  }

  methodDescriptorGetAccountStatus = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetAccountStatus',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetAccountStatusRequest,
    user_management_users_pb.GetAccountStatusResponse,
    (request: user_management_users_pb.GetAccountStatusRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetAccountStatusResponse.deserializeBinary
  );

  getAccountStatus(
    request: user_management_users_pb.GetAccountStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetAccountStatusResponse>;

  getAccountStatus(
    request: user_management_users_pb.GetAccountStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetAccountStatusResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetAccountStatusResponse>;

  getAccountStatus(
    request: user_management_users_pb.GetAccountStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetAccountStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetAccountStatus',
        request,
        metadata || {},
        this.methodDescriptorGetAccountStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetAccountStatus',
    request,
    metadata || {},
    this.methodDescriptorGetAccountStatus);
  }

}

