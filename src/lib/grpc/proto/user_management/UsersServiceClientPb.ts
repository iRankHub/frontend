/**
 * @fileoverview gRPC-Web generated client stub for user_management
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.2
// source: user_management/users.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as user_management_users_pb from '../user_management/users_pb'; // proto import: "user_management/users.proto"


export class UserManagementServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetPendingUsers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetPendingUsers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetPendingUsersRequest,
    user_management_users_pb.GetPendingUsersResponse,
    (request: user_management_users_pb.GetPendingUsersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetPendingUsersResponse.deserializeBinary
  );

  getPendingUsers(
    request: user_management_users_pb.GetPendingUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetPendingUsersResponse>;

  getPendingUsers(
    request: user_management_users_pb.GetPendingUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetPendingUsersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetPendingUsersResponse>;

  getPendingUsers(
    request: user_management_users_pb.GetPendingUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetPendingUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetPendingUsers',
        request,
        metadata || {},
        this.methodDescriptorGetPendingUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetPendingUsers',
    request,
    metadata || {},
    this.methodDescriptorGetPendingUsers);
  }

  methodDescriptorApproveUser = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/ApproveUser',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.ApproveUserRequest,
    user_management_users_pb.ApproveUserResponse,
    (request: user_management_users_pb.ApproveUserRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.ApproveUserResponse.deserializeBinary
  );

  approveUser(
    request: user_management_users_pb.ApproveUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.ApproveUserResponse>;

  approveUser(
    request: user_management_users_pb.ApproveUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ApproveUserResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.ApproveUserResponse>;

  approveUser(
    request: user_management_users_pb.ApproveUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ApproveUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/ApproveUser',
        request,
        metadata || {},
        this.methodDescriptorApproveUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/ApproveUser',
    request,
    metadata || {},
    this.methodDescriptorApproveUser);
  }

  methodDescriptorRejectUser = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/RejectUser',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.RejectUserRequest,
    user_management_users_pb.RejectUserResponse,
    (request: user_management_users_pb.RejectUserRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.RejectUserResponse.deserializeBinary
  );

  rejectUser(
    request: user_management_users_pb.RejectUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.RejectUserResponse>;

  rejectUser(
    request: user_management_users_pb.RejectUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.RejectUserResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.RejectUserResponse>;

  rejectUser(
    request: user_management_users_pb.RejectUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.RejectUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/RejectUser',
        request,
        metadata || {},
        this.methodDescriptorRejectUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/RejectUser',
    request,
    metadata || {},
    this.methodDescriptorRejectUser);
  }

  methodDescriptorApproveUsers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/ApproveUsers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.ApproveUsersRequest,
    user_management_users_pb.ApproveUsersResponse,
    (request: user_management_users_pb.ApproveUsersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.ApproveUsersResponse.deserializeBinary
  );

  approveUsers(
    request: user_management_users_pb.ApproveUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.ApproveUsersResponse>;

  approveUsers(
    request: user_management_users_pb.ApproveUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ApproveUsersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.ApproveUsersResponse>;

  approveUsers(
    request: user_management_users_pb.ApproveUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ApproveUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/ApproveUsers',
        request,
        metadata || {},
        this.methodDescriptorApproveUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/ApproveUsers',
    request,
    metadata || {},
    this.methodDescriptorApproveUsers);
  }

  methodDescriptorRejectUsers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/RejectUsers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.RejectUsersRequest,
    user_management_users_pb.RejectUsersResponse,
    (request: user_management_users_pb.RejectUsersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.RejectUsersResponse.deserializeBinary
  );

  rejectUsers(
    request: user_management_users_pb.RejectUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.RejectUsersResponse>;

  rejectUsers(
    request: user_management_users_pb.RejectUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.RejectUsersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.RejectUsersResponse>;

  rejectUsers(
    request: user_management_users_pb.RejectUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.RejectUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/RejectUsers',
        request,
        metadata || {},
        this.methodDescriptorRejectUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/RejectUsers',
    request,
    metadata || {},
    this.methodDescriptorRejectUsers);
  }

  methodDescriptorDeleteUsers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/DeleteUsers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.DeleteUsersRequest,
    user_management_users_pb.DeleteUsersResponse,
    (request: user_management_users_pb.DeleteUsersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.DeleteUsersResponse.deserializeBinary
  );

  deleteUsers(
    request: user_management_users_pb.DeleteUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.DeleteUsersResponse>;

  deleteUsers(
    request: user_management_users_pb.DeleteUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeleteUsersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.DeleteUsersResponse>;

  deleteUsers(
    request: user_management_users_pb.DeleteUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeleteUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/DeleteUsers',
        request,
        metadata || {},
        this.methodDescriptorDeleteUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/DeleteUsers',
    request,
    metadata || {},
    this.methodDescriptorDeleteUsers);
  }

  methodDescriptorGetUserProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetUserProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetUserProfileRequest,
    user_management_users_pb.GetUserProfileResponse,
    (request: user_management_users_pb.GetUserProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetUserProfileResponse.deserializeBinary
  );

  getUserProfile(
    request: user_management_users_pb.GetUserProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetUserProfileResponse>;

  getUserProfile(
    request: user_management_users_pb.GetUserProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetUserProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetUserProfileResponse>;

  getUserProfile(
    request: user_management_users_pb.GetUserProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetUserProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetUserProfile',
        request,
        metadata || {},
        this.methodDescriptorGetUserProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetUserProfile',
    request,
    metadata || {},
    this.methodDescriptorGetUserProfile);
  }

  methodDescriptorUpdateAdminProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/UpdateAdminProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.UpdateAdminProfileRequest,
    user_management_users_pb.UpdateAdminProfileResponse,
    (request: user_management_users_pb.UpdateAdminProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.UpdateAdminProfileResponse.deserializeBinary
  );

  updateAdminProfile(
    request: user_management_users_pb.UpdateAdminProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.UpdateAdminProfileResponse>;

  updateAdminProfile(
    request: user_management_users_pb.UpdateAdminProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateAdminProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.UpdateAdminProfileResponse>;

  updateAdminProfile(
    request: user_management_users_pb.UpdateAdminProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateAdminProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/UpdateAdminProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateAdminProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/UpdateAdminProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateAdminProfile);
  }

  methodDescriptorUpdateSchoolProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/UpdateSchoolProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.UpdateSchoolProfileRequest,
    user_management_users_pb.UpdateSchoolProfileResponse,
    (request: user_management_users_pb.UpdateSchoolProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.UpdateSchoolProfileResponse.deserializeBinary
  );

  updateSchoolProfile(
    request: user_management_users_pb.UpdateSchoolProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.UpdateSchoolProfileResponse>;

  updateSchoolProfile(
    request: user_management_users_pb.UpdateSchoolProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateSchoolProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.UpdateSchoolProfileResponse>;

  updateSchoolProfile(
    request: user_management_users_pb.UpdateSchoolProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateSchoolProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/UpdateSchoolProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateSchoolProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/UpdateSchoolProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateSchoolProfile);
  }

  methodDescriptorUpdateStudentProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/UpdateStudentProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.UpdateStudentProfileRequest,
    user_management_users_pb.UpdateStudentProfileResponse,
    (request: user_management_users_pb.UpdateStudentProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.UpdateStudentProfileResponse.deserializeBinary
  );

  updateStudentProfile(
    request: user_management_users_pb.UpdateStudentProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.UpdateStudentProfileResponse>;

  updateStudentProfile(
    request: user_management_users_pb.UpdateStudentProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateStudentProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.UpdateStudentProfileResponse>;

  updateStudentProfile(
    request: user_management_users_pb.UpdateStudentProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateStudentProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/UpdateStudentProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateStudentProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/UpdateStudentProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateStudentProfile);
  }

  methodDescriptorUpdateVolunteerProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/UpdateVolunteerProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.UpdateVolunteerProfileRequest,
    user_management_users_pb.UpdateVolunteerProfileResponse,
    (request: user_management_users_pb.UpdateVolunteerProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.UpdateVolunteerProfileResponse.deserializeBinary
  );

  updateVolunteerProfile(
    request: user_management_users_pb.UpdateVolunteerProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.UpdateVolunteerProfileResponse>;

  updateVolunteerProfile(
    request: user_management_users_pb.UpdateVolunteerProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateVolunteerProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.UpdateVolunteerProfileResponse>;

  updateVolunteerProfile(
    request: user_management_users_pb.UpdateVolunteerProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.UpdateVolunteerProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/UpdateVolunteerProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateVolunteerProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/UpdateVolunteerProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateVolunteerProfile);
  }

  methodDescriptorDeleteUserProfile = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/DeleteUserProfile',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.DeleteUserProfileRequest,
    user_management_users_pb.DeleteUserProfileResponse,
    (request: user_management_users_pb.DeleteUserProfileRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.DeleteUserProfileResponse.deserializeBinary
  );

  deleteUserProfile(
    request: user_management_users_pb.DeleteUserProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.DeleteUserProfileResponse>;

  deleteUserProfile(
    request: user_management_users_pb.DeleteUserProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeleteUserProfileResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.DeleteUserProfileResponse>;

  deleteUserProfile(
    request: user_management_users_pb.DeleteUserProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeleteUserProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/DeleteUserProfile',
        request,
        metadata || {},
        this.methodDescriptorDeleteUserProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/DeleteUserProfile',
    request,
    metadata || {},
    this.methodDescriptorDeleteUserProfile);
  }

  methodDescriptorDeactivateAccount = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/DeactivateAccount',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.DeactivateAccountRequest,
    user_management_users_pb.DeactivateAccountResponse,
    (request: user_management_users_pb.DeactivateAccountRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.DeactivateAccountResponse.deserializeBinary
  );

  deactivateAccount(
    request: user_management_users_pb.DeactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.DeactivateAccountResponse>;

  deactivateAccount(
    request: user_management_users_pb.DeactivateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeactivateAccountResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.DeactivateAccountResponse>;

  deactivateAccount(
    request: user_management_users_pb.DeactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.DeactivateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/DeactivateAccount',
        request,
        metadata || {},
        this.methodDescriptorDeactivateAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/DeactivateAccount',
    request,
    metadata || {},
    this.methodDescriptorDeactivateAccount);
  }

  methodDescriptorReactivateAccount = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/ReactivateAccount',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.ReactivateAccountRequest,
    user_management_users_pb.ReactivateAccountResponse,
    (request: user_management_users_pb.ReactivateAccountRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.ReactivateAccountResponse.deserializeBinary
  );

  reactivateAccount(
    request: user_management_users_pb.ReactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.ReactivateAccountResponse>;

  reactivateAccount(
    request: user_management_users_pb.ReactivateAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ReactivateAccountResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.ReactivateAccountResponse>;

  reactivateAccount(
    request: user_management_users_pb.ReactivateAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.ReactivateAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/ReactivateAccount',
        request,
        metadata || {},
        this.methodDescriptorReactivateAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/ReactivateAccount',
    request,
    metadata || {},
    this.methodDescriptorReactivateAccount);
  }

  methodDescriptorGetAccountStatus = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetAccountStatus',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetAccountStatusRequest,
    user_management_users_pb.GetAccountStatusResponse,
    (request: user_management_users_pb.GetAccountStatusRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetAccountStatusResponse.deserializeBinary
  );

  getAccountStatus(
    request: user_management_users_pb.GetAccountStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetAccountStatusResponse>;

  getAccountStatus(
    request: user_management_users_pb.GetAccountStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetAccountStatusResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetAccountStatusResponse>;

  getAccountStatus(
    request: user_management_users_pb.GetAccountStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetAccountStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetAccountStatus',
        request,
        metadata || {},
        this.methodDescriptorGetAccountStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetAccountStatus',
    request,
    metadata || {},
    this.methodDescriptorGetAccountStatus);
  }

  methodDescriptorGetCountries = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetCountries',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetCountriesRequest,
    user_management_users_pb.GetCountriesResponse,
    (request: user_management_users_pb.GetCountriesRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetCountriesResponse.deserializeBinary
  );

  getCountries(
    request: user_management_users_pb.GetCountriesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetCountriesResponse>;

  getCountries(
    request: user_management_users_pb.GetCountriesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetCountriesResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetCountriesResponse>;

  getCountries(
    request: user_management_users_pb.GetCountriesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetCountriesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetCountries',
        request,
        metadata || {},
        this.methodDescriptorGetCountries,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetCountries',
    request,
    metadata || {},
    this.methodDescriptorGetCountries);
  }

  methodDescriptorGetCountriesNoAuth = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetCountriesNoAuth',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetCountriesNoAuthRequest,
    user_management_users_pb.GetCountriesNoAuthResponse,
    (request: user_management_users_pb.GetCountriesNoAuthRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetCountriesNoAuthResponse.deserializeBinary
  );

  getCountriesNoAuth(
    request: user_management_users_pb.GetCountriesNoAuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetCountriesNoAuthResponse>;

  getCountriesNoAuth(
    request: user_management_users_pb.GetCountriesNoAuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetCountriesNoAuthResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetCountriesNoAuthResponse>;

  getCountriesNoAuth(
    request: user_management_users_pb.GetCountriesNoAuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetCountriesNoAuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetCountriesNoAuth',
        request,
        metadata || {},
        this.methodDescriptorGetCountriesNoAuth,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetCountriesNoAuth',
    request,
    metadata || {},
    this.methodDescriptorGetCountriesNoAuth);
  }

  methodDescriptorGetSchools = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetSchools',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetSchoolsRequest,
    user_management_users_pb.GetSchoolsResponse,
    (request: user_management_users_pb.GetSchoolsRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetSchoolsResponse.deserializeBinary
  );

  getSchools(
    request: user_management_users_pb.GetSchoolsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetSchoolsResponse>;

  getSchools(
    request: user_management_users_pb.GetSchoolsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetSchoolsResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetSchoolsResponse>;

  getSchools(
    request: user_management_users_pb.GetSchoolsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetSchoolsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetSchools',
        request,
        metadata || {},
        this.methodDescriptorGetSchools,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetSchools',
    request,
    metadata || {},
    this.methodDescriptorGetSchools);
  }

  methodDescriptorGetStudents = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetStudents',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetStudentsRequest,
    user_management_users_pb.GetStudentsResponse,
    (request: user_management_users_pb.GetStudentsRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetStudentsResponse.deserializeBinary
  );

  getStudents(
    request: user_management_users_pb.GetStudentsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetStudentsResponse>;

  getStudents(
    request: user_management_users_pb.GetStudentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetStudentsResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetStudentsResponse>;

  getStudents(
    request: user_management_users_pb.GetStudentsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetStudentsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetStudents',
        request,
        metadata || {},
        this.methodDescriptorGetStudents,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetStudents',
    request,
    metadata || {},
    this.methodDescriptorGetStudents);
  }

  methodDescriptorGetVolunteers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetVolunteers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetVolunteersRequest,
    user_management_users_pb.GetVolunteersResponse,
    (request: user_management_users_pb.GetVolunteersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetVolunteersResponse.deserializeBinary
  );

  getVolunteers(
    request: user_management_users_pb.GetVolunteersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetVolunteersResponse>;

  getVolunteers(
    request: user_management_users_pb.GetVolunteersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetVolunteersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetVolunteersResponse>;

  getVolunteers(
    request: user_management_users_pb.GetVolunteersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetVolunteersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetVolunteers',
        request,
        metadata || {},
        this.methodDescriptorGetVolunteers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetVolunteers',
    request,
    metadata || {},
    this.methodDescriptorGetVolunteers);
  }

  methodDescriptorGetAllUsers = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetAllUsers',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetAllUsersRequest,
    user_management_users_pb.GetAllUsersResponse,
    (request: user_management_users_pb.GetAllUsersRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetAllUsersResponse.deserializeBinary
  );

  getAllUsers(
    request: user_management_users_pb.GetAllUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetAllUsersResponse>;

  getAllUsers(
    request: user_management_users_pb.GetAllUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetAllUsersResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetAllUsersResponse>;

  getAllUsers(
    request: user_management_users_pb.GetAllUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetAllUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetAllUsers',
        request,
        metadata || {},
        this.methodDescriptorGetAllUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetAllUsers',
    request,
    metadata || {},
    this.methodDescriptorGetAllUsers);
  }

  methodDescriptorGetUserStatistics = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetUserStatistics',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetUserStatisticsRequest,
    user_management_users_pb.GetUserStatisticsResponse,
    (request: user_management_users_pb.GetUserStatisticsRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetUserStatisticsResponse.deserializeBinary
  );

  getUserStatistics(
    request: user_management_users_pb.GetUserStatisticsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetUserStatisticsResponse>;

  getUserStatistics(
    request: user_management_users_pb.GetUserStatisticsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetUserStatisticsResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetUserStatisticsResponse>;

  getUserStatistics(
    request: user_management_users_pb.GetUserStatisticsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetUserStatisticsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetUserStatistics',
        request,
        metadata || {},
        this.methodDescriptorGetUserStatistics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetUserStatistics',
    request,
    metadata || {},
    this.methodDescriptorGetUserStatistics);
  }

  methodDescriptorGetVolunteersAndAdmins = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetVolunteersAndAdmins',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetVolunteersAndAdminsRequest,
    user_management_users_pb.GetVolunteersAndAdminsResponse,
    (request: user_management_users_pb.GetVolunteersAndAdminsRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetVolunteersAndAdminsResponse.deserializeBinary
  );

  getVolunteersAndAdmins(
    request: user_management_users_pb.GetVolunteersAndAdminsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetVolunteersAndAdminsResponse>;

  getVolunteersAndAdmins(
    request: user_management_users_pb.GetVolunteersAndAdminsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetVolunteersAndAdminsResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetVolunteersAndAdminsResponse>;

  getVolunteersAndAdmins(
    request: user_management_users_pb.GetVolunteersAndAdminsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetVolunteersAndAdminsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetVolunteersAndAdmins',
        request,
        metadata || {},
        this.methodDescriptorGetVolunteersAndAdmins,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetVolunteersAndAdmins',
    request,
    metadata || {},
    this.methodDescriptorGetVolunteersAndAdmins);
  }

  methodDescriptorGetSchoolsNoAuth = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetSchoolsNoAuth',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetSchoolsNoAuthRequest,
    user_management_users_pb.GetSchoolsNoAuthResponse,
    (request: user_management_users_pb.GetSchoolsNoAuthRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetSchoolsNoAuthResponse.deserializeBinary
  );

  getSchoolsNoAuth(
    request: user_management_users_pb.GetSchoolsNoAuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetSchoolsNoAuthResponse>;

  getSchoolsNoAuth(
    request: user_management_users_pb.GetSchoolsNoAuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetSchoolsNoAuthResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetSchoolsNoAuthResponse>;

  getSchoolsNoAuth(
    request: user_management_users_pb.GetSchoolsNoAuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetSchoolsNoAuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetSchoolsNoAuth',
        request,
        metadata || {},
        this.methodDescriptorGetSchoolsNoAuth,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetSchoolsNoAuth',
    request,
    metadata || {},
    this.methodDescriptorGetSchoolsNoAuth);
  }

  methodDescriptorInitiatePasswordUpdate = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/InitiatePasswordUpdate',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.InitiatePasswordUpdateRequest,
    user_management_users_pb.InitiatePasswordUpdateResponse,
    (request: user_management_users_pb.InitiatePasswordUpdateRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.InitiatePasswordUpdateResponse.deserializeBinary
  );

  initiatePasswordUpdate(
    request: user_management_users_pb.InitiatePasswordUpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.InitiatePasswordUpdateResponse>;

  initiatePasswordUpdate(
    request: user_management_users_pb.InitiatePasswordUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.InitiatePasswordUpdateResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.InitiatePasswordUpdateResponse>;

  initiatePasswordUpdate(
    request: user_management_users_pb.InitiatePasswordUpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.InitiatePasswordUpdateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/InitiatePasswordUpdate',
        request,
        metadata || {},
        this.methodDescriptorInitiatePasswordUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/InitiatePasswordUpdate',
    request,
    metadata || {},
    this.methodDescriptorInitiatePasswordUpdate);
  }

  methodDescriptorVerifyAndUpdatePassword = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/VerifyAndUpdatePassword',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.VerifyAndUpdatePasswordRequest,
    user_management_users_pb.VerifyAndUpdatePasswordResponse,
    (request: user_management_users_pb.VerifyAndUpdatePasswordRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.VerifyAndUpdatePasswordResponse.deserializeBinary
  );

  verifyAndUpdatePassword(
    request: user_management_users_pb.VerifyAndUpdatePasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.VerifyAndUpdatePasswordResponse>;

  verifyAndUpdatePassword(
    request: user_management_users_pb.VerifyAndUpdatePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.VerifyAndUpdatePasswordResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.VerifyAndUpdatePasswordResponse>;

  verifyAndUpdatePassword(
    request: user_management_users_pb.VerifyAndUpdatePasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.VerifyAndUpdatePasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/VerifyAndUpdatePassword',
        request,
        metadata || {},
        this.methodDescriptorVerifyAndUpdatePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/VerifyAndUpdatePassword',
    request,
    metadata || {},
    this.methodDescriptorVerifyAndUpdatePassword);
  }

  methodDescriptorGetSchoolIDsByNames = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetSchoolIDsByNames',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetSchoolIDsByNamesRequest,
    user_management_users_pb.GetSchoolIDsByNamesResponse,
    (request: user_management_users_pb.GetSchoolIDsByNamesRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetSchoolIDsByNamesResponse.deserializeBinary
  );

  getSchoolIDsByNames(
    request: user_management_users_pb.GetSchoolIDsByNamesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetSchoolIDsByNamesResponse>;

  getSchoolIDsByNames(
    request: user_management_users_pb.GetSchoolIDsByNamesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetSchoolIDsByNamesResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetSchoolIDsByNamesResponse>;

  getSchoolIDsByNames(
    request: user_management_users_pb.GetSchoolIDsByNamesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetSchoolIDsByNamesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetSchoolIDsByNames',
        request,
        metadata || {},
        this.methodDescriptorGetSchoolIDsByNames,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetSchoolIDsByNames',
    request,
    metadata || {},
    this.methodDescriptorGetSchoolIDsByNames);
  }

  methodDescriptorGetStudentsBySchoolContact = new grpcWeb.MethodDescriptor(
    '/user_management.UserManagementService/GetStudentsBySchoolContact',
    grpcWeb.MethodType.UNARY,
    user_management_users_pb.GetStudentsBySchoolContactRequest,
    user_management_users_pb.GetStudentsBySchoolContactResponse,
    (request: user_management_users_pb.GetStudentsBySchoolContactRequest) => {
      return request.serializeBinary();
    },
    user_management_users_pb.GetStudentsBySchoolContactResponse.deserializeBinary
  );

  getStudentsBySchoolContact(
    request: user_management_users_pb.GetStudentsBySchoolContactRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_management_users_pb.GetStudentsBySchoolContactResponse>;

  getStudentsBySchoolContact(
    request: user_management_users_pb.GetStudentsBySchoolContactRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetStudentsBySchoolContactResponse) => void): grpcWeb.ClientReadableStream<user_management_users_pb.GetStudentsBySchoolContactResponse>;

  getStudentsBySchoolContact(
    request: user_management_users_pb.GetStudentsBySchoolContactRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_management_users_pb.GetStudentsBySchoolContactResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user_management.UserManagementService/GetStudentsBySchoolContact',
        request,
        metadata || {},
        this.methodDescriptorGetStudentsBySchoolContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user_management.UserManagementService/GetStudentsBySchoolContact',
    request,
    metadata || {},
    this.methodDescriptorGetStudentsBySchoolContact);
  }

}

