// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/grpc/proto/user_management/users.proto

package user_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserManagementService_GetPendingUsers_FullMethodName            = "/user_management.UserManagementService/GetPendingUsers"
	UserManagementService_ApproveUser_FullMethodName                = "/user_management.UserManagementService/ApproveUser"
	UserManagementService_RejectUser_FullMethodName                 = "/user_management.UserManagementService/RejectUser"
	UserManagementService_ApproveUsers_FullMethodName               = "/user_management.UserManagementService/ApproveUsers"
	UserManagementService_RejectUsers_FullMethodName                = "/user_management.UserManagementService/RejectUsers"
	UserManagementService_DeleteUsers_FullMethodName                = "/user_management.UserManagementService/DeleteUsers"
	UserManagementService_GetUserProfile_FullMethodName             = "/user_management.UserManagementService/GetUserProfile"
	UserManagementService_UpdateAdminProfile_FullMethodName         = "/user_management.UserManagementService/UpdateAdminProfile"
	UserManagementService_UpdateSchoolProfile_FullMethodName        = "/user_management.UserManagementService/UpdateSchoolProfile"
	UserManagementService_UpdateStudentProfile_FullMethodName       = "/user_management.UserManagementService/UpdateStudentProfile"
	UserManagementService_UpdateVolunteerProfile_FullMethodName     = "/user_management.UserManagementService/UpdateVolunteerProfile"
	UserManagementService_DeleteUserProfile_FullMethodName          = "/user_management.UserManagementService/DeleteUserProfile"
	UserManagementService_DeactivateAccount_FullMethodName          = "/user_management.UserManagementService/DeactivateAccount"
	UserManagementService_ReactivateAccount_FullMethodName          = "/user_management.UserManagementService/ReactivateAccount"
	UserManagementService_GetAccountStatus_FullMethodName           = "/user_management.UserManagementService/GetAccountStatus"
	UserManagementService_GetCountries_FullMethodName               = "/user_management.UserManagementService/GetCountries"
	UserManagementService_GetCountriesNoAuth_FullMethodName         = "/user_management.UserManagementService/GetCountriesNoAuth"
	UserManagementService_GetSchools_FullMethodName                 = "/user_management.UserManagementService/GetSchools"
	UserManagementService_GetStudents_FullMethodName                = "/user_management.UserManagementService/GetStudents"
	UserManagementService_GetVolunteers_FullMethodName              = "/user_management.UserManagementService/GetVolunteers"
	UserManagementService_GetAllUsers_FullMethodName                = "/user_management.UserManagementService/GetAllUsers"
	UserManagementService_GetUserStatistics_FullMethodName          = "/user_management.UserManagementService/GetUserStatistics"
	UserManagementService_GetVolunteersAndAdmins_FullMethodName     = "/user_management.UserManagementService/GetVolunteersAndAdmins"
	UserManagementService_GetSchoolsNoAuth_FullMethodName           = "/user_management.UserManagementService/GetSchoolsNoAuth"
	UserManagementService_InitiatePasswordUpdate_FullMethodName     = "/user_management.UserManagementService/InitiatePasswordUpdate"
	UserManagementService_VerifyAndUpdatePassword_FullMethodName    = "/user_management.UserManagementService/VerifyAndUpdatePassword"
	UserManagementService_GetSchoolIDsByNames_FullMethodName        = "/user_management.UserManagementService/GetSchoolIDsByNames"
	UserManagementService_GetStudentsBySchoolContact_FullMethodName = "/user_management.UserManagementService/GetStudentsBySchoolContact"
)

// UserManagementServiceClient is the client API for UserManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementServiceClient interface {
	GetPendingUsers(ctx context.Context, in *GetPendingUsersRequest, opts ...grpc.CallOption) (*GetPendingUsersResponse, error)
	ApproveUser(ctx context.Context, in *ApproveUserRequest, opts ...grpc.CallOption) (*ApproveUserResponse, error)
	RejectUser(ctx context.Context, in *RejectUserRequest, opts ...grpc.CallOption) (*RejectUserResponse, error)
	ApproveUsers(ctx context.Context, in *ApproveUsersRequest, opts ...grpc.CallOption) (*ApproveUsersResponse, error)
	RejectUsers(ctx context.Context, in *RejectUsersRequest, opts ...grpc.CallOption) (*RejectUsersResponse, error)
	DeleteUsers(ctx context.Context, in *DeleteUsersRequest, opts ...grpc.CallOption) (*DeleteUsersResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	UpdateAdminProfile(ctx context.Context, in *UpdateAdminProfileRequest, opts ...grpc.CallOption) (*UpdateAdminProfileResponse, error)
	UpdateSchoolProfile(ctx context.Context, in *UpdateSchoolProfileRequest, opts ...grpc.CallOption) (*UpdateSchoolProfileResponse, error)
	UpdateStudentProfile(ctx context.Context, in *UpdateStudentProfileRequest, opts ...grpc.CallOption) (*UpdateStudentProfileResponse, error)
	UpdateVolunteerProfile(ctx context.Context, in *UpdateVolunteerProfileRequest, opts ...grpc.CallOption) (*UpdateVolunteerProfileResponse, error)
	DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error)
	DeactivateAccount(ctx context.Context, in *DeactivateAccountRequest, opts ...grpc.CallOption) (*DeactivateAccountResponse, error)
	ReactivateAccount(ctx context.Context, in *ReactivateAccountRequest, opts ...grpc.CallOption) (*ReactivateAccountResponse, error)
	GetAccountStatus(ctx context.Context, in *GetAccountStatusRequest, opts ...grpc.CallOption) (*GetAccountStatusResponse, error)
	GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error)
	GetCountriesNoAuth(ctx context.Context, in *GetCountriesNoAuthRequest, opts ...grpc.CallOption) (*GetCountriesNoAuthResponse, error)
	GetSchools(ctx context.Context, in *GetSchoolsRequest, opts ...grpc.CallOption) (*GetSchoolsResponse, error)
	GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (*GetStudentsResponse, error)
	GetVolunteers(ctx context.Context, in *GetVolunteersRequest, opts ...grpc.CallOption) (*GetVolunteersResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	GetUserStatistics(ctx context.Context, in *GetUserStatisticsRequest, opts ...grpc.CallOption) (*GetUserStatisticsResponse, error)
	GetVolunteersAndAdmins(ctx context.Context, in *GetVolunteersAndAdminsRequest, opts ...grpc.CallOption) (*GetVolunteersAndAdminsResponse, error)
	GetSchoolsNoAuth(ctx context.Context, in *GetSchoolsNoAuthRequest, opts ...grpc.CallOption) (*GetSchoolsNoAuthResponse, error)
	InitiatePasswordUpdate(ctx context.Context, in *InitiatePasswordUpdateRequest, opts ...grpc.CallOption) (*InitiatePasswordUpdateResponse, error)
	VerifyAndUpdatePassword(ctx context.Context, in *VerifyAndUpdatePasswordRequest, opts ...grpc.CallOption) (*VerifyAndUpdatePasswordResponse, error)
	GetSchoolIDsByNames(ctx context.Context, in *GetSchoolIDsByNamesRequest, opts ...grpc.CallOption) (*GetSchoolIDsByNamesResponse, error)
	GetStudentsBySchoolContact(ctx context.Context, in *GetStudentsBySchoolContactRequest, opts ...grpc.CallOption) (*GetStudentsBySchoolContactResponse, error)
}

type userManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementServiceClient(cc grpc.ClientConnInterface) UserManagementServiceClient {
	return &userManagementServiceClient{cc}
}

func (c *userManagementServiceClient) GetPendingUsers(ctx context.Context, in *GetPendingUsersRequest, opts ...grpc.CallOption) (*GetPendingUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingUsersResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetPendingUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) ApproveUser(ctx context.Context, in *ApproveUserRequest, opts ...grpc.CallOption) (*ApproveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveUserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_ApproveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) RejectUser(ctx context.Context, in *RejectUserRequest, opts ...grpc.CallOption) (*RejectUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectUserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_RejectUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) ApproveUsers(ctx context.Context, in *ApproveUsersRequest, opts ...grpc.CallOption) (*ApproveUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveUsersResponse)
	err := c.cc.Invoke(ctx, UserManagementService_ApproveUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) RejectUsers(ctx context.Context, in *RejectUsersRequest, opts ...grpc.CallOption) (*RejectUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectUsersResponse)
	err := c.cc.Invoke(ctx, UserManagementService_RejectUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) DeleteUsers(ctx context.Context, in *DeleteUsersRequest, opts ...grpc.CallOption) (*DeleteUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUsersResponse)
	err := c.cc.Invoke(ctx, UserManagementService_DeleteUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UpdateAdminProfile(ctx context.Context, in *UpdateAdminProfileRequest, opts ...grpc.CallOption) (*UpdateAdminProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdminProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UpdateAdminProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UpdateSchoolProfile(ctx context.Context, in *UpdateSchoolProfileRequest, opts ...grpc.CallOption) (*UpdateSchoolProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSchoolProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UpdateSchoolProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UpdateStudentProfile(ctx context.Context, in *UpdateStudentProfileRequest, opts ...grpc.CallOption) (*UpdateStudentProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UpdateStudentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UpdateVolunteerProfile(ctx context.Context, in *UpdateVolunteerProfileRequest, opts ...grpc.CallOption) (*UpdateVolunteerProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVolunteerProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UpdateVolunteerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_DeleteUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) DeactivateAccount(ctx context.Context, in *DeactivateAccountRequest, opts ...grpc.CallOption) (*DeactivateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateAccountResponse)
	err := c.cc.Invoke(ctx, UserManagementService_DeactivateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) ReactivateAccount(ctx context.Context, in *ReactivateAccountRequest, opts ...grpc.CallOption) (*ReactivateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactivateAccountResponse)
	err := c.cc.Invoke(ctx, UserManagementService_ReactivateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetAccountStatus(ctx context.Context, in *GetAccountStatusRequest, opts ...grpc.CallOption) (*GetAccountStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountStatusResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetAccountStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountriesResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetCountriesNoAuth(ctx context.Context, in *GetCountriesNoAuthRequest, opts ...grpc.CallOption) (*GetCountriesNoAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountriesNoAuthResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetCountriesNoAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetSchools(ctx context.Context, in *GetSchoolsRequest, opts ...grpc.CallOption) (*GetSchoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchoolsResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetSchools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (*GetStudentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentsResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetVolunteers(ctx context.Context, in *GetVolunteersRequest, opts ...grpc.CallOption) (*GetVolunteersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolunteersResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetVolunteers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetUserStatistics(ctx context.Context, in *GetUserStatisticsRequest, opts ...grpc.CallOption) (*GetUserStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStatisticsResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetUserStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetVolunteersAndAdmins(ctx context.Context, in *GetVolunteersAndAdminsRequest, opts ...grpc.CallOption) (*GetVolunteersAndAdminsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolunteersAndAdminsResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetVolunteersAndAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetSchoolsNoAuth(ctx context.Context, in *GetSchoolsNoAuthRequest, opts ...grpc.CallOption) (*GetSchoolsNoAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchoolsNoAuthResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetSchoolsNoAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) InitiatePasswordUpdate(ctx context.Context, in *InitiatePasswordUpdateRequest, opts ...grpc.CallOption) (*InitiatePasswordUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePasswordUpdateResponse)
	err := c.cc.Invoke(ctx, UserManagementService_InitiatePasswordUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) VerifyAndUpdatePassword(ctx context.Context, in *VerifyAndUpdatePasswordRequest, opts ...grpc.CallOption) (*VerifyAndUpdatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAndUpdatePasswordResponse)
	err := c.cc.Invoke(ctx, UserManagementService_VerifyAndUpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetSchoolIDsByNames(ctx context.Context, in *GetSchoolIDsByNamesRequest, opts ...grpc.CallOption) (*GetSchoolIDsByNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchoolIDsByNamesResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetSchoolIDsByNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetStudentsBySchoolContact(ctx context.Context, in *GetStudentsBySchoolContactRequest, opts ...grpc.CallOption) (*GetStudentsBySchoolContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentsBySchoolContactResponse)
	err := c.cc.Invoke(ctx, UserManagementService_GetStudentsBySchoolContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementServiceServer is the server API for UserManagementService service.
// All implementations must embed UnimplementedUserManagementServiceServer
// for forward compatibility.
type UserManagementServiceServer interface {
	GetPendingUsers(context.Context, *GetPendingUsersRequest) (*GetPendingUsersResponse, error)
	ApproveUser(context.Context, *ApproveUserRequest) (*ApproveUserResponse, error)
	RejectUser(context.Context, *RejectUserRequest) (*RejectUserResponse, error)
	ApproveUsers(context.Context, *ApproveUsersRequest) (*ApproveUsersResponse, error)
	RejectUsers(context.Context, *RejectUsersRequest) (*RejectUsersResponse, error)
	DeleteUsers(context.Context, *DeleteUsersRequest) (*DeleteUsersResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	UpdateAdminProfile(context.Context, *UpdateAdminProfileRequest) (*UpdateAdminProfileResponse, error)
	UpdateSchoolProfile(context.Context, *UpdateSchoolProfileRequest) (*UpdateSchoolProfileResponse, error)
	UpdateStudentProfile(context.Context, *UpdateStudentProfileRequest) (*UpdateStudentProfileResponse, error)
	UpdateVolunteerProfile(context.Context, *UpdateVolunteerProfileRequest) (*UpdateVolunteerProfileResponse, error)
	DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error)
	DeactivateAccount(context.Context, *DeactivateAccountRequest) (*DeactivateAccountResponse, error)
	ReactivateAccount(context.Context, *ReactivateAccountRequest) (*ReactivateAccountResponse, error)
	GetAccountStatus(context.Context, *GetAccountStatusRequest) (*GetAccountStatusResponse, error)
	GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error)
	GetCountriesNoAuth(context.Context, *GetCountriesNoAuthRequest) (*GetCountriesNoAuthResponse, error)
	GetSchools(context.Context, *GetSchoolsRequest) (*GetSchoolsResponse, error)
	GetStudents(context.Context, *GetStudentsRequest) (*GetStudentsResponse, error)
	GetVolunteers(context.Context, *GetVolunteersRequest) (*GetVolunteersResponse, error)
	GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error)
	GetUserStatistics(context.Context, *GetUserStatisticsRequest) (*GetUserStatisticsResponse, error)
	GetVolunteersAndAdmins(context.Context, *GetVolunteersAndAdminsRequest) (*GetVolunteersAndAdminsResponse, error)
	GetSchoolsNoAuth(context.Context, *GetSchoolsNoAuthRequest) (*GetSchoolsNoAuthResponse, error)
	InitiatePasswordUpdate(context.Context, *InitiatePasswordUpdateRequest) (*InitiatePasswordUpdateResponse, error)
	VerifyAndUpdatePassword(context.Context, *VerifyAndUpdatePasswordRequest) (*VerifyAndUpdatePasswordResponse, error)
	GetSchoolIDsByNames(context.Context, *GetSchoolIDsByNamesRequest) (*GetSchoolIDsByNamesResponse, error)
	GetStudentsBySchoolContact(context.Context, *GetStudentsBySchoolContactRequest) (*GetStudentsBySchoolContactResponse, error)
	mustEmbedUnimplementedUserManagementServiceServer()
}

// UnimplementedUserManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserManagementServiceServer struct{}

func (UnimplementedUserManagementServiceServer) GetPendingUsers(context.Context, *GetPendingUsersRequest) (*GetPendingUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingUsers not implemented")
}
func (UnimplementedUserManagementServiceServer) ApproveUser(context.Context, *ApproveUserRequest) (*ApproveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveUser not implemented")
}
func (UnimplementedUserManagementServiceServer) RejectUser(context.Context, *RejectUserRequest) (*RejectUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectUser not implemented")
}
func (UnimplementedUserManagementServiceServer) ApproveUsers(context.Context, *ApproveUsersRequest) (*ApproveUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveUsers not implemented")
}
func (UnimplementedUserManagementServiceServer) RejectUsers(context.Context, *RejectUsersRequest) (*RejectUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectUsers not implemented")
}
func (UnimplementedUserManagementServiceServer) DeleteUsers(context.Context, *DeleteUsersRequest) (*DeleteUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedUserManagementServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) UpdateAdminProfile(context.Context, *UpdateAdminProfileRequest) (*UpdateAdminProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) UpdateSchoolProfile(context.Context, *UpdateSchoolProfileRequest) (*UpdateSchoolProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchoolProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) UpdateStudentProfile(context.Context, *UpdateStudentProfileRequest) (*UpdateStudentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) UpdateVolunteerProfile(context.Context, *UpdateVolunteerProfileRequest) (*UpdateVolunteerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolunteerProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) DeactivateAccount(context.Context, *DeactivateAccountRequest) (*DeactivateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAccount not implemented")
}
func (UnimplementedUserManagementServiceServer) ReactivateAccount(context.Context, *ReactivateAccountRequest) (*ReactivateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateAccount not implemented")
}
func (UnimplementedUserManagementServiceServer) GetAccountStatus(context.Context, *GetAccountStatusRequest) (*GetAccountStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStatus not implemented")
}
func (UnimplementedUserManagementServiceServer) GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedUserManagementServiceServer) GetCountriesNoAuth(context.Context, *GetCountriesNoAuthRequest) (*GetCountriesNoAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountriesNoAuth not implemented")
}
func (UnimplementedUserManagementServiceServer) GetSchools(context.Context, *GetSchoolsRequest) (*GetSchoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchools not implemented")
}
func (UnimplementedUserManagementServiceServer) GetStudents(context.Context, *GetStudentsRequest) (*GetStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedUserManagementServiceServer) GetVolunteers(context.Context, *GetVolunteersRequest) (*GetVolunteersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolunteers not implemented")
}
func (UnimplementedUserManagementServiceServer) GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserManagementServiceServer) GetUserStatistics(context.Context, *GetUserStatisticsRequest) (*GetUserStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistics not implemented")
}
func (UnimplementedUserManagementServiceServer) GetVolunteersAndAdmins(context.Context, *GetVolunteersAndAdminsRequest) (*GetVolunteersAndAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolunteersAndAdmins not implemented")
}
func (UnimplementedUserManagementServiceServer) GetSchoolsNoAuth(context.Context, *GetSchoolsNoAuthRequest) (*GetSchoolsNoAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolsNoAuth not implemented")
}
func (UnimplementedUserManagementServiceServer) InitiatePasswordUpdate(context.Context, *InitiatePasswordUpdateRequest) (*InitiatePasswordUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePasswordUpdate not implemented")
}
func (UnimplementedUserManagementServiceServer) VerifyAndUpdatePassword(context.Context, *VerifyAndUpdatePasswordRequest) (*VerifyAndUpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAndUpdatePassword not implemented")
}
func (UnimplementedUserManagementServiceServer) GetSchoolIDsByNames(context.Context, *GetSchoolIDsByNamesRequest) (*GetSchoolIDsByNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolIDsByNames not implemented")
}
func (UnimplementedUserManagementServiceServer) GetStudentsBySchoolContact(context.Context, *GetStudentsBySchoolContactRequest) (*GetStudentsBySchoolContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsBySchoolContact not implemented")
}
func (UnimplementedUserManagementServiceServer) mustEmbedUnimplementedUserManagementServiceServer() {}
func (UnimplementedUserManagementServiceServer) testEmbeddedByValue()                               {}

// UnsafeUserManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServiceServer will
// result in compilation errors.
type UnsafeUserManagementServiceServer interface {
	mustEmbedUnimplementedUserManagementServiceServer()
}

func RegisterUserManagementServiceServer(s grpc.ServiceRegistrar, srv UserManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserManagementService_ServiceDesc, srv)
}

func _UserManagementService_GetPendingUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetPendingUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetPendingUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetPendingUsers(ctx, req.(*GetPendingUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_ApproveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).ApproveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_ApproveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).ApproveUser(ctx, req.(*ApproveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_RejectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).RejectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_RejectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).RejectUser(ctx, req.(*RejectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_ApproveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).ApproveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_ApproveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).ApproveUsers(ctx, req.(*ApproveUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_RejectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).RejectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_RejectUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).RejectUsers(ctx, req.(*RejectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_DeleteUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).DeleteUsers(ctx, req.(*DeleteUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UpdateAdminProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UpdateAdminProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UpdateAdminProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UpdateAdminProfile(ctx, req.(*UpdateAdminProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UpdateSchoolProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchoolProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UpdateSchoolProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UpdateSchoolProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UpdateSchoolProfile(ctx, req.(*UpdateSchoolProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UpdateStudentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UpdateStudentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UpdateStudentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UpdateStudentProfile(ctx, req.(*UpdateStudentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UpdateVolunteerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolunteerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UpdateVolunteerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UpdateVolunteerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UpdateVolunteerProfile(ctx, req.(*UpdateVolunteerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_DeleteUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).DeleteUserProfile(ctx, req.(*DeleteUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_DeactivateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).DeactivateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_DeactivateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).DeactivateAccount(ctx, req.(*DeactivateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_ReactivateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).ReactivateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_ReactivateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).ReactivateAccount(ctx, req.(*ReactivateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetAccountStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetAccountStatus(ctx, req.(*GetAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetCountries(ctx, req.(*GetCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetCountriesNoAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesNoAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetCountriesNoAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetCountriesNoAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetCountriesNoAuth(ctx, req.(*GetCountriesNoAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetSchools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetSchools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetSchools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetSchools(ctx, req.(*GetSchoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetStudents(ctx, req.(*GetStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetVolunteers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolunteersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetVolunteers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetVolunteers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetVolunteers(ctx, req.(*GetVolunteersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetAllUsers(ctx, req.(*GetAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetUserStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetUserStatistics(ctx, req.(*GetUserStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetVolunteersAndAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolunteersAndAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetVolunteersAndAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetVolunteersAndAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetVolunteersAndAdmins(ctx, req.(*GetVolunteersAndAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetSchoolsNoAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchoolsNoAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetSchoolsNoAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetSchoolsNoAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetSchoolsNoAuth(ctx, req.(*GetSchoolsNoAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_InitiatePasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePasswordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).InitiatePasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_InitiatePasswordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).InitiatePasswordUpdate(ctx, req.(*InitiatePasswordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_VerifyAndUpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAndUpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).VerifyAndUpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_VerifyAndUpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).VerifyAndUpdatePassword(ctx, req.(*VerifyAndUpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetSchoolIDsByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchoolIDsByNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetSchoolIDsByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetSchoolIDsByNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetSchoolIDsByNames(ctx, req.(*GetSchoolIDsByNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetStudentsBySchoolContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsBySchoolContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetStudentsBySchoolContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetStudentsBySchoolContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetStudentsBySchoolContact(ctx, req.(*GetStudentsBySchoolContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagementService_ServiceDesc is the grpc.ServiceDesc for UserManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_management.UserManagementService",
	HandlerType: (*UserManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingUsers",
			Handler:    _UserManagementService_GetPendingUsers_Handler,
		},
		{
			MethodName: "ApproveUser",
			Handler:    _UserManagementService_ApproveUser_Handler,
		},
		{
			MethodName: "RejectUser",
			Handler:    _UserManagementService_RejectUser_Handler,
		},
		{
			MethodName: "ApproveUsers",
			Handler:    _UserManagementService_ApproveUsers_Handler,
		},
		{
			MethodName: "RejectUsers",
			Handler:    _UserManagementService_RejectUsers_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _UserManagementService_DeleteUsers_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserManagementService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateAdminProfile",
			Handler:    _UserManagementService_UpdateAdminProfile_Handler,
		},
		{
			MethodName: "UpdateSchoolProfile",
			Handler:    _UserManagementService_UpdateSchoolProfile_Handler,
		},
		{
			MethodName: "UpdateStudentProfile",
			Handler:    _UserManagementService_UpdateStudentProfile_Handler,
		},
		{
			MethodName: "UpdateVolunteerProfile",
			Handler:    _UserManagementService_UpdateVolunteerProfile_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _UserManagementService_DeleteUserProfile_Handler,
		},
		{
			MethodName: "DeactivateAccount",
			Handler:    _UserManagementService_DeactivateAccount_Handler,
		},
		{
			MethodName: "ReactivateAccount",
			Handler:    _UserManagementService_ReactivateAccount_Handler,
		},
		{
			MethodName: "GetAccountStatus",
			Handler:    _UserManagementService_GetAccountStatus_Handler,
		},
		{
			MethodName: "GetCountries",
			Handler:    _UserManagementService_GetCountries_Handler,
		},
		{
			MethodName: "GetCountriesNoAuth",
			Handler:    _UserManagementService_GetCountriesNoAuth_Handler,
		},
		{
			MethodName: "GetSchools",
			Handler:    _UserManagementService_GetSchools_Handler,
		},
		{
			MethodName: "GetStudents",
			Handler:    _UserManagementService_GetStudents_Handler,
		},
		{
			MethodName: "GetVolunteers",
			Handler:    _UserManagementService_GetVolunteers_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserManagementService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetUserStatistics",
			Handler:    _UserManagementService_GetUserStatistics_Handler,
		},
		{
			MethodName: "GetVolunteersAndAdmins",
			Handler:    _UserManagementService_GetVolunteersAndAdmins_Handler,
		},
		{
			MethodName: "GetSchoolsNoAuth",
			Handler:    _UserManagementService_GetSchoolsNoAuth_Handler,
		},
		{
			MethodName: "InitiatePasswordUpdate",
			Handler:    _UserManagementService_InitiatePasswordUpdate_Handler,
		},
		{
			MethodName: "VerifyAndUpdatePassword",
			Handler:    _UserManagementService_VerifyAndUpdatePassword_Handler,
		},
		{
			MethodName: "GetSchoolIDsByNames",
			Handler:    _UserManagementService_GetSchoolIDsByNames_Handler,
		},
		{
			MethodName: "GetStudentsBySchoolContact",
			Handler:    _UserManagementService_GetStudentsBySchoolContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/user_management/users.proto",
}
