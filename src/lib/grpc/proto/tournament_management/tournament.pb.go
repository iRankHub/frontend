// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: internal/grpc/proto/tournament_management/tournament.proto

package tournament_management

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum definitions
type LeagueType int32

const (
	LeagueType_local         LeagueType = 0
	LeagueType_international LeagueType = 1
)

// Enum value maps for LeagueType.
var (
	LeagueType_name = map[int32]string{
		0: "local",
		1: "international",
	}
	LeagueType_value = map[string]int32{
		"local":         0,
		"international": 1,
	}
)

func (x LeagueType) Enum() *LeagueType {
	p := new(LeagueType)
	*p = x
	return p
}

func (x LeagueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes[0].Descriptor()
}

func (LeagueType) Type() protoreflect.EnumType {
	return &file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes[0]
}

func (x LeagueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueType.Descriptor instead.
func (LeagueType) EnumDescriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{0}
}

// Message definitions
type LocalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provinces []string `protobuf:"bytes,1,rep,name=provinces,proto3" json:"provinces,omitempty"`
	Districts []string `protobuf:"bytes,2,rep,name=districts,proto3" json:"districts,omitempty"`
}

func (x *LocalDetails) Reset() {
	*x = LocalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDetails) ProtoMessage() {}

func (x *LocalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDetails.ProtoReflect.Descriptor instead.
func (*LocalDetails) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{0}
}

func (x *LocalDetails) GetProvinces() []string {
	if x != nil {
		return x.Provinces
	}
	return nil
}

func (x *LocalDetails) GetDistricts() []string {
	if x != nil {
		return x.Districts
	}
	return nil
}

type InternationalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continents []string `protobuf:"bytes,1,rep,name=continents,proto3" json:"continents,omitempty"`
	Countries  []string `protobuf:"bytes,2,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (x *InternationalDetails) Reset() {
	*x = InternationalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternationalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternationalDetails) ProtoMessage() {}

func (x *InternationalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternationalDetails.ProtoReflect.Descriptor instead.
func (*InternationalDetails) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{1}
}

func (x *InternationalDetails) GetContinents() []string {
	if x != nil {
		return x.Continents
	}
	return nil
}

func (x *InternationalDetails) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

type League struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId   int32      `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LeagueType LeagueType `protobuf:"varint,3,opt,name=league_type,json=leagueType,proto3,enum=tournament_management.LeagueType" json:"league_type,omitempty"`
	Details    string     `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *League) Reset() {
	*x = League{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *League) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*League) ProtoMessage() {}

func (x *League) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use League.ProtoReflect.Descriptor instead.
func (*League) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *League) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *League) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *League) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_local
}

func (x *League) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type TournamentFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId        int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	FormatName      string `protobuf:"bytes,2,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SpeakersPerTeam int32  `protobuf:"varint,4,opt,name=speakers_per_team,json=speakersPerTeam,proto3" json:"speakers_per_team,omitempty"`
}

func (x *TournamentFormat) Reset() {
	*x = TournamentFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentFormat) ProtoMessage() {}

func (x *TournamentFormat) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentFormat.ProtoReflect.Descriptor instead.
func (*TournamentFormat) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentFormat) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *TournamentFormat) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *TournamentFormat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentFormat) GetSpeakersPerTeam() int32 {
	if x != nil {
		return x.SpeakersPerTeam
	}
	return 0
}

type Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId               int32   `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Name                       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartDate                  string  `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Location                   string  `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	FormatId                   int32   `protobuf:"varint,6,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	LeagueId                   int32   `protobuf:"varint,7,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	CoordinatorId              int32   `protobuf:"varint,8,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	CoordinatorName            string  `protobuf:"bytes,9,opt,name=coordinator_name,json=coordinatorName,proto3" json:"coordinator_name,omitempty"`
	NumberOfPreliminaryRounds  int32   `protobuf:"varint,10,opt,name=number_of_preliminary_rounds,json=numberOfPreliminaryRounds,proto3" json:"number_of_preliminary_rounds,omitempty"`
	NumberOfEliminationRounds  int32   `protobuf:"varint,11,opt,name=number_of_elimination_rounds,json=numberOfEliminationRounds,proto3" json:"number_of_elimination_rounds,omitempty"`
	JudgesPerDebatePreliminary int32   `protobuf:"varint,12,opt,name=judges_per_debate_preliminary,json=judgesPerDebatePreliminary,proto3" json:"judges_per_debate_preliminary,omitempty"`
	JudgesPerDebateElimination int32   `protobuf:"varint,13,opt,name=judges_per_debate_elimination,json=judgesPerDebateElimination,proto3" json:"judges_per_debate_elimination,omitempty"`
	TournamentFee              float64 `protobuf:"fixed64,14,opt,name=tournament_fee,json=tournamentFee,proto3" json:"tournament_fee,omitempty"`
	ImageUrl                   string  `protobuf:"bytes,15,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	NumberOfSchools            int32   `protobuf:"varint,16,opt,name=number_of_schools,json=numberOfSchools,proto3" json:"number_of_schools,omitempty"`
	NumberOfTeams              int32   `protobuf:"varint,17,opt,name=number_of_teams,json=numberOfTeams,proto3" json:"number_of_teams,omitempty"`
	LeagueName                 string  `protobuf:"bytes,18,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{4}
}

func (x *Tournament) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *Tournament) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tournament) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Tournament) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Tournament) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Tournament) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *Tournament) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *Tournament) GetCoordinatorId() int32 {
	if x != nil {
		return x.CoordinatorId
	}
	return 0
}

func (x *Tournament) GetCoordinatorName() string {
	if x != nil {
		return x.CoordinatorName
	}
	return ""
}

func (x *Tournament) GetNumberOfPreliminaryRounds() int32 {
	if x != nil {
		return x.NumberOfPreliminaryRounds
	}
	return 0
}

func (x *Tournament) GetNumberOfEliminationRounds() int32 {
	if x != nil {
		return x.NumberOfEliminationRounds
	}
	return 0
}

func (x *Tournament) GetJudgesPerDebatePreliminary() int32 {
	if x != nil {
		return x.JudgesPerDebatePreliminary
	}
	return 0
}

func (x *Tournament) GetJudgesPerDebateElimination() int32 {
	if x != nil {
		return x.JudgesPerDebateElimination
	}
	return 0
}

func (x *Tournament) GetTournamentFee() float64 {
	if x != nil {
		return x.TournamentFee
	}
	return 0
}

func (x *Tournament) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Tournament) GetNumberOfSchools() int32 {
	if x != nil {
		return x.NumberOfSchools
	}
	return 0
}

func (x *Tournament) GetNumberOfTeams() int32 {
	if x != nil {
		return x.NumberOfTeams
	}
	return 0
}

func (x *Tournament) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

type GetTournamentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTournamentStatsRequest) Reset() {
	*x = GetTournamentStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentStatsRequest) ProtoMessage() {}

func (x *GetTournamentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentStatsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *GetTournamentStatsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTournamentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTournaments               int32  `protobuf:"varint,1,opt,name=total_tournaments,json=totalTournaments,proto3" json:"total_tournaments,omitempty"`
	UpcomingTournaments            int32  `protobuf:"varint,2,opt,name=upcoming_tournaments,json=upcomingTournaments,proto3" json:"upcoming_tournaments,omitempty"`
	TotalPercentageChange          string `protobuf:"bytes,3,opt,name=total_percentage_change,json=totalPercentageChange,proto3" json:"total_percentage_change,omitempty"`
	UpcomingPercentageChange       string `protobuf:"bytes,4,opt,name=upcoming_percentage_change,json=upcomingPercentageChange,proto3" json:"upcoming_percentage_change,omitempty"`
	ActiveDebaters                 int32  `protobuf:"varint,5,opt,name=active_debaters,json=activeDebaters,proto3" json:"active_debaters,omitempty"`
	ActiveDebatersPercentageChange string `protobuf:"bytes,6,opt,name=active_debaters_percentage_change,json=activeDebatersPercentageChange,proto3" json:"active_debaters_percentage_change,omitempty"`
}

func (x *GetTournamentStatsResponse) Reset() {
	*x = GetTournamentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentStatsResponse) ProtoMessage() {}

func (x *GetTournamentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentStatsResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentStatsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *GetTournamentStatsResponse) GetTotalTournaments() int32 {
	if x != nil {
		return x.TotalTournaments
	}
	return 0
}

func (x *GetTournamentStatsResponse) GetUpcomingTournaments() int32 {
	if x != nil {
		return x.UpcomingTournaments
	}
	return 0
}

func (x *GetTournamentStatsResponse) GetTotalPercentageChange() string {
	if x != nil {
		return x.TotalPercentageChange
	}
	return ""
}

func (x *GetTournamentStatsResponse) GetUpcomingPercentageChange() string {
	if x != nil {
		return x.UpcomingPercentageChange
	}
	return ""
}

func (x *GetTournamentStatsResponse) GetActiveDebaters() int32 {
	if x != nil {
		return x.ActiveDebaters
	}
	return 0
}

func (x *GetTournamentStatsResponse) GetActiveDebatersPercentageChange() string {
	if x != nil {
		return x.ActiveDebatersPercentageChange
	}
	return ""
}

type GetTournamentRegistrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTournamentRegistrationsRequest) Reset() {
	*x = GetTournamentRegistrationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentRegistrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentRegistrationsRequest) ProtoMessage() {}

func (x *GetTournamentRegistrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentRegistrationsRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentRegistrationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *GetTournamentRegistrationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DailyRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DailyRegistration) Reset() {
	*x = DailyRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyRegistration) ProtoMessage() {}

func (x *DailyRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyRegistration.ProtoReflect.Descriptor instead.
func (*DailyRegistration) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *DailyRegistration) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyRegistration) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetTournamentRegistrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrations []*DailyRegistration `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
}

func (x *GetTournamentRegistrationsResponse) Reset() {
	*x = GetTournamentRegistrationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentRegistrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentRegistrationsResponse) ProtoMessage() {}

func (x *GetTournamentRegistrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentRegistrationsResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentRegistrationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *GetTournamentRegistrationsResponse) GetRegistrations() []*DailyRegistration {
	if x != nil {
		return x.Registrations
	}
	return nil
}

// Request messages
type CreateLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LeagueType LeagueType `protobuf:"varint,2,opt,name=league_type,json=leagueType,proto3,enum=tournament_management.LeagueType" json:"league_type,omitempty"`
	// Types that are assignable to LeagueDetails:
	//
	//	*CreateLeagueRequest_LocalDetails
	//	*CreateLeagueRequest_InternationalDetails
	LeagueDetails isCreateLeagueRequest_LeagueDetails `protobuf_oneof:"league_details"`
	Token         string                              `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateLeagueRequest) Reset() {
	*x = CreateLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeagueRequest) ProtoMessage() {}

func (x *CreateLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeagueRequest.ProtoReflect.Descriptor instead.
func (*CreateLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *CreateLeagueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLeagueRequest) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_local
}

func (m *CreateLeagueRequest) GetLeagueDetails() isCreateLeagueRequest_LeagueDetails {
	if m != nil {
		return m.LeagueDetails
	}
	return nil
}

func (x *CreateLeagueRequest) GetLocalDetails() *LocalDetails {
	if x, ok := x.GetLeagueDetails().(*CreateLeagueRequest_LocalDetails); ok {
		return x.LocalDetails
	}
	return nil
}

func (x *CreateLeagueRequest) GetInternationalDetails() *InternationalDetails {
	if x, ok := x.GetLeagueDetails().(*CreateLeagueRequest_InternationalDetails); ok {
		return x.InternationalDetails
	}
	return nil
}

func (x *CreateLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type isCreateLeagueRequest_LeagueDetails interface {
	isCreateLeagueRequest_LeagueDetails()
}

type CreateLeagueRequest_LocalDetails struct {
	LocalDetails *LocalDetails `protobuf:"bytes,3,opt,name=local_details,json=localDetails,proto3,oneof"`
}

type CreateLeagueRequest_InternationalDetails struct {
	InternationalDetails *InternationalDetails `protobuf:"bytes,4,opt,name=international_details,json=internationalDetails,proto3,oneof"`
}

func (*CreateLeagueRequest_LocalDetails) isCreateLeagueRequest_LeagueDetails() {}

func (*CreateLeagueRequest_InternationalDetails) isCreateLeagueRequest_LeagueDetails() {}

type GetLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId int32  `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetLeagueRequest) Reset() {
	*x = GetLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueRequest) ProtoMessage() {}

func (x *GetLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueRequest.ProtoReflect.Descriptor instead.
func (*GetLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{11}
}

func (x *GetLeagueRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *GetLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListLeaguesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32  `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListLeaguesRequest) Reset() {
	*x = ListLeaguesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeaguesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeaguesRequest) ProtoMessage() {}

func (x *ListLeaguesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeaguesRequest.ProtoReflect.Descriptor instead.
func (*ListLeaguesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{12}
}

func (x *ListLeaguesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLeaguesRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListLeaguesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId   int32      `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LeagueType LeagueType `protobuf:"varint,3,opt,name=league_type,json=leagueType,proto3,enum=tournament_management.LeagueType" json:"league_type,omitempty"`
	// Types that are assignable to LeagueDetails:
	//
	//	*UpdateLeagueRequest_LocalDetails
	//	*UpdateLeagueRequest_InternationalDetails
	LeagueDetails isUpdateLeagueRequest_LeagueDetails `protobuf_oneof:"league_details"`
	Token         string                              `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateLeagueRequest) Reset() {
	*x = UpdateLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeagueRequest) ProtoMessage() {}

func (x *UpdateLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeagueRequest.ProtoReflect.Descriptor instead.
func (*UpdateLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateLeagueRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *UpdateLeagueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLeagueRequest) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_local
}

func (m *UpdateLeagueRequest) GetLeagueDetails() isUpdateLeagueRequest_LeagueDetails {
	if m != nil {
		return m.LeagueDetails
	}
	return nil
}

func (x *UpdateLeagueRequest) GetLocalDetails() *LocalDetails {
	if x, ok := x.GetLeagueDetails().(*UpdateLeagueRequest_LocalDetails); ok {
		return x.LocalDetails
	}
	return nil
}

func (x *UpdateLeagueRequest) GetInternationalDetails() *InternationalDetails {
	if x, ok := x.GetLeagueDetails().(*UpdateLeagueRequest_InternationalDetails); ok {
		return x.InternationalDetails
	}
	return nil
}

func (x *UpdateLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type isUpdateLeagueRequest_LeagueDetails interface {
	isUpdateLeagueRequest_LeagueDetails()
}

type UpdateLeagueRequest_LocalDetails struct {
	LocalDetails *LocalDetails `protobuf:"bytes,4,opt,name=local_details,json=localDetails,proto3,oneof"`
}

type UpdateLeagueRequest_InternationalDetails struct {
	InternationalDetails *InternationalDetails `protobuf:"bytes,5,opt,name=international_details,json=internationalDetails,proto3,oneof"`
}

func (*UpdateLeagueRequest_LocalDetails) isUpdateLeagueRequest_LeagueDetails() {}

func (*UpdateLeagueRequest_InternationalDetails) isUpdateLeagueRequest_LeagueDetails() {}

type DeleteLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId int32  `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteLeagueRequest) Reset() {
	*x = DeleteLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeagueRequest) ProtoMessage() {}

func (x *DeleteLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeagueRequest.ProtoReflect.Descriptor instead.
func (*DeleteLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteLeagueRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *DeleteLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatName      string `protobuf:"bytes,1,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SpeakersPerTeam int32  `protobuf:"varint,3,opt,name=speakers_per_team,json=speakersPerTeam,proto3" json:"speakers_per_team,omitempty"`
	Token           string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTournamentFormatRequest) Reset() {
	*x = CreateTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentFormatRequest) ProtoMessage() {}

func (x *CreateTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*CreateTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTournamentFormatRequest) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *CreateTournamentFormatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTournamentFormatRequest) GetSpeakersPerTeam() int32 {
	if x != nil {
		return x.SpeakersPerTeam
	}
	return 0
}

func (x *CreateTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTournamentFormatRequest) Reset() {
	*x = GetTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentFormatRequest) ProtoMessage() {}

func (x *GetTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{16}
}

func (x *GetTournamentFormatRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *GetTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListTournamentFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32  `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListTournamentFormatsRequest) Reset() {
	*x = ListTournamentFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentFormatsRequest) ProtoMessage() {}

func (x *ListTournamentFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListTournamentFormatsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{17}
}

func (x *ListTournamentFormatsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTournamentFormatsRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListTournamentFormatsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId        int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	FormatName      string `protobuf:"bytes,2,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SpeakersPerTeam int32  `protobuf:"varint,4,opt,name=speakers_per_team,json=speakersPerTeam,proto3" json:"speakers_per_team,omitempty"`
	Token           string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTournamentFormatRequest) Reset() {
	*x = UpdateTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentFormatRequest) ProtoMessage() {}

func (x *UpdateTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTournamentFormatRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *UpdateTournamentFormatRequest) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *UpdateTournamentFormatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTournamentFormatRequest) GetSpeakersPerTeam() int32 {
	if x != nil {
		return x.SpeakersPerTeam
	}
	return 0
}

func (x *UpdateTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTournamentFormatRequest) Reset() {
	*x = DeleteTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentFormatRequest) ProtoMessage() {}

func (x *DeleteTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*DeleteTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteTournamentFormatRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *DeleteTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartDate                  string  `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Location                   string  `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	FormatId                   int32   `protobuf:"varint,5,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	LeagueId                   int32   `protobuf:"varint,6,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	CoordinatorId              int32   `protobuf:"varint,7,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	NumberOfPreliminaryRounds  int32   `protobuf:"varint,8,opt,name=number_of_preliminary_rounds,json=numberOfPreliminaryRounds,proto3" json:"number_of_preliminary_rounds,omitempty"`
	NumberOfEliminationRounds  int32   `protobuf:"varint,9,opt,name=number_of_elimination_rounds,json=numberOfEliminationRounds,proto3" json:"number_of_elimination_rounds,omitempty"`
	JudgesPerDebatePreliminary int32   `protobuf:"varint,10,opt,name=judges_per_debate_preliminary,json=judgesPerDebatePreliminary,proto3" json:"judges_per_debate_preliminary,omitempty"`
	JudgesPerDebateElimination int32   `protobuf:"varint,11,opt,name=judges_per_debate_elimination,json=judgesPerDebateElimination,proto3" json:"judges_per_debate_elimination,omitempty"`
	TournamentFee              float64 `protobuf:"fixed64,12,opt,name=tournament_fee,json=tournamentFee,proto3" json:"tournament_fee,omitempty"`
	Token                      string  `protobuf:"bytes,13,opt,name=token,proto3" json:"token,omitempty"`
	ImageUrl                   string  `protobuf:"bytes,14,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *CreateTournamentRequest) Reset() {
	*x = CreateTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentRequest) ProtoMessage() {}

func (x *CreateTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentRequest.ProtoReflect.Descriptor instead.
func (*CreateTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTournamentRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateTournamentRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateTournamentRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateTournamentRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *CreateTournamentRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *CreateTournamentRequest) GetCoordinatorId() int32 {
	if x != nil {
		return x.CoordinatorId
	}
	return 0
}

func (x *CreateTournamentRequest) GetNumberOfPreliminaryRounds() int32 {
	if x != nil {
		return x.NumberOfPreliminaryRounds
	}
	return 0
}

func (x *CreateTournamentRequest) GetNumberOfEliminationRounds() int32 {
	if x != nil {
		return x.NumberOfEliminationRounds
	}
	return 0
}

func (x *CreateTournamentRequest) GetJudgesPerDebatePreliminary() int32 {
	if x != nil {
		return x.JudgesPerDebatePreliminary
	}
	return 0
}

func (x *CreateTournamentRequest) GetJudgesPerDebateElimination() int32 {
	if x != nil {
		return x.JudgesPerDebateElimination
	}
	return 0
}

func (x *CreateTournamentRequest) GetTournamentFee() float64 {
	if x != nil {
		return x.TournamentFee
	}
	return 0
}

func (x *CreateTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateTournamentRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type GetTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTournamentRequest) Reset() {
	*x = GetTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentRequest) ProtoMessage() {}

func (x *GetTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{21}
}

func (x *GetTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListTournamentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32  `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListTournamentsRequest) Reset() {
	*x = ListTournamentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentsRequest) ProtoMessage() {}

func (x *ListTournamentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentsRequest.ProtoReflect.Descriptor instead.
func (*ListTournamentsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{22}
}

func (x *ListTournamentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTournamentsRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListTournamentsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId               int32   `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Name                       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartDate                  string  `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Location                   string  `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	FormatId                   int32   `protobuf:"varint,6,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	LeagueId                   int32   `protobuf:"varint,7,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	CoordinatorId              int32   `protobuf:"varint,8,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	NumberOfPreliminaryRounds  int32   `protobuf:"varint,9,opt,name=number_of_preliminary_rounds,json=numberOfPreliminaryRounds,proto3" json:"number_of_preliminary_rounds,omitempty"`
	NumberOfEliminationRounds  int32   `protobuf:"varint,10,opt,name=number_of_elimination_rounds,json=numberOfEliminationRounds,proto3" json:"number_of_elimination_rounds,omitempty"`
	JudgesPerDebatePreliminary int32   `protobuf:"varint,11,opt,name=judges_per_debate_preliminary,json=judgesPerDebatePreliminary,proto3" json:"judges_per_debate_preliminary,omitempty"`
	JudgesPerDebateElimination int32   `protobuf:"varint,12,opt,name=judges_per_debate_elimination,json=judgesPerDebateElimination,proto3" json:"judges_per_debate_elimination,omitempty"`
	TournamentFee              float64 `protobuf:"fixed64,13,opt,name=tournament_fee,json=tournamentFee,proto3" json:"tournament_fee,omitempty"`
	Token                      string  `protobuf:"bytes,14,opt,name=token,proto3" json:"token,omitempty"`
	ImageUrl                   string  `protobuf:"bytes,15,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *UpdateTournamentRequest) Reset() {
	*x = UpdateTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentRequest) ProtoMessage() {}

func (x *UpdateTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTournamentRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UpdateTournamentRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *UpdateTournamentRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateTournamentRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetCoordinatorId() int32 {
	if x != nil {
		return x.CoordinatorId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetNumberOfPreliminaryRounds() int32 {
	if x != nil {
		return x.NumberOfPreliminaryRounds
	}
	return 0
}

func (x *UpdateTournamentRequest) GetNumberOfEliminationRounds() int32 {
	if x != nil {
		return x.NumberOfEliminationRounds
	}
	return 0
}

func (x *UpdateTournamentRequest) GetJudgesPerDebatePreliminary() int32 {
	if x != nil {
		return x.JudgesPerDebatePreliminary
	}
	return 0
}

func (x *UpdateTournamentRequest) GetJudgesPerDebateElimination() int32 {
	if x != nil {
		return x.JudgesPerDebateElimination
	}
	return 0
}

func (x *UpdateTournamentRequest) GetTournamentFee() float64 {
	if x != nil {
		return x.TournamentFee
	}
	return 0
}

func (x *UpdateTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateTournamentRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type DeleteTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTournamentRequest) Reset() {
	*x = DeleteTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentRequest) ProtoMessage() {}

func (x *DeleteTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentRequest.ProtoReflect.Descriptor instead.
func (*DeleteTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *DeleteTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Response messages
type CreateLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League *League `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
}

func (x *CreateLeagueResponse) Reset() {
	*x = CreateLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeagueResponse) ProtoMessage() {}

func (x *CreateLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeagueResponse.ProtoReflect.Descriptor instead.
func (*CreateLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{25}
}

func (x *CreateLeagueResponse) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

type GetLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League *League `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
}

func (x *GetLeagueResponse) Reset() {
	*x = GetLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueResponse) ProtoMessage() {}

func (x *GetLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueResponse.ProtoReflect.Descriptor instead.
func (*GetLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{26}
}

func (x *GetLeagueResponse) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

type ListLeaguesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leagues       []*League `protobuf:"bytes,1,rep,name=leagues,proto3" json:"leagues,omitempty"`
	NextPageToken int32     `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLeaguesResponse) Reset() {
	*x = ListLeaguesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeaguesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeaguesResponse) ProtoMessage() {}

func (x *ListLeaguesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeaguesResponse.ProtoReflect.Descriptor instead.
func (*ListLeaguesResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{27}
}

func (x *ListLeaguesResponse) GetLeagues() []*League {
	if x != nil {
		return x.Leagues
	}
	return nil
}

func (x *ListLeaguesResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League *League `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
}

func (x *UpdateLeagueResponse) Reset() {
	*x = UpdateLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeagueResponse) ProtoMessage() {}

func (x *UpdateLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeagueResponse.ProtoReflect.Descriptor instead.
func (*UpdateLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateLeagueResponse) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

type DeleteLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteLeagueResponse) Reset() {
	*x = DeleteLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeagueResponse) ProtoMessage() {}

func (x *DeleteLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeagueResponse.ProtoReflect.Descriptor instead.
func (*DeleteLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteLeagueResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteLeagueResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *TournamentFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CreateTournamentFormatResponse) Reset() {
	*x = CreateTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentFormatResponse) ProtoMessage() {}

func (x *CreateTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*CreateTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTournamentFormatResponse) GetFormat() *TournamentFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type GetTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *TournamentFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *GetTournamentFormatResponse) Reset() {
	*x = GetTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentFormatResponse) ProtoMessage() {}

func (x *GetTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{31}
}

func (x *GetTournamentFormatResponse) GetFormat() *TournamentFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type ListTournamentFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formats       []*TournamentFormat `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty"`
	NextPageToken int32               `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTournamentFormatsResponse) Reset() {
	*x = ListTournamentFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentFormatsResponse) ProtoMessage() {}

func (x *ListTournamentFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListTournamentFormatsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{32}
}

func (x *ListTournamentFormatsResponse) GetFormats() []*TournamentFormat {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *ListTournamentFormatsResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format       *TournamentFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	PresignedUrl string            `protobuf:"bytes,2,opt,name=presigned_url,json=presignedUrl,proto3" json:"presigned_url,omitempty"`
}

func (x *UpdateTournamentFormatResponse) Reset() {
	*x = UpdateTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentFormatResponse) ProtoMessage() {}

func (x *UpdateTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*UpdateTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateTournamentFormatResponse) GetFormat() *TournamentFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *UpdateTournamentFormatResponse) GetPresignedUrl() string {
	if x != nil {
		return x.PresignedUrl
	}
	return ""
}

type DeleteTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTournamentFormatResponse) Reset() {
	*x = DeleteTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentFormatResponse) ProtoMessage() {}

func (x *DeleteTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*DeleteTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteTournamentFormatResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTournamentFormatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament    *Tournament `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	InvitationIds []int32     `protobuf:"varint,2,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
}

func (x *CreateTournamentResponse) Reset() {
	*x = CreateTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentResponse) ProtoMessage() {}

func (x *CreateTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentResponse.ProtoReflect.Descriptor instead.
func (*CreateTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTournamentResponse) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *CreateTournamentResponse) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

type GetTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament *Tournament `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
}

func (x *GetTournamentResponse) Reset() {
	*x = GetTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentResponse) ProtoMessage() {}

func (x *GetTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{36}
}

func (x *GetTournamentResponse) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

type ListTournamentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournaments   []*Tournament `protobuf:"bytes,1,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
	NextPageToken int32         `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTournamentsResponse) Reset() {
	*x = ListTournamentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentsResponse) ProtoMessage() {}

func (x *ListTournamentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentsResponse.ProtoReflect.Descriptor instead.
func (*ListTournamentsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{37}
}

func (x *ListTournamentsResponse) GetTournaments() []*Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

func (x *ListTournamentsResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament *Tournament `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
}

func (x *UpdateTournamentResponse) Reset() {
	*x = UpdateTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentResponse) ProtoMessage() {}

func (x *UpdateTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentResponse.ProtoReflect.Descriptor instead.
func (*UpdateTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateTournamentResponse) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

type DeleteTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTournamentResponse) Reset() {
	*x = DeleteTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentResponse) ProtoMessage() {}

func (x *DeleteTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentResponse.ProtoReflect.Descriptor instead.
func (*DeleteTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteTournamentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTournamentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetInvitationsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetInvitationsByUserRequest) Reset() {
	*x = GetInvitationsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationsByUserRequest) ProtoMessage() {}

func (x *GetInvitationsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationsByUserRequest.ProtoReflect.Descriptor instead.
func (*GetInvitationsByUserRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{40}
}

func (x *GetInvitationsByUserRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetInvitationsByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitations []*InvitationInfo `protobuf:"bytes,1,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *GetInvitationsByUserResponse) Reset() {
	*x = GetInvitationsByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationsByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationsByUserResponse) ProtoMessage() {}

func (x *GetInvitationsByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationsByUserResponse.ProtoReflect.Descriptor instead.
func (*GetInvitationsByUserResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{41}
}

func (x *GetInvitationsByUserResponse) GetInvitations() []*InvitationInfo {
	if x != nil {
		return x.Invitations
	}
	return nil
}

type GetInvitationsByTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetInvitationsByTournamentRequest) Reset() {
	*x = GetInvitationsByTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationsByTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationsByTournamentRequest) ProtoMessage() {}

func (x *GetInvitationsByTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationsByTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetInvitationsByTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{42}
}

func (x *GetInvitationsByTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetInvitationsByTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type InvitationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	IdebateId    string `protobuf:"bytes,3,opt,name=idebate_id,json=idebateId,proto3" json:"idebate_id,omitempty"`
	InviteeName  string `protobuf:"bytes,4,opt,name=invitee_name,json=inviteeName,proto3" json:"invitee_name,omitempty"`
	InviteeRole  string `protobuf:"bytes,5,opt,name=invitee_role,json=inviteeRole,proto3" json:"invitee_role,omitempty"`
	CreatedAt    string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InvitationInfo) Reset() {
	*x = InvitationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationInfo) ProtoMessage() {}

func (x *InvitationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationInfo.ProtoReflect.Descriptor instead.
func (*InvitationInfo) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{43}
}

func (x *InvitationInfo) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *InvitationInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InvitationInfo) GetIdebateId() string {
	if x != nil {
		return x.IdebateId
	}
	return ""
}

func (x *InvitationInfo) GetInviteeName() string {
	if x != nil {
		return x.InviteeName
	}
	return ""
}

func (x *InvitationInfo) GetInviteeRole() string {
	if x != nil {
		return x.InviteeRole
	}
	return ""
}

func (x *InvitationInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InvitationInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetInvitationsByTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitations []*InvitationInfo `protobuf:"bytes,1,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *GetInvitationsByTournamentResponse) Reset() {
	*x = GetInvitationsByTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationsByTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationsByTournamentResponse) ProtoMessage() {}

func (x *GetInvitationsByTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationsByTournamentResponse.ProtoReflect.Descriptor instead.
func (*GetInvitationsByTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{44}
}

func (x *GetInvitationsByTournamentResponse) GetInvitations() []*InvitationInfo {
	if x != nil {
		return x.Invitations
	}
	return nil
}

type UpdateInvitationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	NewStatus    string `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateInvitationStatusRequest) Reset() {
	*x = UpdateInvitationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvitationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvitationStatusRequest) ProtoMessage() {}

func (x *UpdateInvitationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvitationStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvitationStatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateInvitationStatusRequest) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *UpdateInvitationStatusRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *UpdateInvitationStatusRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateInvitationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateInvitationStatusResponse) Reset() {
	*x = UpdateInvitationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvitationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvitationStatusResponse) ProtoMessage() {}

func (x *UpdateInvitationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvitationStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateInvitationStatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateInvitationStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateInvitationStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BulkUpdateInvitationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationIds []int32 `protobuf:"varint,1,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
	NewStatus     string  `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	Token         string  `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BulkUpdateInvitationStatusRequest) Reset() {
	*x = BulkUpdateInvitationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateInvitationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateInvitationStatusRequest) ProtoMessage() {}

func (x *BulkUpdateInvitationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateInvitationStatusRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateInvitationStatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{47}
}

func (x *BulkUpdateInvitationStatusRequest) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

func (x *BulkUpdateInvitationStatusRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *BulkUpdateInvitationStatusRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BulkUpdateInvitationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success              bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UpdatedInvitationIds []int32 `protobuf:"varint,3,rep,packed,name=updated_invitation_ids,json=updatedInvitationIds,proto3" json:"updated_invitation_ids,omitempty"`
}

func (x *BulkUpdateInvitationStatusResponse) Reset() {
	*x = BulkUpdateInvitationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateInvitationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateInvitationStatusResponse) ProtoMessage() {}

func (x *BulkUpdateInvitationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateInvitationStatusResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateInvitationStatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{48}
}

func (x *BulkUpdateInvitationStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkUpdateInvitationStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BulkUpdateInvitationStatusResponse) GetUpdatedInvitationIds() []int32 {
	if x != nil {
		return x.UpdatedInvitationIds
	}
	return nil
}

type ResendInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ResendInvitationRequest) Reset() {
	*x = ResendInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInvitationRequest) ProtoMessage() {}

func (x *ResendInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInvitationRequest.ProtoReflect.Descriptor instead.
func (*ResendInvitationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{49}
}

func (x *ResendInvitationRequest) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *ResendInvitationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ResendInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResendInvitationResponse) Reset() {
	*x = ResendInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInvitationResponse) ProtoMessage() {}

func (x *ResendInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInvitationResponse.ProtoReflect.Descriptor instead.
func (*ResendInvitationResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{50}
}

func (x *ResendInvitationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResendInvitationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BulkResendInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationIds []int32 `protobuf:"varint,1,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BulkResendInvitationsRequest) Reset() {
	*x = BulkResendInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkResendInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkResendInvitationsRequest) ProtoMessage() {}

func (x *BulkResendInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkResendInvitationsRequest.ProtoReflect.Descriptor instead.
func (*BulkResendInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{51}
}

func (x *BulkResendInvitationsRequest) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

func (x *BulkResendInvitationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BulkResendInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BulkResendInvitationsResponse) Reset() {
	*x = BulkResendInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkResendInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkResendInvitationsResponse) ProtoMessage() {}

func (x *BulkResendInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkResendInvitationsResponse.ProtoReflect.Descriptor instead.
func (*BulkResendInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{52}
}

func (x *BulkResendInvitationsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkResendInvitationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Tournament Expenses messages
type CreateExpensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId      int32   `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	FoodExpense       float64 `protobuf:"fixed64,2,opt,name=food_expense,json=foodExpense,proto3" json:"food_expense,omitempty"`
	TransportExpense  float64 `protobuf:"fixed64,3,opt,name=transport_expense,json=transportExpense,proto3" json:"transport_expense,omitempty"`
	PerDiemExpense    float64 `protobuf:"fixed64,4,opt,name=per_diem_expense,json=perDiemExpense,proto3" json:"per_diem_expense,omitempty"`
	AwardingExpense   float64 `protobuf:"fixed64,5,opt,name=awarding_expense,json=awardingExpense,proto3" json:"awarding_expense,omitempty"`
	StationaryExpense float64 `protobuf:"fixed64,6,opt,name=stationary_expense,json=stationaryExpense,proto3" json:"stationary_expense,omitempty"`
	OtherExpenses     float64 `protobuf:"fixed64,7,opt,name=other_expenses,json=otherExpenses,proto3" json:"other_expenses,omitempty"`
	Notes             string  `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	Token             string  `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateExpensesRequest) Reset() {
	*x = CreateExpensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExpensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExpensesRequest) ProtoMessage() {}

func (x *CreateExpensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExpensesRequest.ProtoReflect.Descriptor instead.
func (*CreateExpensesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{53}
}

func (x *CreateExpensesRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *CreateExpensesRequest) GetFoodExpense() float64 {
	if x != nil {
		return x.FoodExpense
	}
	return 0
}

func (x *CreateExpensesRequest) GetTransportExpense() float64 {
	if x != nil {
		return x.TransportExpense
	}
	return 0
}

func (x *CreateExpensesRequest) GetPerDiemExpense() float64 {
	if x != nil {
		return x.PerDiemExpense
	}
	return 0
}

func (x *CreateExpensesRequest) GetAwardingExpense() float64 {
	if x != nil {
		return x.AwardingExpense
	}
	return 0
}

func (x *CreateExpensesRequest) GetStationaryExpense() float64 {
	if x != nil {
		return x.StationaryExpense
	}
	return 0
}

func (x *CreateExpensesRequest) GetOtherExpenses() float64 {
	if x != nil {
		return x.OtherExpenses
	}
	return 0
}

func (x *CreateExpensesRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CreateExpensesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateExpensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId      int32   `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	FoodExpense       float64 `protobuf:"fixed64,2,opt,name=food_expense,json=foodExpense,proto3" json:"food_expense,omitempty"`
	TransportExpense  float64 `protobuf:"fixed64,3,opt,name=transport_expense,json=transportExpense,proto3" json:"transport_expense,omitempty"`
	PerDiemExpense    float64 `protobuf:"fixed64,4,opt,name=per_diem_expense,json=perDiemExpense,proto3" json:"per_diem_expense,omitempty"`
	AwardingExpense   float64 `protobuf:"fixed64,5,opt,name=awarding_expense,json=awardingExpense,proto3" json:"awarding_expense,omitempty"`
	StationaryExpense float64 `protobuf:"fixed64,6,opt,name=stationary_expense,json=stationaryExpense,proto3" json:"stationary_expense,omitempty"`
	OtherExpenses     float64 `protobuf:"fixed64,7,opt,name=other_expenses,json=otherExpenses,proto3" json:"other_expenses,omitempty"`
	Currency          string  `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	Notes             string  `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	Token             string  `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateExpensesRequest) Reset() {
	*x = UpdateExpensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpensesRequest) ProtoMessage() {}

func (x *UpdateExpensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpensesRequest.ProtoReflect.Descriptor instead.
func (*UpdateExpensesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{54}
}

func (x *UpdateExpensesRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *UpdateExpensesRequest) GetFoodExpense() float64 {
	if x != nil {
		return x.FoodExpense
	}
	return 0
}

func (x *UpdateExpensesRequest) GetTransportExpense() float64 {
	if x != nil {
		return x.TransportExpense
	}
	return 0
}

func (x *UpdateExpensesRequest) GetPerDiemExpense() float64 {
	if x != nil {
		return x.PerDiemExpense
	}
	return 0
}

func (x *UpdateExpensesRequest) GetAwardingExpense() float64 {
	if x != nil {
		return x.AwardingExpense
	}
	return 0
}

func (x *UpdateExpensesRequest) GetStationaryExpense() float64 {
	if x != nil {
		return x.StationaryExpense
	}
	return 0
}

func (x *UpdateExpensesRequest) GetOtherExpenses() float64 {
	if x != nil {
		return x.OtherExpenses
	}
	return 0
}

func (x *UpdateExpensesRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateExpensesRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UpdateExpensesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetExpensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetExpensesRequest) Reset() {
	*x = GetExpensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExpensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpensesRequest) ProtoMessage() {}

func (x *GetExpensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpensesRequest.ProtoReflect.Descriptor instead.
func (*GetExpensesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{55}
}

func (x *GetExpensesRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetExpensesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ExpensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpenseId         int32   `protobuf:"varint,1,opt,name=expense_id,json=expenseId,proto3" json:"expense_id,omitempty"`
	TournamentId      int32   `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	FoodExpense       float64 `protobuf:"fixed64,3,opt,name=food_expense,json=foodExpense,proto3" json:"food_expense,omitempty"`
	TransportExpense  float64 `protobuf:"fixed64,4,opt,name=transport_expense,json=transportExpense,proto3" json:"transport_expense,omitempty"`
	PerDiemExpense    float64 `protobuf:"fixed64,5,opt,name=per_diem_expense,json=perDiemExpense,proto3" json:"per_diem_expense,omitempty"`
	AwardingExpense   float64 `protobuf:"fixed64,6,opt,name=awarding_expense,json=awardingExpense,proto3" json:"awarding_expense,omitempty"`
	StationaryExpense float64 `protobuf:"fixed64,7,opt,name=stationary_expense,json=stationaryExpense,proto3" json:"stationary_expense,omitempty"`
	OtherExpenses     float64 `protobuf:"fixed64,8,opt,name=other_expenses,json=otherExpenses,proto3" json:"other_expenses,omitempty"`
	TotalExpense      float64 `protobuf:"fixed64,9,opt,name=total_expense,json=totalExpense,proto3" json:"total_expense,omitempty"`
	Currency          string  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	Notes             string  `protobuf:"bytes,11,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedAt         string  `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string  `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ExpensesResponse) Reset() {
	*x = ExpensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpensesResponse) ProtoMessage() {}

func (x *ExpensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpensesResponse.ProtoReflect.Descriptor instead.
func (*ExpensesResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{56}
}

func (x *ExpensesResponse) GetExpenseId() int32 {
	if x != nil {
		return x.ExpenseId
	}
	return 0
}

func (x *ExpensesResponse) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *ExpensesResponse) GetFoodExpense() float64 {
	if x != nil {
		return x.FoodExpense
	}
	return 0
}

func (x *ExpensesResponse) GetTransportExpense() float64 {
	if x != nil {
		return x.TransportExpense
	}
	return 0
}

func (x *ExpensesResponse) GetPerDiemExpense() float64 {
	if x != nil {
		return x.PerDiemExpense
	}
	return 0
}

func (x *ExpensesResponse) GetAwardingExpense() float64 {
	if x != nil {
		return x.AwardingExpense
	}
	return 0
}

func (x *ExpensesResponse) GetStationaryExpense() float64 {
	if x != nil {
		return x.StationaryExpense
	}
	return 0
}

func (x *ExpensesResponse) GetOtherExpenses() float64 {
	if x != nil {
		return x.OtherExpenses
	}
	return 0
}

func (x *ExpensesResponse) GetTotalExpense() float64 {
	if x != nil {
		return x.TotalExpense
	}
	return 0
}

func (x *ExpensesResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExpensesResponse) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ExpensesResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ExpensesResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// School Registration messages
type CreateRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolId          int32  `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TournamentId      int32  `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	PlannedTeamsCount int32  `protobuf:"varint,3,opt,name=planned_teams_count,json=plannedTeamsCount,proto3" json:"planned_teams_count,omitempty"`
	Token             string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateRegistrationRequest) Reset() {
	*x = CreateRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationRequest) ProtoMessage() {}

func (x *CreateRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{57}
}

func (x *CreateRegistrationRequest) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *CreateRegistrationRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *CreateRegistrationRequest) GetPlannedTeamsCount() int32 {
	if x != nil {
		return x.PlannedTeamsCount
	}
	return 0
}

func (x *CreateRegistrationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolId         int32   `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TournamentId     int32   `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	ActualTeamsCount int32   `protobuf:"varint,3,opt,name=actual_teams_count,json=actualTeamsCount,proto3" json:"actual_teams_count,omitempty"`
	DiscountAmount   float64 `protobuf:"fixed64,4,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	ActualPaidAmount float64 `protobuf:"fixed64,5,opt,name=actual_paid_amount,json=actualPaidAmount,proto3" json:"actual_paid_amount,omitempty"`
	PaymentStatus    string  `protobuf:"bytes,6,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	Token            string  `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateRegistrationRequest) Reset() {
	*x = UpdateRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationRequest) ProtoMessage() {}

func (x *UpdateRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateRegistrationRequest) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *UpdateRegistrationRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *UpdateRegistrationRequest) GetActualTeamsCount() int32 {
	if x != nil {
		return x.ActualTeamsCount
	}
	return 0
}

func (x *UpdateRegistrationRequest) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *UpdateRegistrationRequest) GetActualPaidAmount() float64 {
	if x != nil {
		return x.ActualPaidAmount
	}
	return 0
}

func (x *UpdateRegistrationRequest) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *UpdateRegistrationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchoolId     int32  `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TournamentId int32  `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetRegistrationRequest) Reset() {
	*x = GetRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationRequest) ProtoMessage() {}

func (x *GetRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{59}
}

func (x *GetRegistrationRequest) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *GetRegistrationRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetRegistrationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListRegistrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	PageSize     int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken    int32  `protobuf:"varint,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token        string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListRegistrationsRequest) Reset() {
	*x = ListRegistrationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegistrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationsRequest) ProtoMessage() {}

func (x *ListRegistrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationsRequest.ProtoReflect.Descriptor instead.
func (*ListRegistrationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{60}
}

func (x *ListRegistrationsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *ListRegistrationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRegistrationsRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListRegistrationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId    int32   `protobuf:"varint,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	SchoolId          int32   `protobuf:"varint,2,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TournamentId      int32   `protobuf:"varint,3,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	PlannedTeamsCount int32   `protobuf:"varint,4,opt,name=planned_teams_count,json=plannedTeamsCount,proto3" json:"planned_teams_count,omitempty"`
	ActualTeamsCount  int32   `protobuf:"varint,5,opt,name=actual_teams_count,json=actualTeamsCount,proto3" json:"actual_teams_count,omitempty"`
	AmountPerTeam     float64 `protobuf:"fixed64,6,opt,name=amount_per_team,json=amountPerTeam,proto3" json:"amount_per_team,omitempty"`
	TotalAmount       float64 `protobuf:"fixed64,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	DiscountAmount    float64 `protobuf:"fixed64,8,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	ActualPaidAmount  float64 `protobuf:"fixed64,9,opt,name=actual_paid_amount,json=actualPaidAmount,proto3" json:"actual_paid_amount,omitempty"`
	PaymentStatus     string  `protobuf:"bytes,10,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	Currency          string  `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	CreatedAt         string  `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string  `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{61}
}

func (x *RegistrationResponse) GetRegistrationId() int32 {
	if x != nil {
		return x.RegistrationId
	}
	return 0
}

func (x *RegistrationResponse) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *RegistrationResponse) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *RegistrationResponse) GetPlannedTeamsCount() int32 {
	if x != nil {
		return x.PlannedTeamsCount
	}
	return 0
}

func (x *RegistrationResponse) GetActualTeamsCount() int32 {
	if x != nil {
		return x.ActualTeamsCount
	}
	return 0
}

func (x *RegistrationResponse) GetAmountPerTeam() float64 {
	if x != nil {
		return x.AmountPerTeam
	}
	return 0
}

func (x *RegistrationResponse) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *RegistrationResponse) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *RegistrationResponse) GetActualPaidAmount() float64 {
	if x != nil {
		return x.ActualPaidAmount
	}
	return 0
}

func (x *RegistrationResponse) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *RegistrationResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RegistrationResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RegistrationResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DetailedRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId    int32   `protobuf:"varint,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	SchoolId          int32   `protobuf:"varint,2,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TournamentId      int32   `protobuf:"varint,3,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	SchoolName        string  `protobuf:"bytes,4,opt,name=school_name,json=schoolName,proto3" json:"school_name,omitempty"`
	SchoolEmail       string  `protobuf:"bytes,5,opt,name=school_email,json=schoolEmail,proto3" json:"school_email,omitempty"`
	SchoolType        string  `protobuf:"bytes,6,opt,name=school_type,json=schoolType,proto3" json:"school_type,omitempty"`
	ContactEmail      string  `protobuf:"bytes,7,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactPersonName string  `protobuf:"bytes,8,opt,name=contact_person_name,json=contactPersonName,proto3" json:"contact_person_name,omitempty"`
	Country           string  `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
	Province          string  `protobuf:"bytes,10,opt,name=province,proto3" json:"province,omitempty"`
	District          string  `protobuf:"bytes,11,opt,name=district,proto3" json:"district,omitempty"`
	Address           string  `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	PlannedTeamsCount int32   `protobuf:"varint,13,opt,name=planned_teams_count,json=plannedTeamsCount,proto3" json:"planned_teams_count,omitempty"`
	ActualTeamsCount  int32   `protobuf:"varint,14,opt,name=actual_teams_count,json=actualTeamsCount,proto3" json:"actual_teams_count,omitempty"`
	AmountPerTeam     float64 `protobuf:"fixed64,15,opt,name=amount_per_team,json=amountPerTeam,proto3" json:"amount_per_team,omitempty"`
	TotalAmount       float64 `protobuf:"fixed64,16,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	DiscountAmount    float64 `protobuf:"fixed64,17,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	ActualPaidAmount  float64 `protobuf:"fixed64,18,opt,name=actual_paid_amount,json=actualPaidAmount,proto3" json:"actual_paid_amount,omitempty"`
	PaymentStatus     string  `protobuf:"bytes,19,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	Currency          string  `protobuf:"bytes,20,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DetailedRegistrationResponse) Reset() {
	*x = DetailedRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedRegistrationResponse) ProtoMessage() {}

func (x *DetailedRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedRegistrationResponse.ProtoReflect.Descriptor instead.
func (*DetailedRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{62}
}

func (x *DetailedRegistrationResponse) GetRegistrationId() int32 {
	if x != nil {
		return x.RegistrationId
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetSchoolEmail() string {
	if x != nil {
		return x.SchoolEmail
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetSchoolType() string {
	if x != nil {
		return x.SchoolType
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetContactPersonName() string {
	if x != nil {
		return x.ContactPersonName
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetPlannedTeamsCount() int32 {
	if x != nil {
		return x.PlannedTeamsCount
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetActualTeamsCount() int32 {
	if x != nil {
		return x.ActualTeamsCount
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetAmountPerTeam() float64 {
	if x != nil {
		return x.AmountPerTeam
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetActualPaidAmount() float64 {
	if x != nil {
		return x.ActualPaidAmount
	}
	return 0
}

func (x *DetailedRegistrationResponse) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *DetailedRegistrationResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type ListRegistrationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId    int32   `protobuf:"varint,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	IDebateSchoolId   string  `protobuf:"bytes,2,opt,name=i_debate_school_id,json=iDebateSchoolId,proto3" json:"i_debate_school_id,omitempty"`
	SchoolName        string  `protobuf:"bytes,3,opt,name=school_name,json=schoolName,proto3" json:"school_name,omitempty"`
	SchoolEmail       string  `protobuf:"bytes,4,opt,name=school_email,json=schoolEmail,proto3" json:"school_email,omitempty"`
	PlannedTeamsCount int32   `protobuf:"varint,5,opt,name=planned_teams_count,json=plannedTeamsCount,proto3" json:"planned_teams_count,omitempty"`
	ActualTeamsCount  int32   `protobuf:"varint,6,opt,name=actual_teams_count,json=actualTeamsCount,proto3" json:"actual_teams_count,omitempty"`
	TotalAmount       float64 `protobuf:"fixed64,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	PaymentStatus     string  `protobuf:"bytes,8,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	Currency          string  `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	SchoolId          int32   `protobuf:"varint,10,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (x *ListRegistrationItem) Reset() {
	*x = ListRegistrationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegistrationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationItem) ProtoMessage() {}

func (x *ListRegistrationItem) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationItem.ProtoReflect.Descriptor instead.
func (*ListRegistrationItem) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{63}
}

func (x *ListRegistrationItem) GetRegistrationId() int32 {
	if x != nil {
		return x.RegistrationId
	}
	return 0
}

func (x *ListRegistrationItem) GetIDebateSchoolId() string {
	if x != nil {
		return x.IDebateSchoolId
	}
	return ""
}

func (x *ListRegistrationItem) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *ListRegistrationItem) GetSchoolEmail() string {
	if x != nil {
		return x.SchoolEmail
	}
	return ""
}

func (x *ListRegistrationItem) GetPlannedTeamsCount() int32 {
	if x != nil {
		return x.PlannedTeamsCount
	}
	return 0
}

func (x *ListRegistrationItem) GetActualTeamsCount() int32 {
	if x != nil {
		return x.ActualTeamsCount
	}
	return 0
}

func (x *ListRegistrationItem) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ListRegistrationItem) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *ListRegistrationItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ListRegistrationItem) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

type ListRegistrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrations []*ListRegistrationItem `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
	NextPageToken int32                   `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRegistrationsResponse) Reset() {
	*x = ListRegistrationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegistrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationsResponse) ProtoMessage() {}

func (x *ListRegistrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationsResponse.ProtoReflect.Descriptor instead.
func (*ListRegistrationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{64}
}

func (x *ListRegistrationsResponse) GetRegistrations() []*ListRegistrationItem {
	if x != nil {
		return x.Registrations
	}
	return nil
}

func (x *ListRegistrationsResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type SearchTournamentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SearchTournamentsRequest) Reset() {
	*x = SearchTournamentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTournamentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTournamentsRequest) ProtoMessage() {}

func (x *SearchTournamentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTournamentsRequest.ProtoReflect.Descriptor instead.
func (*SearchTournamentsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{65}
}

func (x *SearchTournamentsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchTournamentsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TournamentSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TournamentSearchResult) Reset() {
	*x = TournamentSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentSearchResult) ProtoMessage() {}

func (x *TournamentSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentSearchResult.ProtoReflect.Descriptor instead.
func (*TournamentSearchResult) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{66}
}

func (x *TournamentSearchResult) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TournamentSearchResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchTournamentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournaments []*TournamentSearchResult `protobuf:"bytes,1,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
}

func (x *SearchTournamentsResponse) Reset() {
	*x = SearchTournamentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTournamentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTournamentsResponse) ProtoMessage() {}

func (x *SearchTournamentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTournamentsResponse.ProtoReflect.Descriptor instead.
func (*SearchTournamentsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{67}
}

func (x *SearchTournamentsResponse) GetTournaments() []*TournamentSearchResult {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

var File_internal_grpc_proto_tournament_management_tournament_proto protoreflect.FileDescriptor

var file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x22,
	0x54, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x9e, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x22, 0xe8, 0x05, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6,
	0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x70,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x70, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x21,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x74, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe2,
	0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xc6, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xeb, 0x04, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x07, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x4a, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x5e, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0x54, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22,
	0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x5e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x6d, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x79, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a, 0x1c,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x1d, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe3,
	0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x44, 0x69, 0x65, 0x6d,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xff, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6f, 0x6f, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x6d, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x44, 0x69, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x44,
	0x69, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xa3, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82,
	0x04, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xf2, 0x05, 0x0a, 0x1c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x91, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x5f,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a,
	0x16, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x6c, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x2a,
	0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x32, 0xe7, 0x1d, 0x0a, 0x11, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x67, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12,
	0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x31, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x30, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x32, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82,
	0x01, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x2c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x79, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x75, 0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDescOnce sync.Once
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData = file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc
)

func file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP() []byte {
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDescOnce.Do(func() {
		file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData)
	})
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData
}

var file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_internal_grpc_proto_tournament_management_tournament_proto_goTypes = []any{
	(LeagueType)(0),                            // 0: tournament_management.LeagueType
	(*LocalDetails)(nil),                       // 1: tournament_management.LocalDetails
	(*InternationalDetails)(nil),               // 2: tournament_management.InternationalDetails
	(*League)(nil),                             // 3: tournament_management.League
	(*TournamentFormat)(nil),                   // 4: tournament_management.TournamentFormat
	(*Tournament)(nil),                         // 5: tournament_management.Tournament
	(*GetTournamentStatsRequest)(nil),          // 6: tournament_management.GetTournamentStatsRequest
	(*GetTournamentStatsResponse)(nil),         // 7: tournament_management.GetTournamentStatsResponse
	(*GetTournamentRegistrationsRequest)(nil),  // 8: tournament_management.GetTournamentRegistrationsRequest
	(*DailyRegistration)(nil),                  // 9: tournament_management.DailyRegistration
	(*GetTournamentRegistrationsResponse)(nil), // 10: tournament_management.GetTournamentRegistrationsResponse
	(*CreateLeagueRequest)(nil),                // 11: tournament_management.CreateLeagueRequest
	(*GetLeagueRequest)(nil),                   // 12: tournament_management.GetLeagueRequest
	(*ListLeaguesRequest)(nil),                 // 13: tournament_management.ListLeaguesRequest
	(*UpdateLeagueRequest)(nil),                // 14: tournament_management.UpdateLeagueRequest
	(*DeleteLeagueRequest)(nil),                // 15: tournament_management.DeleteLeagueRequest
	(*CreateTournamentFormatRequest)(nil),      // 16: tournament_management.CreateTournamentFormatRequest
	(*GetTournamentFormatRequest)(nil),         // 17: tournament_management.GetTournamentFormatRequest
	(*ListTournamentFormatsRequest)(nil),       // 18: tournament_management.ListTournamentFormatsRequest
	(*UpdateTournamentFormatRequest)(nil),      // 19: tournament_management.UpdateTournamentFormatRequest
	(*DeleteTournamentFormatRequest)(nil),      // 20: tournament_management.DeleteTournamentFormatRequest
	(*CreateTournamentRequest)(nil),            // 21: tournament_management.CreateTournamentRequest
	(*GetTournamentRequest)(nil),               // 22: tournament_management.GetTournamentRequest
	(*ListTournamentsRequest)(nil),             // 23: tournament_management.ListTournamentsRequest
	(*UpdateTournamentRequest)(nil),            // 24: tournament_management.UpdateTournamentRequest
	(*DeleteTournamentRequest)(nil),            // 25: tournament_management.DeleteTournamentRequest
	(*CreateLeagueResponse)(nil),               // 26: tournament_management.CreateLeagueResponse
	(*GetLeagueResponse)(nil),                  // 27: tournament_management.GetLeagueResponse
	(*ListLeaguesResponse)(nil),                // 28: tournament_management.ListLeaguesResponse
	(*UpdateLeagueResponse)(nil),               // 29: tournament_management.UpdateLeagueResponse
	(*DeleteLeagueResponse)(nil),               // 30: tournament_management.DeleteLeagueResponse
	(*CreateTournamentFormatResponse)(nil),     // 31: tournament_management.CreateTournamentFormatResponse
	(*GetTournamentFormatResponse)(nil),        // 32: tournament_management.GetTournamentFormatResponse
	(*ListTournamentFormatsResponse)(nil),      // 33: tournament_management.ListTournamentFormatsResponse
	(*UpdateTournamentFormatResponse)(nil),     // 34: tournament_management.UpdateTournamentFormatResponse
	(*DeleteTournamentFormatResponse)(nil),     // 35: tournament_management.DeleteTournamentFormatResponse
	(*CreateTournamentResponse)(nil),           // 36: tournament_management.CreateTournamentResponse
	(*GetTournamentResponse)(nil),              // 37: tournament_management.GetTournamentResponse
	(*ListTournamentsResponse)(nil),            // 38: tournament_management.ListTournamentsResponse
	(*UpdateTournamentResponse)(nil),           // 39: tournament_management.UpdateTournamentResponse
	(*DeleteTournamentResponse)(nil),           // 40: tournament_management.DeleteTournamentResponse
	(*GetInvitationsByUserRequest)(nil),        // 41: tournament_management.GetInvitationsByUserRequest
	(*GetInvitationsByUserResponse)(nil),       // 42: tournament_management.GetInvitationsByUserResponse
	(*GetInvitationsByTournamentRequest)(nil),  // 43: tournament_management.GetInvitationsByTournamentRequest
	(*InvitationInfo)(nil),                     // 44: tournament_management.InvitationInfo
	(*GetInvitationsByTournamentResponse)(nil), // 45: tournament_management.GetInvitationsByTournamentResponse
	(*UpdateInvitationStatusRequest)(nil),      // 46: tournament_management.UpdateInvitationStatusRequest
	(*UpdateInvitationStatusResponse)(nil),     // 47: tournament_management.UpdateInvitationStatusResponse
	(*BulkUpdateInvitationStatusRequest)(nil),  // 48: tournament_management.BulkUpdateInvitationStatusRequest
	(*BulkUpdateInvitationStatusResponse)(nil), // 49: tournament_management.BulkUpdateInvitationStatusResponse
	(*ResendInvitationRequest)(nil),            // 50: tournament_management.ResendInvitationRequest
	(*ResendInvitationResponse)(nil),           // 51: tournament_management.ResendInvitationResponse
	(*BulkResendInvitationsRequest)(nil),       // 52: tournament_management.BulkResendInvitationsRequest
	(*BulkResendInvitationsResponse)(nil),      // 53: tournament_management.BulkResendInvitationsResponse
	(*CreateExpensesRequest)(nil),              // 54: tournament_management.CreateExpensesRequest
	(*UpdateExpensesRequest)(nil),              // 55: tournament_management.UpdateExpensesRequest
	(*GetExpensesRequest)(nil),                 // 56: tournament_management.GetExpensesRequest
	(*ExpensesResponse)(nil),                   // 57: tournament_management.ExpensesResponse
	(*CreateRegistrationRequest)(nil),          // 58: tournament_management.CreateRegistrationRequest
	(*UpdateRegistrationRequest)(nil),          // 59: tournament_management.UpdateRegistrationRequest
	(*GetRegistrationRequest)(nil),             // 60: tournament_management.GetRegistrationRequest
	(*ListRegistrationsRequest)(nil),           // 61: tournament_management.ListRegistrationsRequest
	(*RegistrationResponse)(nil),               // 62: tournament_management.RegistrationResponse
	(*DetailedRegistrationResponse)(nil),       // 63: tournament_management.DetailedRegistrationResponse
	(*ListRegistrationItem)(nil),               // 64: tournament_management.ListRegistrationItem
	(*ListRegistrationsResponse)(nil),          // 65: tournament_management.ListRegistrationsResponse
	(*SearchTournamentsRequest)(nil),           // 66: tournament_management.SearchTournamentsRequest
	(*TournamentSearchResult)(nil),             // 67: tournament_management.TournamentSearchResult
	(*SearchTournamentsResponse)(nil),          // 68: tournament_management.SearchTournamentsResponse
}
var file_internal_grpc_proto_tournament_management_tournament_proto_depIdxs = []int32{
	0,  // 0: tournament_management.League.league_type:type_name -> tournament_management.LeagueType
	9,  // 1: tournament_management.GetTournamentRegistrationsResponse.registrations:type_name -> tournament_management.DailyRegistration
	0,  // 2: tournament_management.CreateLeagueRequest.league_type:type_name -> tournament_management.LeagueType
	1,  // 3: tournament_management.CreateLeagueRequest.local_details:type_name -> tournament_management.LocalDetails
	2,  // 4: tournament_management.CreateLeagueRequest.international_details:type_name -> tournament_management.InternationalDetails
	0,  // 5: tournament_management.UpdateLeagueRequest.league_type:type_name -> tournament_management.LeagueType
	1,  // 6: tournament_management.UpdateLeagueRequest.local_details:type_name -> tournament_management.LocalDetails
	2,  // 7: tournament_management.UpdateLeagueRequest.international_details:type_name -> tournament_management.InternationalDetails
	3,  // 8: tournament_management.CreateLeagueResponse.league:type_name -> tournament_management.League
	3,  // 9: tournament_management.GetLeagueResponse.league:type_name -> tournament_management.League
	3,  // 10: tournament_management.ListLeaguesResponse.leagues:type_name -> tournament_management.League
	3,  // 11: tournament_management.UpdateLeagueResponse.league:type_name -> tournament_management.League
	4,  // 12: tournament_management.CreateTournamentFormatResponse.format:type_name -> tournament_management.TournamentFormat
	4,  // 13: tournament_management.GetTournamentFormatResponse.format:type_name -> tournament_management.TournamentFormat
	4,  // 14: tournament_management.ListTournamentFormatsResponse.formats:type_name -> tournament_management.TournamentFormat
	4,  // 15: tournament_management.UpdateTournamentFormatResponse.format:type_name -> tournament_management.TournamentFormat
	5,  // 16: tournament_management.CreateTournamentResponse.tournament:type_name -> tournament_management.Tournament
	5,  // 17: tournament_management.GetTournamentResponse.tournament:type_name -> tournament_management.Tournament
	5,  // 18: tournament_management.ListTournamentsResponse.tournaments:type_name -> tournament_management.Tournament
	5,  // 19: tournament_management.UpdateTournamentResponse.tournament:type_name -> tournament_management.Tournament
	44, // 20: tournament_management.GetInvitationsByUserResponse.invitations:type_name -> tournament_management.InvitationInfo
	44, // 21: tournament_management.GetInvitationsByTournamentResponse.invitations:type_name -> tournament_management.InvitationInfo
	64, // 22: tournament_management.ListRegistrationsResponse.registrations:type_name -> tournament_management.ListRegistrationItem
	67, // 23: tournament_management.SearchTournamentsResponse.tournaments:type_name -> tournament_management.TournamentSearchResult
	11, // 24: tournament_management.TournamentService.CreateLeague:input_type -> tournament_management.CreateLeagueRequest
	12, // 25: tournament_management.TournamentService.GetLeague:input_type -> tournament_management.GetLeagueRequest
	13, // 26: tournament_management.TournamentService.ListLeagues:input_type -> tournament_management.ListLeaguesRequest
	14, // 27: tournament_management.TournamentService.UpdateLeague:input_type -> tournament_management.UpdateLeagueRequest
	15, // 28: tournament_management.TournamentService.DeleteLeague:input_type -> tournament_management.DeleteLeagueRequest
	16, // 29: tournament_management.TournamentService.CreateTournamentFormat:input_type -> tournament_management.CreateTournamentFormatRequest
	17, // 30: tournament_management.TournamentService.GetTournamentFormat:input_type -> tournament_management.GetTournamentFormatRequest
	18, // 31: tournament_management.TournamentService.ListTournamentFormats:input_type -> tournament_management.ListTournamentFormatsRequest
	19, // 32: tournament_management.TournamentService.UpdateTournamentFormat:input_type -> tournament_management.UpdateTournamentFormatRequest
	20, // 33: tournament_management.TournamentService.DeleteTournamentFormat:input_type -> tournament_management.DeleteTournamentFormatRequest
	21, // 34: tournament_management.TournamentService.CreateTournament:input_type -> tournament_management.CreateTournamentRequest
	22, // 35: tournament_management.TournamentService.GetTournament:input_type -> tournament_management.GetTournamentRequest
	23, // 36: tournament_management.TournamentService.ListTournaments:input_type -> tournament_management.ListTournamentsRequest
	24, // 37: tournament_management.TournamentService.UpdateTournament:input_type -> tournament_management.UpdateTournamentRequest
	25, // 38: tournament_management.TournamentService.DeleteTournament:input_type -> tournament_management.DeleteTournamentRequest
	6,  // 39: tournament_management.TournamentService.GetTournamentStats:input_type -> tournament_management.GetTournamentStatsRequest
	8,  // 40: tournament_management.TournamentService.GetTournamentRegistrations:input_type -> tournament_management.GetTournamentRegistrationsRequest
	41, // 41: tournament_management.TournamentService.GetInvitationsByUser:input_type -> tournament_management.GetInvitationsByUserRequest
	43, // 42: tournament_management.TournamentService.GetInvitationsByTournament:input_type -> tournament_management.GetInvitationsByTournamentRequest
	46, // 43: tournament_management.TournamentService.UpdateInvitationStatus:input_type -> tournament_management.UpdateInvitationStatusRequest
	48, // 44: tournament_management.TournamentService.BulkUpdateInvitationStatus:input_type -> tournament_management.BulkUpdateInvitationStatusRequest
	50, // 45: tournament_management.TournamentService.ResendInvitation:input_type -> tournament_management.ResendInvitationRequest
	52, // 46: tournament_management.TournamentService.BulkResendInvitations:input_type -> tournament_management.BulkResendInvitationsRequest
	54, // 47: tournament_management.TournamentService.CreateTournamentExpenses:input_type -> tournament_management.CreateExpensesRequest
	55, // 48: tournament_management.TournamentService.UpdateTournamentExpenses:input_type -> tournament_management.UpdateExpensesRequest
	56, // 49: tournament_management.TournamentService.GetTournamentExpenses:input_type -> tournament_management.GetExpensesRequest
	58, // 50: tournament_management.TournamentService.CreateSchoolRegistration:input_type -> tournament_management.CreateRegistrationRequest
	59, // 51: tournament_management.TournamentService.UpdateSchoolRegistration:input_type -> tournament_management.UpdateRegistrationRequest
	60, // 52: tournament_management.TournamentService.GetSchoolRegistration:input_type -> tournament_management.GetRegistrationRequest
	61, // 53: tournament_management.TournamentService.ListTournamentRegistrations:input_type -> tournament_management.ListRegistrationsRequest
	66, // 54: tournament_management.TournamentService.SearchTournaments:input_type -> tournament_management.SearchTournamentsRequest
	26, // 55: tournament_management.TournamentService.CreateLeague:output_type -> tournament_management.CreateLeagueResponse
	27, // 56: tournament_management.TournamentService.GetLeague:output_type -> tournament_management.GetLeagueResponse
	28, // 57: tournament_management.TournamentService.ListLeagues:output_type -> tournament_management.ListLeaguesResponse
	29, // 58: tournament_management.TournamentService.UpdateLeague:output_type -> tournament_management.UpdateLeagueResponse
	30, // 59: tournament_management.TournamentService.DeleteLeague:output_type -> tournament_management.DeleteLeagueResponse
	31, // 60: tournament_management.TournamentService.CreateTournamentFormat:output_type -> tournament_management.CreateTournamentFormatResponse
	32, // 61: tournament_management.TournamentService.GetTournamentFormat:output_type -> tournament_management.GetTournamentFormatResponse
	33, // 62: tournament_management.TournamentService.ListTournamentFormats:output_type -> tournament_management.ListTournamentFormatsResponse
	34, // 63: tournament_management.TournamentService.UpdateTournamentFormat:output_type -> tournament_management.UpdateTournamentFormatResponse
	35, // 64: tournament_management.TournamentService.DeleteTournamentFormat:output_type -> tournament_management.DeleteTournamentFormatResponse
	36, // 65: tournament_management.TournamentService.CreateTournament:output_type -> tournament_management.CreateTournamentResponse
	37, // 66: tournament_management.TournamentService.GetTournament:output_type -> tournament_management.GetTournamentResponse
	38, // 67: tournament_management.TournamentService.ListTournaments:output_type -> tournament_management.ListTournamentsResponse
	39, // 68: tournament_management.TournamentService.UpdateTournament:output_type -> tournament_management.UpdateTournamentResponse
	40, // 69: tournament_management.TournamentService.DeleteTournament:output_type -> tournament_management.DeleteTournamentResponse
	7,  // 70: tournament_management.TournamentService.GetTournamentStats:output_type -> tournament_management.GetTournamentStatsResponse
	10, // 71: tournament_management.TournamentService.GetTournamentRegistrations:output_type -> tournament_management.GetTournamentRegistrationsResponse
	42, // 72: tournament_management.TournamentService.GetInvitationsByUser:output_type -> tournament_management.GetInvitationsByUserResponse
	45, // 73: tournament_management.TournamentService.GetInvitationsByTournament:output_type -> tournament_management.GetInvitationsByTournamentResponse
	47, // 74: tournament_management.TournamentService.UpdateInvitationStatus:output_type -> tournament_management.UpdateInvitationStatusResponse
	49, // 75: tournament_management.TournamentService.BulkUpdateInvitationStatus:output_type -> tournament_management.BulkUpdateInvitationStatusResponse
	51, // 76: tournament_management.TournamentService.ResendInvitation:output_type -> tournament_management.ResendInvitationResponse
	53, // 77: tournament_management.TournamentService.BulkResendInvitations:output_type -> tournament_management.BulkResendInvitationsResponse
	57, // 78: tournament_management.TournamentService.CreateTournamentExpenses:output_type -> tournament_management.ExpensesResponse
	57, // 79: tournament_management.TournamentService.UpdateTournamentExpenses:output_type -> tournament_management.ExpensesResponse
	57, // 80: tournament_management.TournamentService.GetTournamentExpenses:output_type -> tournament_management.ExpensesResponse
	62, // 81: tournament_management.TournamentService.CreateSchoolRegistration:output_type -> tournament_management.RegistrationResponse
	62, // 82: tournament_management.TournamentService.UpdateSchoolRegistration:output_type -> tournament_management.RegistrationResponse
	63, // 83: tournament_management.TournamentService.GetSchoolRegistration:output_type -> tournament_management.DetailedRegistrationResponse
	65, // 84: tournament_management.TournamentService.ListTournamentRegistrations:output_type -> tournament_management.ListRegistrationsResponse
	68, // 85: tournament_management.TournamentService.SearchTournaments:output_type -> tournament_management.SearchTournamentsResponse
	55, // [55:86] is the sub-list for method output_type
	24, // [24:55] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_internal_grpc_proto_tournament_management_tournament_proto_init() }
func file_internal_grpc_proto_tournament_management_tournament_proto_init() {
	if File_internal_grpc_proto_tournament_management_tournament_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LocalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*InternationalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*League); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentRegistrationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DailyRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentRegistrationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListLeaguesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListTournamentFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ListTournamentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CreateLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ListLeaguesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ListTournamentFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ListTournamentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*GetInvitationsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetInvitationsByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetInvitationsByTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*InvitationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GetInvitationsByTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateInvitationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateInvitationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*BulkUpdateInvitationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*BulkUpdateInvitationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ResendInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ResendInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*BulkResendInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*BulkResendInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CreateExpensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateExpensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*GetExpensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ExpensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*GetRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*ListRegistrationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*RegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ListRegistrationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*ListRegistrationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*SearchTournamentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*TournamentSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*SearchTournamentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10].OneofWrappers = []any{
		(*CreateLeagueRequest_LocalDetails)(nil),
		(*CreateLeagueRequest_InternationalDetails)(nil),
	}
	file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13].OneofWrappers = []any{
		(*UpdateLeagueRequest_LocalDetails)(nil),
		(*UpdateLeagueRequest_InternationalDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_grpc_proto_tournament_management_tournament_proto_goTypes,
		DependencyIndexes: file_internal_grpc_proto_tournament_management_tournament_proto_depIdxs,
		EnumInfos:         file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes,
		MessageInfos:      file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes,
	}.Build()
	File_internal_grpc_proto_tournament_management_tournament_proto = out.File
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc = nil
	file_internal_grpc_proto_tournament_management_tournament_proto_goTypes = nil
	file_internal_grpc_proto_tournament_management_tournament_proto_depIdxs = nil
}
