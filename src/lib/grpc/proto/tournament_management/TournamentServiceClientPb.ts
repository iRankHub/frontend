/**
 * @fileoverview gRPC-Web generated client stub for tournament_management
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.2
// source: tournament_management/tournament.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as tournament_management_tournament_pb from '../tournament_management/tournament_pb'; // proto import: "tournament_management/tournament.proto"


export class TournamentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateLeague = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/CreateLeague',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.CreateLeagueRequest,
    tournament_management_tournament_pb.CreateLeagueResponse,
    (request: tournament_management_tournament_pb.CreateLeagueRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.CreateLeagueResponse.deserializeBinary
  );

  createLeague(
    request: tournament_management_tournament_pb.CreateLeagueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.CreateLeagueResponse>;

  createLeague(
    request: tournament_management_tournament_pb.CreateLeagueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.CreateLeagueResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.CreateLeagueResponse>;

  createLeague(
    request: tournament_management_tournament_pb.CreateLeagueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.CreateLeagueResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/CreateLeague',
        request,
        metadata || {},
        this.methodDescriptorCreateLeague,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/CreateLeague',
    request,
    metadata || {},
    this.methodDescriptorCreateLeague);
  }

  methodDescriptorGetLeague = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/GetLeague',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.GetLeagueRequest,
    tournament_management_tournament_pb.GetLeagueResponse,
    (request: tournament_management_tournament_pb.GetLeagueRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.GetLeagueResponse.deserializeBinary
  );

  getLeague(
    request: tournament_management_tournament_pb.GetLeagueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.GetLeagueResponse>;

  getLeague(
    request: tournament_management_tournament_pb.GetLeagueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetLeagueResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.GetLeagueResponse>;

  getLeague(
    request: tournament_management_tournament_pb.GetLeagueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetLeagueResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/GetLeague',
        request,
        metadata || {},
        this.methodDescriptorGetLeague,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/GetLeague',
    request,
    metadata || {},
    this.methodDescriptorGetLeague);
  }

  methodDescriptorListLeagues = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/ListLeagues',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.ListLeaguesRequest,
    tournament_management_tournament_pb.ListLeaguesResponse,
    (request: tournament_management_tournament_pb.ListLeaguesRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.ListLeaguesResponse.deserializeBinary
  );

  listLeagues(
    request: tournament_management_tournament_pb.ListLeaguesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.ListLeaguesResponse>;

  listLeagues(
    request: tournament_management_tournament_pb.ListLeaguesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ListLeaguesResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.ListLeaguesResponse>;

  listLeagues(
    request: tournament_management_tournament_pb.ListLeaguesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ListLeaguesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/ListLeagues',
        request,
        metadata || {},
        this.methodDescriptorListLeagues,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/ListLeagues',
    request,
    metadata || {},
    this.methodDescriptorListLeagues);
  }

  methodDescriptorUpdateLeague = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/UpdateLeague',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.UpdateLeagueRequest,
    tournament_management_tournament_pb.UpdateLeagueResponse,
    (request: tournament_management_tournament_pb.UpdateLeagueRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.UpdateLeagueResponse.deserializeBinary
  );

  updateLeague(
    request: tournament_management_tournament_pb.UpdateLeagueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.UpdateLeagueResponse>;

  updateLeague(
    request: tournament_management_tournament_pb.UpdateLeagueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateLeagueResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.UpdateLeagueResponse>;

  updateLeague(
    request: tournament_management_tournament_pb.UpdateLeagueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateLeagueResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/UpdateLeague',
        request,
        metadata || {},
        this.methodDescriptorUpdateLeague,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/UpdateLeague',
    request,
    metadata || {},
    this.methodDescriptorUpdateLeague);
  }

  methodDescriptorDeleteLeague = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/DeleteLeague',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.DeleteLeagueRequest,
    tournament_management_tournament_pb.DeleteLeagueResponse,
    (request: tournament_management_tournament_pb.DeleteLeagueRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.DeleteLeagueResponse.deserializeBinary
  );

  deleteLeague(
    request: tournament_management_tournament_pb.DeleteLeagueRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.DeleteLeagueResponse>;

  deleteLeague(
    request: tournament_management_tournament_pb.DeleteLeagueRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.DeleteLeagueResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.DeleteLeagueResponse>;

  deleteLeague(
    request: tournament_management_tournament_pb.DeleteLeagueRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.DeleteLeagueResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/DeleteLeague',
        request,
        metadata || {},
        this.methodDescriptorDeleteLeague,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/DeleteLeague',
    request,
    metadata || {},
    this.methodDescriptorDeleteLeague);
  }

  methodDescriptorCreateTournamentFormat = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/CreateTournamentFormat',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.CreateTournamentFormatRequest,
    tournament_management_tournament_pb.CreateTournamentFormatResponse,
    (request: tournament_management_tournament_pb.CreateTournamentFormatRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.CreateTournamentFormatResponse.deserializeBinary
  );

  createTournamentFormat(
    request: tournament_management_tournament_pb.CreateTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.CreateTournamentFormatResponse>;

  createTournamentFormat(
    request: tournament_management_tournament_pb.CreateTournamentFormatRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.CreateTournamentFormatResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.CreateTournamentFormatResponse>;

  createTournamentFormat(
    request: tournament_management_tournament_pb.CreateTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.CreateTournamentFormatResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/CreateTournamentFormat',
        request,
        metadata || {},
        this.methodDescriptorCreateTournamentFormat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/CreateTournamentFormat',
    request,
    metadata || {},
    this.methodDescriptorCreateTournamentFormat);
  }

  methodDescriptorGetTournamentFormat = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/GetTournamentFormat',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.GetTournamentFormatRequest,
    tournament_management_tournament_pb.GetTournamentFormatResponse,
    (request: tournament_management_tournament_pb.GetTournamentFormatRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.GetTournamentFormatResponse.deserializeBinary
  );

  getTournamentFormat(
    request: tournament_management_tournament_pb.GetTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.GetTournamentFormatResponse>;

  getTournamentFormat(
    request: tournament_management_tournament_pb.GetTournamentFormatRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetTournamentFormatResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.GetTournamentFormatResponse>;

  getTournamentFormat(
    request: tournament_management_tournament_pb.GetTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetTournamentFormatResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/GetTournamentFormat',
        request,
        metadata || {},
        this.methodDescriptorGetTournamentFormat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/GetTournamentFormat',
    request,
    metadata || {},
    this.methodDescriptorGetTournamentFormat);
  }

  methodDescriptorListTournamentFormats = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/ListTournamentFormats',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.ListTournamentFormatsRequest,
    tournament_management_tournament_pb.ListTournamentFormatsResponse,
    (request: tournament_management_tournament_pb.ListTournamentFormatsRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.ListTournamentFormatsResponse.deserializeBinary
  );

  listTournamentFormats(
    request: tournament_management_tournament_pb.ListTournamentFormatsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.ListTournamentFormatsResponse>;

  listTournamentFormats(
    request: tournament_management_tournament_pb.ListTournamentFormatsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ListTournamentFormatsResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.ListTournamentFormatsResponse>;

  listTournamentFormats(
    request: tournament_management_tournament_pb.ListTournamentFormatsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ListTournamentFormatsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/ListTournamentFormats',
        request,
        metadata || {},
        this.methodDescriptorListTournamentFormats,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/ListTournamentFormats',
    request,
    metadata || {},
    this.methodDescriptorListTournamentFormats);
  }

  methodDescriptorUpdateTournamentFormat = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/UpdateTournamentFormat',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.UpdateTournamentFormatRequest,
    tournament_management_tournament_pb.UpdateTournamentFormatResponse,
    (request: tournament_management_tournament_pb.UpdateTournamentFormatRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.UpdateTournamentFormatResponse.deserializeBinary
  );

  updateTournamentFormat(
    request: tournament_management_tournament_pb.UpdateTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.UpdateTournamentFormatResponse>;

  updateTournamentFormat(
    request: tournament_management_tournament_pb.UpdateTournamentFormatRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateTournamentFormatResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.UpdateTournamentFormatResponse>;

  updateTournamentFormat(
    request: tournament_management_tournament_pb.UpdateTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateTournamentFormatResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/UpdateTournamentFormat',
        request,
        metadata || {},
        this.methodDescriptorUpdateTournamentFormat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/UpdateTournamentFormat',
    request,
    metadata || {},
    this.methodDescriptorUpdateTournamentFormat);
  }

  methodDescriptorDeleteTournamentFormat = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/DeleteTournamentFormat',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.DeleteTournamentFormatRequest,
    tournament_management_tournament_pb.DeleteTournamentFormatResponse,
    (request: tournament_management_tournament_pb.DeleteTournamentFormatRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.DeleteTournamentFormatResponse.deserializeBinary
  );

  deleteTournamentFormat(
    request: tournament_management_tournament_pb.DeleteTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.DeleteTournamentFormatResponse>;

  deleteTournamentFormat(
    request: tournament_management_tournament_pb.DeleteTournamentFormatRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.DeleteTournamentFormatResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.DeleteTournamentFormatResponse>;

  deleteTournamentFormat(
    request: tournament_management_tournament_pb.DeleteTournamentFormatRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.DeleteTournamentFormatResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/DeleteTournamentFormat',
        request,
        metadata || {},
        this.methodDescriptorDeleteTournamentFormat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/DeleteTournamentFormat',
    request,
    metadata || {},
    this.methodDescriptorDeleteTournamentFormat);
  }

  methodDescriptorCreateTournament = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/CreateTournament',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.CreateTournamentRequest,
    tournament_management_tournament_pb.CreateTournamentResponse,
    (request: tournament_management_tournament_pb.CreateTournamentRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.CreateTournamentResponse.deserializeBinary
  );

  createTournament(
    request: tournament_management_tournament_pb.CreateTournamentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.CreateTournamentResponse>;

  createTournament(
    request: tournament_management_tournament_pb.CreateTournamentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.CreateTournamentResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.CreateTournamentResponse>;

  createTournament(
    request: tournament_management_tournament_pb.CreateTournamentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.CreateTournamentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/CreateTournament',
        request,
        metadata || {},
        this.methodDescriptorCreateTournament,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/CreateTournament',
    request,
    metadata || {},
    this.methodDescriptorCreateTournament);
  }

  methodDescriptorGetTournament = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/GetTournament',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.GetTournamentRequest,
    tournament_management_tournament_pb.GetTournamentResponse,
    (request: tournament_management_tournament_pb.GetTournamentRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.GetTournamentResponse.deserializeBinary
  );

  getTournament(
    request: tournament_management_tournament_pb.GetTournamentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.GetTournamentResponse>;

  getTournament(
    request: tournament_management_tournament_pb.GetTournamentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetTournamentResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.GetTournamentResponse>;

  getTournament(
    request: tournament_management_tournament_pb.GetTournamentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetTournamentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/GetTournament',
        request,
        metadata || {},
        this.methodDescriptorGetTournament,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/GetTournament',
    request,
    metadata || {},
    this.methodDescriptorGetTournament);
  }

  methodDescriptorListTournaments = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/ListTournaments',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.ListTournamentsRequest,
    tournament_management_tournament_pb.ListTournamentsResponse,
    (request: tournament_management_tournament_pb.ListTournamentsRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.ListTournamentsResponse.deserializeBinary
  );

  listTournaments(
    request: tournament_management_tournament_pb.ListTournamentsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.ListTournamentsResponse>;

  listTournaments(
    request: tournament_management_tournament_pb.ListTournamentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ListTournamentsResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.ListTournamentsResponse>;

  listTournaments(
    request: tournament_management_tournament_pb.ListTournamentsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ListTournamentsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/ListTournaments',
        request,
        metadata || {},
        this.methodDescriptorListTournaments,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/ListTournaments',
    request,
    metadata || {},
    this.methodDescriptorListTournaments);
  }

  methodDescriptorUpdateTournament = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/UpdateTournament',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.UpdateTournamentRequest,
    tournament_management_tournament_pb.UpdateTournamentResponse,
    (request: tournament_management_tournament_pb.UpdateTournamentRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.UpdateTournamentResponse.deserializeBinary
  );

  updateTournament(
    request: tournament_management_tournament_pb.UpdateTournamentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.UpdateTournamentResponse>;

  updateTournament(
    request: tournament_management_tournament_pb.UpdateTournamentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateTournamentResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.UpdateTournamentResponse>;

  updateTournament(
    request: tournament_management_tournament_pb.UpdateTournamentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateTournamentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/UpdateTournament',
        request,
        metadata || {},
        this.methodDescriptorUpdateTournament,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/UpdateTournament',
    request,
    metadata || {},
    this.methodDescriptorUpdateTournament);
  }

  methodDescriptorDeleteTournament = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/DeleteTournament',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.DeleteTournamentRequest,
    tournament_management_tournament_pb.DeleteTournamentResponse,
    (request: tournament_management_tournament_pb.DeleteTournamentRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.DeleteTournamentResponse.deserializeBinary
  );

  deleteTournament(
    request: tournament_management_tournament_pb.DeleteTournamentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.DeleteTournamentResponse>;

  deleteTournament(
    request: tournament_management_tournament_pb.DeleteTournamentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.DeleteTournamentResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.DeleteTournamentResponse>;

  deleteTournament(
    request: tournament_management_tournament_pb.DeleteTournamentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.DeleteTournamentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/DeleteTournament',
        request,
        metadata || {},
        this.methodDescriptorDeleteTournament,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/DeleteTournament',
    request,
    metadata || {},
    this.methodDescriptorDeleteTournament);
  }

  methodDescriptorGetInvitationsByUser = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/GetInvitationsByUser',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.GetInvitationsByUserRequest,
    tournament_management_tournament_pb.GetInvitationsByUserResponse,
    (request: tournament_management_tournament_pb.GetInvitationsByUserRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.GetInvitationsByUserResponse.deserializeBinary
  );

  getInvitationsByUser(
    request: tournament_management_tournament_pb.GetInvitationsByUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.GetInvitationsByUserResponse>;

  getInvitationsByUser(
    request: tournament_management_tournament_pb.GetInvitationsByUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetInvitationsByUserResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.GetInvitationsByUserResponse>;

  getInvitationsByUser(
    request: tournament_management_tournament_pb.GetInvitationsByUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetInvitationsByUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/GetInvitationsByUser',
        request,
        metadata || {},
        this.methodDescriptorGetInvitationsByUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/GetInvitationsByUser',
    request,
    metadata || {},
    this.methodDescriptorGetInvitationsByUser);
  }

  methodDescriptorGetInvitationsByTournament = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/GetInvitationsByTournament',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.GetInvitationsByTournamentRequest,
    tournament_management_tournament_pb.GetInvitationsByTournamentResponse,
    (request: tournament_management_tournament_pb.GetInvitationsByTournamentRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.GetInvitationsByTournamentResponse.deserializeBinary
  );

  getInvitationsByTournament(
    request: tournament_management_tournament_pb.GetInvitationsByTournamentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.GetInvitationsByTournamentResponse>;

  getInvitationsByTournament(
    request: tournament_management_tournament_pb.GetInvitationsByTournamentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetInvitationsByTournamentResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.GetInvitationsByTournamentResponse>;

  getInvitationsByTournament(
    request: tournament_management_tournament_pb.GetInvitationsByTournamentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.GetInvitationsByTournamentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/GetInvitationsByTournament',
        request,
        metadata || {},
        this.methodDescriptorGetInvitationsByTournament,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/GetInvitationsByTournament',
    request,
    metadata || {},
    this.methodDescriptorGetInvitationsByTournament);
  }

  methodDescriptorUpdateInvitationStatus = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/UpdateInvitationStatus',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.UpdateInvitationStatusRequest,
    tournament_management_tournament_pb.UpdateInvitationStatusResponse,
    (request: tournament_management_tournament_pb.UpdateInvitationStatusRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.UpdateInvitationStatusResponse.deserializeBinary
  );

  updateInvitationStatus(
    request: tournament_management_tournament_pb.UpdateInvitationStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.UpdateInvitationStatusResponse>;

  updateInvitationStatus(
    request: tournament_management_tournament_pb.UpdateInvitationStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateInvitationStatusResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.UpdateInvitationStatusResponse>;

  updateInvitationStatus(
    request: tournament_management_tournament_pb.UpdateInvitationStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.UpdateInvitationStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/UpdateInvitationStatus',
        request,
        metadata || {},
        this.methodDescriptorUpdateInvitationStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/UpdateInvitationStatus',
    request,
    metadata || {},
    this.methodDescriptorUpdateInvitationStatus);
  }

  methodDescriptorBulkUpdateInvitationStatus = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/BulkUpdateInvitationStatus',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.BulkUpdateInvitationStatusRequest,
    tournament_management_tournament_pb.BulkUpdateInvitationStatusResponse,
    (request: tournament_management_tournament_pb.BulkUpdateInvitationStatusRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.BulkUpdateInvitationStatusResponse.deserializeBinary
  );

  bulkUpdateInvitationStatus(
    request: tournament_management_tournament_pb.BulkUpdateInvitationStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.BulkUpdateInvitationStatusResponse>;

  bulkUpdateInvitationStatus(
    request: tournament_management_tournament_pb.BulkUpdateInvitationStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.BulkUpdateInvitationStatusResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.BulkUpdateInvitationStatusResponse>;

  bulkUpdateInvitationStatus(
    request: tournament_management_tournament_pb.BulkUpdateInvitationStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.BulkUpdateInvitationStatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/BulkUpdateInvitationStatus',
        request,
        metadata || {},
        this.methodDescriptorBulkUpdateInvitationStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/BulkUpdateInvitationStatus',
    request,
    metadata || {},
    this.methodDescriptorBulkUpdateInvitationStatus);
  }

  methodDescriptorResendInvitation = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/ResendInvitation',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.ResendInvitationRequest,
    tournament_management_tournament_pb.ResendInvitationResponse,
    (request: tournament_management_tournament_pb.ResendInvitationRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.ResendInvitationResponse.deserializeBinary
  );

  resendInvitation(
    request: tournament_management_tournament_pb.ResendInvitationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.ResendInvitationResponse>;

  resendInvitation(
    request: tournament_management_tournament_pb.ResendInvitationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ResendInvitationResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.ResendInvitationResponse>;

  resendInvitation(
    request: tournament_management_tournament_pb.ResendInvitationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.ResendInvitationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/ResendInvitation',
        request,
        metadata || {},
        this.methodDescriptorResendInvitation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/ResendInvitation',
    request,
    metadata || {},
    this.methodDescriptorResendInvitation);
  }

  methodDescriptorBulkResendInvitations = new grpcWeb.MethodDescriptor(
    '/tournament_management.TournamentService/BulkResendInvitations',
    grpcWeb.MethodType.UNARY,
    tournament_management_tournament_pb.BulkResendInvitationsRequest,
    tournament_management_tournament_pb.BulkResendInvitationsResponse,
    (request: tournament_management_tournament_pb.BulkResendInvitationsRequest) => {
      return request.serializeBinary();
    },
    tournament_management_tournament_pb.BulkResendInvitationsResponse.deserializeBinary
  );

  bulkResendInvitations(
    request: tournament_management_tournament_pb.BulkResendInvitationsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<tournament_management_tournament_pb.BulkResendInvitationsResponse>;

  bulkResendInvitations(
    request: tournament_management_tournament_pb.BulkResendInvitationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.BulkResendInvitationsResponse) => void): grpcWeb.ClientReadableStream<tournament_management_tournament_pb.BulkResendInvitationsResponse>;

  bulkResendInvitations(
    request: tournament_management_tournament_pb.BulkResendInvitationsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tournament_management_tournament_pb.BulkResendInvitationsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/tournament_management.TournamentService/BulkResendInvitations',
        request,
        metadata || {},
        this.methodDescriptorBulkResendInvitations,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/tournament_management.TournamentService/BulkResendInvitations',
    request,
    metadata || {},
    this.methodDescriptorBulkResendInvitations);
  }

}

