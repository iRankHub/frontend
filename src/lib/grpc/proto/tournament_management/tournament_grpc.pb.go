// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: internal/grpc/proto/tournament_management/tournament.proto

package tournament_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TournamentService_CreateLeague_FullMethodName                = "/tournament_management.TournamentService/CreateLeague"
	TournamentService_GetLeague_FullMethodName                   = "/tournament_management.TournamentService/GetLeague"
	TournamentService_ListLeagues_FullMethodName                 = "/tournament_management.TournamentService/ListLeagues"
	TournamentService_UpdateLeague_FullMethodName                = "/tournament_management.TournamentService/UpdateLeague"
	TournamentService_DeleteLeague_FullMethodName                = "/tournament_management.TournamentService/DeleteLeague"
	TournamentService_CreateTournamentFormat_FullMethodName      = "/tournament_management.TournamentService/CreateTournamentFormat"
	TournamentService_GetTournamentFormat_FullMethodName         = "/tournament_management.TournamentService/GetTournamentFormat"
	TournamentService_ListTournamentFormats_FullMethodName       = "/tournament_management.TournamentService/ListTournamentFormats"
	TournamentService_UpdateTournamentFormat_FullMethodName      = "/tournament_management.TournamentService/UpdateTournamentFormat"
	TournamentService_DeleteTournamentFormat_FullMethodName      = "/tournament_management.TournamentService/DeleteTournamentFormat"
	TournamentService_CreateTournament_FullMethodName            = "/tournament_management.TournamentService/CreateTournament"
	TournamentService_GetTournament_FullMethodName               = "/tournament_management.TournamentService/GetTournament"
	TournamentService_ListTournaments_FullMethodName             = "/tournament_management.TournamentService/ListTournaments"
	TournamentService_UpdateTournament_FullMethodName            = "/tournament_management.TournamentService/UpdateTournament"
	TournamentService_DeleteTournament_FullMethodName            = "/tournament_management.TournamentService/DeleteTournament"
	TournamentService_GetTournamentStats_FullMethodName          = "/tournament_management.TournamentService/GetTournamentStats"
	TournamentService_GetTournamentRegistrations_FullMethodName  = "/tournament_management.TournamentService/GetTournamentRegistrations"
	TournamentService_GetInvitationsByUser_FullMethodName        = "/tournament_management.TournamentService/GetInvitationsByUser"
	TournamentService_GetInvitationsByTournament_FullMethodName  = "/tournament_management.TournamentService/GetInvitationsByTournament"
	TournamentService_UpdateInvitationStatus_FullMethodName      = "/tournament_management.TournamentService/UpdateInvitationStatus"
	TournamentService_BulkUpdateInvitationStatus_FullMethodName  = "/tournament_management.TournamentService/BulkUpdateInvitationStatus"
	TournamentService_ResendInvitation_FullMethodName            = "/tournament_management.TournamentService/ResendInvitation"
	TournamentService_BulkResendInvitations_FullMethodName       = "/tournament_management.TournamentService/BulkResendInvitations"
	TournamentService_CreateTournamentExpenses_FullMethodName    = "/tournament_management.TournamentService/CreateTournamentExpenses"
	TournamentService_UpdateTournamentExpenses_FullMethodName    = "/tournament_management.TournamentService/UpdateTournamentExpenses"
	TournamentService_GetTournamentExpenses_FullMethodName       = "/tournament_management.TournamentService/GetTournamentExpenses"
	TournamentService_CreateSchoolRegistration_FullMethodName    = "/tournament_management.TournamentService/CreateSchoolRegistration"
	TournamentService_UpdateSchoolRegistration_FullMethodName    = "/tournament_management.TournamentService/UpdateSchoolRegistration"
	TournamentService_GetSchoolRegistration_FullMethodName       = "/tournament_management.TournamentService/GetSchoolRegistration"
	TournamentService_ListTournamentRegistrations_FullMethodName = "/tournament_management.TournamentService/ListTournamentRegistrations"
	TournamentService_SearchTournaments_FullMethodName           = "/tournament_management.TournamentService/SearchTournaments"
)

// TournamentServiceClient is the client API for TournamentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentServiceClient interface {
	// League operations
	CreateLeague(ctx context.Context, in *CreateLeagueRequest, opts ...grpc.CallOption) (*CreateLeagueResponse, error)
	GetLeague(ctx context.Context, in *GetLeagueRequest, opts ...grpc.CallOption) (*GetLeagueResponse, error)
	ListLeagues(ctx context.Context, in *ListLeaguesRequest, opts ...grpc.CallOption) (*ListLeaguesResponse, error)
	UpdateLeague(ctx context.Context, in *UpdateLeagueRequest, opts ...grpc.CallOption) (*UpdateLeagueResponse, error)
	DeleteLeague(ctx context.Context, in *DeleteLeagueRequest, opts ...grpc.CallOption) (*DeleteLeagueResponse, error)
	// Tournament Format operations
	CreateTournamentFormat(ctx context.Context, in *CreateTournamentFormatRequest, opts ...grpc.CallOption) (*CreateTournamentFormatResponse, error)
	GetTournamentFormat(ctx context.Context, in *GetTournamentFormatRequest, opts ...grpc.CallOption) (*GetTournamentFormatResponse, error)
	ListTournamentFormats(ctx context.Context, in *ListTournamentFormatsRequest, opts ...grpc.CallOption) (*ListTournamentFormatsResponse, error)
	UpdateTournamentFormat(ctx context.Context, in *UpdateTournamentFormatRequest, opts ...grpc.CallOption) (*UpdateTournamentFormatResponse, error)
	DeleteTournamentFormat(ctx context.Context, in *DeleteTournamentFormatRequest, opts ...grpc.CallOption) (*DeleteTournamentFormatResponse, error)
	// Tournament operations
	CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	GetTournament(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error)
	ListTournaments(ctx context.Context, in *ListTournamentsRequest, opts ...grpc.CallOption) (*ListTournamentsResponse, error)
	UpdateTournament(ctx context.Context, in *UpdateTournamentRequest, opts ...grpc.CallOption) (*UpdateTournamentResponse, error)
	DeleteTournament(ctx context.Context, in *DeleteTournamentRequest, opts ...grpc.CallOption) (*DeleteTournamentResponse, error)
	GetTournamentStats(ctx context.Context, in *GetTournamentStatsRequest, opts ...grpc.CallOption) (*GetTournamentStatsResponse, error)
	GetTournamentRegistrations(ctx context.Context, in *GetTournamentRegistrationsRequest, opts ...grpc.CallOption) (*GetTournamentRegistrationsResponse, error)
	// Invitation operations
	GetInvitationsByUser(ctx context.Context, in *GetInvitationsByUserRequest, opts ...grpc.CallOption) (*GetInvitationsByUserResponse, error)
	GetInvitationsByTournament(ctx context.Context, in *GetInvitationsByTournamentRequest, opts ...grpc.CallOption) (*GetInvitationsByTournamentResponse, error)
	UpdateInvitationStatus(ctx context.Context, in *UpdateInvitationStatusRequest, opts ...grpc.CallOption) (*UpdateInvitationStatusResponse, error)
	BulkUpdateInvitationStatus(ctx context.Context, in *BulkUpdateInvitationStatusRequest, opts ...grpc.CallOption) (*BulkUpdateInvitationStatusResponse, error)
	ResendInvitation(ctx context.Context, in *ResendInvitationRequest, opts ...grpc.CallOption) (*ResendInvitationResponse, error)
	BulkResendInvitations(ctx context.Context, in *BulkResendInvitationsRequest, opts ...grpc.CallOption) (*BulkResendInvitationsResponse, error)
	// Tournament Expenses operations
	CreateTournamentExpenses(ctx context.Context, in *CreateExpensesRequest, opts ...grpc.CallOption) (*ExpensesResponse, error)
	UpdateTournamentExpenses(ctx context.Context, in *UpdateExpensesRequest, opts ...grpc.CallOption) (*ExpensesResponse, error)
	GetTournamentExpenses(ctx context.Context, in *GetExpensesRequest, opts ...grpc.CallOption) (*ExpensesResponse, error)
	// School Registration operations
	CreateSchoolRegistration(ctx context.Context, in *CreateRegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	UpdateSchoolRegistration(ctx context.Context, in *UpdateRegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	GetSchoolRegistration(ctx context.Context, in *GetRegistrationRequest, opts ...grpc.CallOption) (*DetailedRegistrationResponse, error)
	ListTournamentRegistrations(ctx context.Context, in *ListRegistrationsRequest, opts ...grpc.CallOption) (*ListRegistrationsResponse, error)
	// Real-time tournament search
	SearchTournaments(ctx context.Context, in *SearchTournamentsRequest, opts ...grpc.CallOption) (*SearchTournamentsResponse, error)
}

type tournamentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentServiceClient(cc grpc.ClientConnInterface) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) CreateLeague(ctx context.Context, in *CreateLeagueRequest, opts ...grpc.CallOption) (*CreateLeagueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLeagueResponse)
	err := c.cc.Invoke(ctx, TournamentService_CreateLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetLeague(ctx context.Context, in *GetLeagueRequest, opts ...grpc.CallOption) (*GetLeagueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeagueResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ListLeagues(ctx context.Context, in *ListLeaguesRequest, opts ...grpc.CallOption) (*ListLeaguesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeaguesResponse)
	err := c.cc.Invoke(ctx, TournamentService_ListLeagues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateLeague(ctx context.Context, in *UpdateLeagueRequest, opts ...grpc.CallOption) (*UpdateLeagueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLeagueResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) DeleteLeague(ctx context.Context, in *DeleteLeagueRequest, opts ...grpc.CallOption) (*DeleteLeagueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLeagueResponse)
	err := c.cc.Invoke(ctx, TournamentService_DeleteLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) CreateTournamentFormat(ctx context.Context, in *CreateTournamentFormatRequest, opts ...grpc.CallOption) (*CreateTournamentFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTournamentFormatResponse)
	err := c.cc.Invoke(ctx, TournamentService_CreateTournamentFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentFormat(ctx context.Context, in *GetTournamentFormatRequest, opts ...grpc.CallOption) (*GetTournamentFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTournamentFormatResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetTournamentFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ListTournamentFormats(ctx context.Context, in *ListTournamentFormatsRequest, opts ...grpc.CallOption) (*ListTournamentFormatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTournamentFormatsResponse)
	err := c.cc.Invoke(ctx, TournamentService_ListTournamentFormats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateTournamentFormat(ctx context.Context, in *UpdateTournamentFormatRequest, opts ...grpc.CallOption) (*UpdateTournamentFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTournamentFormatResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateTournamentFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) DeleteTournamentFormat(ctx context.Context, in *DeleteTournamentFormatRequest, opts ...grpc.CallOption) (*DeleteTournamentFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTournamentFormatResponse)
	err := c.cc.Invoke(ctx, TournamentService_DeleteTournamentFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_CreateTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournament(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ListTournaments(ctx context.Context, in *ListTournamentsRequest, opts ...grpc.CallOption) (*ListTournamentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTournamentsResponse)
	err := c.cc.Invoke(ctx, TournamentService_ListTournaments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateTournament(ctx context.Context, in *UpdateTournamentRequest, opts ...grpc.CallOption) (*UpdateTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) DeleteTournament(ctx context.Context, in *DeleteTournamentRequest, opts ...grpc.CallOption) (*DeleteTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_DeleteTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentStats(ctx context.Context, in *GetTournamentStatsRequest, opts ...grpc.CallOption) (*GetTournamentStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTournamentStatsResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetTournamentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentRegistrations(ctx context.Context, in *GetTournamentRegistrationsRequest, opts ...grpc.CallOption) (*GetTournamentRegistrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTournamentRegistrationsResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetTournamentRegistrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetInvitationsByUser(ctx context.Context, in *GetInvitationsByUserRequest, opts ...grpc.CallOption) (*GetInvitationsByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationsByUserResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetInvitationsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetInvitationsByTournament(ctx context.Context, in *GetInvitationsByTournamentRequest, opts ...grpc.CallOption) (*GetInvitationsByTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationsByTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetInvitationsByTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateInvitationStatus(ctx context.Context, in *UpdateInvitationStatusRequest, opts ...grpc.CallOption) (*UpdateInvitationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInvitationStatusResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateInvitationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) BulkUpdateInvitationStatus(ctx context.Context, in *BulkUpdateInvitationStatusRequest, opts ...grpc.CallOption) (*BulkUpdateInvitationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateInvitationStatusResponse)
	err := c.cc.Invoke(ctx, TournamentService_BulkUpdateInvitationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ResendInvitation(ctx context.Context, in *ResendInvitationRequest, opts ...grpc.CallOption) (*ResendInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendInvitationResponse)
	err := c.cc.Invoke(ctx, TournamentService_ResendInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) BulkResendInvitations(ctx context.Context, in *BulkResendInvitationsRequest, opts ...grpc.CallOption) (*BulkResendInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkResendInvitationsResponse)
	err := c.cc.Invoke(ctx, TournamentService_BulkResendInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) CreateTournamentExpenses(ctx context.Context, in *CreateExpensesRequest, opts ...grpc.CallOption) (*ExpensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesResponse)
	err := c.cc.Invoke(ctx, TournamentService_CreateTournamentExpenses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateTournamentExpenses(ctx context.Context, in *UpdateExpensesRequest, opts ...grpc.CallOption) (*ExpensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateTournamentExpenses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentExpenses(ctx context.Context, in *GetExpensesRequest, opts ...grpc.CallOption) (*ExpensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetTournamentExpenses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) CreateSchoolRegistration(ctx context.Context, in *CreateRegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, TournamentService_CreateSchoolRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateSchoolRegistration(ctx context.Context, in *UpdateRegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateSchoolRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetSchoolRegistration(ctx context.Context, in *GetRegistrationRequest, opts ...grpc.CallOption) (*DetailedRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailedRegistrationResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetSchoolRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ListTournamentRegistrations(ctx context.Context, in *ListRegistrationsRequest, opts ...grpc.CallOption) (*ListRegistrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegistrationsResponse)
	err := c.cc.Invoke(ctx, TournamentService_ListTournamentRegistrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) SearchTournaments(ctx context.Context, in *SearchTournamentsRequest, opts ...grpc.CallOption) (*SearchTournamentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTournamentsResponse)
	err := c.cc.Invoke(ctx, TournamentService_SearchTournaments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentServiceServer is the server API for TournamentService service.
// All implementations must embed UnimplementedTournamentServiceServer
// for forward compatibility.
type TournamentServiceServer interface {
	// League operations
	CreateLeague(context.Context, *CreateLeagueRequest) (*CreateLeagueResponse, error)
	GetLeague(context.Context, *GetLeagueRequest) (*GetLeagueResponse, error)
	ListLeagues(context.Context, *ListLeaguesRequest) (*ListLeaguesResponse, error)
	UpdateLeague(context.Context, *UpdateLeagueRequest) (*UpdateLeagueResponse, error)
	DeleteLeague(context.Context, *DeleteLeagueRequest) (*DeleteLeagueResponse, error)
	// Tournament Format operations
	CreateTournamentFormat(context.Context, *CreateTournamentFormatRequest) (*CreateTournamentFormatResponse, error)
	GetTournamentFormat(context.Context, *GetTournamentFormatRequest) (*GetTournamentFormatResponse, error)
	ListTournamentFormats(context.Context, *ListTournamentFormatsRequest) (*ListTournamentFormatsResponse, error)
	UpdateTournamentFormat(context.Context, *UpdateTournamentFormatRequest) (*UpdateTournamentFormatResponse, error)
	DeleteTournamentFormat(context.Context, *DeleteTournamentFormatRequest) (*DeleteTournamentFormatResponse, error)
	// Tournament operations
	CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error)
	GetTournament(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error)
	ListTournaments(context.Context, *ListTournamentsRequest) (*ListTournamentsResponse, error)
	UpdateTournament(context.Context, *UpdateTournamentRequest) (*UpdateTournamentResponse, error)
	DeleteTournament(context.Context, *DeleteTournamentRequest) (*DeleteTournamentResponse, error)
	GetTournamentStats(context.Context, *GetTournamentStatsRequest) (*GetTournamentStatsResponse, error)
	GetTournamentRegistrations(context.Context, *GetTournamentRegistrationsRequest) (*GetTournamentRegistrationsResponse, error)
	// Invitation operations
	GetInvitationsByUser(context.Context, *GetInvitationsByUserRequest) (*GetInvitationsByUserResponse, error)
	GetInvitationsByTournament(context.Context, *GetInvitationsByTournamentRequest) (*GetInvitationsByTournamentResponse, error)
	UpdateInvitationStatus(context.Context, *UpdateInvitationStatusRequest) (*UpdateInvitationStatusResponse, error)
	BulkUpdateInvitationStatus(context.Context, *BulkUpdateInvitationStatusRequest) (*BulkUpdateInvitationStatusResponse, error)
	ResendInvitation(context.Context, *ResendInvitationRequest) (*ResendInvitationResponse, error)
	BulkResendInvitations(context.Context, *BulkResendInvitationsRequest) (*BulkResendInvitationsResponse, error)
	// Tournament Expenses operations
	CreateTournamentExpenses(context.Context, *CreateExpensesRequest) (*ExpensesResponse, error)
	UpdateTournamentExpenses(context.Context, *UpdateExpensesRequest) (*ExpensesResponse, error)
	GetTournamentExpenses(context.Context, *GetExpensesRequest) (*ExpensesResponse, error)
	// School Registration operations
	CreateSchoolRegistration(context.Context, *CreateRegistrationRequest) (*RegistrationResponse, error)
	UpdateSchoolRegistration(context.Context, *UpdateRegistrationRequest) (*RegistrationResponse, error)
	GetSchoolRegistration(context.Context, *GetRegistrationRequest) (*DetailedRegistrationResponse, error)
	ListTournamentRegistrations(context.Context, *ListRegistrationsRequest) (*ListRegistrationsResponse, error)
	// Real-time tournament search
	SearchTournaments(context.Context, *SearchTournamentsRequest) (*SearchTournamentsResponse, error)
	mustEmbedUnimplementedTournamentServiceServer()
}

// UnimplementedTournamentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTournamentServiceServer struct{}

func (UnimplementedTournamentServiceServer) CreateLeague(context.Context, *CreateLeagueRequest) (*CreateLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeague not implemented")
}
func (UnimplementedTournamentServiceServer) GetLeague(context.Context, *GetLeagueRequest) (*GetLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeague not implemented")
}
func (UnimplementedTournamentServiceServer) ListLeagues(context.Context, *ListLeaguesRequest) (*ListLeaguesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeagues not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateLeague(context.Context, *UpdateLeagueRequest) (*UpdateLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeague not implemented")
}
func (UnimplementedTournamentServiceServer) DeleteLeague(context.Context, *DeleteLeagueRequest) (*DeleteLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeague not implemented")
}
func (UnimplementedTournamentServiceServer) CreateTournamentFormat(context.Context, *CreateTournamentFormatRequest) (*CreateTournamentFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournamentFormat not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentFormat(context.Context, *GetTournamentFormatRequest) (*GetTournamentFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentFormat not implemented")
}
func (UnimplementedTournamentServiceServer) ListTournamentFormats(context.Context, *ListTournamentFormatsRequest) (*ListTournamentFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTournamentFormats not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateTournamentFormat(context.Context, *UpdateTournamentFormatRequest) (*UpdateTournamentFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTournamentFormat not implemented")
}
func (UnimplementedTournamentServiceServer) DeleteTournamentFormat(context.Context, *DeleteTournamentFormatRequest) (*DeleteTournamentFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTournamentFormat not implemented")
}
func (UnimplementedTournamentServiceServer) CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournament not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournament(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournament not implemented")
}
func (UnimplementedTournamentServiceServer) ListTournaments(context.Context, *ListTournamentsRequest) (*ListTournamentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTournaments not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateTournament(context.Context, *UpdateTournamentRequest) (*UpdateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTournament not implemented")
}
func (UnimplementedTournamentServiceServer) DeleteTournament(context.Context, *DeleteTournamentRequest) (*DeleteTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTournament not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentStats(context.Context, *GetTournamentStatsRequest) (*GetTournamentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentStats not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentRegistrations(context.Context, *GetTournamentRegistrationsRequest) (*GetTournamentRegistrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentRegistrations not implemented")
}
func (UnimplementedTournamentServiceServer) GetInvitationsByUser(context.Context, *GetInvitationsByUserRequest) (*GetInvitationsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationsByUser not implemented")
}
func (UnimplementedTournamentServiceServer) GetInvitationsByTournament(context.Context, *GetInvitationsByTournamentRequest) (*GetInvitationsByTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationsByTournament not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateInvitationStatus(context.Context, *UpdateInvitationStatusRequest) (*UpdateInvitationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitationStatus not implemented")
}
func (UnimplementedTournamentServiceServer) BulkUpdateInvitationStatus(context.Context, *BulkUpdateInvitationStatusRequest) (*BulkUpdateInvitationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateInvitationStatus not implemented")
}
func (UnimplementedTournamentServiceServer) ResendInvitation(context.Context, *ResendInvitationRequest) (*ResendInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendInvitation not implemented")
}
func (UnimplementedTournamentServiceServer) BulkResendInvitations(context.Context, *BulkResendInvitationsRequest) (*BulkResendInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkResendInvitations not implemented")
}
func (UnimplementedTournamentServiceServer) CreateTournamentExpenses(context.Context, *CreateExpensesRequest) (*ExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournamentExpenses not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateTournamentExpenses(context.Context, *UpdateExpensesRequest) (*ExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTournamentExpenses not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentExpenses(context.Context, *GetExpensesRequest) (*ExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentExpenses not implemented")
}
func (UnimplementedTournamentServiceServer) CreateSchoolRegistration(context.Context, *CreateRegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchoolRegistration not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateSchoolRegistration(context.Context, *UpdateRegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchoolRegistration not implemented")
}
func (UnimplementedTournamentServiceServer) GetSchoolRegistration(context.Context, *GetRegistrationRequest) (*DetailedRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolRegistration not implemented")
}
func (UnimplementedTournamentServiceServer) ListTournamentRegistrations(context.Context, *ListRegistrationsRequest) (*ListRegistrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTournamentRegistrations not implemented")
}
func (UnimplementedTournamentServiceServer) SearchTournaments(context.Context, *SearchTournamentsRequest) (*SearchTournamentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTournaments not implemented")
}
func (UnimplementedTournamentServiceServer) mustEmbedUnimplementedTournamentServiceServer() {}
func (UnimplementedTournamentServiceServer) testEmbeddedByValue()                           {}

// UnsafeTournamentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServiceServer will
// result in compilation errors.
type UnsafeTournamentServiceServer interface {
	mustEmbedUnimplementedTournamentServiceServer()
}

func RegisterTournamentServiceServer(s grpc.ServiceRegistrar, srv TournamentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTournamentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TournamentService_ServiceDesc, srv)
}

func _TournamentService_CreateLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateLeague(ctx, req.(*CreateLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetLeague(ctx, req.(*GetLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ListLeagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ListLeagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ListLeagues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ListLeagues(ctx, req.(*ListLeaguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateLeague(ctx, req.(*UpdateLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_DeleteLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).DeleteLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_DeleteLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).DeleteLeague(ctx, req.(*DeleteLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_CreateTournamentFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateTournamentFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateTournamentFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateTournamentFormat(ctx, req.(*CreateTournamentFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournamentFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentFormat(ctx, req.(*GetTournamentFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ListTournamentFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTournamentFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ListTournamentFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ListTournamentFormats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ListTournamentFormats(ctx, req.(*ListTournamentFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateTournamentFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTournamentFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateTournamentFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateTournamentFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateTournamentFormat(ctx, req.(*UpdateTournamentFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_DeleteTournamentFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTournamentFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).DeleteTournamentFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_DeleteTournamentFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).DeleteTournamentFormat(ctx, req.(*DeleteTournamentFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_CreateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateTournament(ctx, req.(*CreateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournament(ctx, req.(*GetTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ListTournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTournamentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ListTournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ListTournaments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ListTournaments(ctx, req.(*ListTournamentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateTournament(ctx, req.(*UpdateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_DeleteTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).DeleteTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_DeleteTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).DeleteTournament(ctx, req.(*DeleteTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournamentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentStats(ctx, req.(*GetTournamentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournamentRegistrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentRegistrations(ctx, req.(*GetTournamentRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetInvitationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetInvitationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetInvitationsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetInvitationsByUser(ctx, req.(*GetInvitationsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetInvitationsByTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationsByTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetInvitationsByTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetInvitationsByTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetInvitationsByTournament(ctx, req.(*GetInvitationsByTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateInvitationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateInvitationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateInvitationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateInvitationStatus(ctx, req.(*UpdateInvitationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_BulkUpdateInvitationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateInvitationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).BulkUpdateInvitationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_BulkUpdateInvitationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).BulkUpdateInvitationStatus(ctx, req.(*BulkUpdateInvitationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ResendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ResendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ResendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ResendInvitation(ctx, req.(*ResendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_BulkResendInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkResendInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).BulkResendInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_BulkResendInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).BulkResendInvitations(ctx, req.(*BulkResendInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_CreateTournamentExpenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateTournamentExpenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateTournamentExpenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateTournamentExpenses(ctx, req.(*CreateExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateTournamentExpenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateTournamentExpenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateTournamentExpenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateTournamentExpenses(ctx, req.(*UpdateExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentExpenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentExpenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournamentExpenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentExpenses(ctx, req.(*GetExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_CreateSchoolRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateSchoolRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateSchoolRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateSchoolRegistration(ctx, req.(*CreateRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateSchoolRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateSchoolRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateSchoolRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateSchoolRegistration(ctx, req.(*UpdateRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetSchoolRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetSchoolRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetSchoolRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetSchoolRegistration(ctx, req.(*GetRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ListTournamentRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ListTournamentRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ListTournamentRegistrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ListTournamentRegistrations(ctx, req.(*ListRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_SearchTournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTournamentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).SearchTournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_SearchTournaments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).SearchTournaments(ctx, req.(*SearchTournamentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TournamentService_ServiceDesc is the grpc.ServiceDesc for TournamentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TournamentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tournament_management.TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeague",
			Handler:    _TournamentService_CreateLeague_Handler,
		},
		{
			MethodName: "GetLeague",
			Handler:    _TournamentService_GetLeague_Handler,
		},
		{
			MethodName: "ListLeagues",
			Handler:    _TournamentService_ListLeagues_Handler,
		},
		{
			MethodName: "UpdateLeague",
			Handler:    _TournamentService_UpdateLeague_Handler,
		},
		{
			MethodName: "DeleteLeague",
			Handler:    _TournamentService_DeleteLeague_Handler,
		},
		{
			MethodName: "CreateTournamentFormat",
			Handler:    _TournamentService_CreateTournamentFormat_Handler,
		},
		{
			MethodName: "GetTournamentFormat",
			Handler:    _TournamentService_GetTournamentFormat_Handler,
		},
		{
			MethodName: "ListTournamentFormats",
			Handler:    _TournamentService_ListTournamentFormats_Handler,
		},
		{
			MethodName: "UpdateTournamentFormat",
			Handler:    _TournamentService_UpdateTournamentFormat_Handler,
		},
		{
			MethodName: "DeleteTournamentFormat",
			Handler:    _TournamentService_DeleteTournamentFormat_Handler,
		},
		{
			MethodName: "CreateTournament",
			Handler:    _TournamentService_CreateTournament_Handler,
		},
		{
			MethodName: "GetTournament",
			Handler:    _TournamentService_GetTournament_Handler,
		},
		{
			MethodName: "ListTournaments",
			Handler:    _TournamentService_ListTournaments_Handler,
		},
		{
			MethodName: "UpdateTournament",
			Handler:    _TournamentService_UpdateTournament_Handler,
		},
		{
			MethodName: "DeleteTournament",
			Handler:    _TournamentService_DeleteTournament_Handler,
		},
		{
			MethodName: "GetTournamentStats",
			Handler:    _TournamentService_GetTournamentStats_Handler,
		},
		{
			MethodName: "GetTournamentRegistrations",
			Handler:    _TournamentService_GetTournamentRegistrations_Handler,
		},
		{
			MethodName: "GetInvitationsByUser",
			Handler:    _TournamentService_GetInvitationsByUser_Handler,
		},
		{
			MethodName: "GetInvitationsByTournament",
			Handler:    _TournamentService_GetInvitationsByTournament_Handler,
		},
		{
			MethodName: "UpdateInvitationStatus",
			Handler:    _TournamentService_UpdateInvitationStatus_Handler,
		},
		{
			MethodName: "BulkUpdateInvitationStatus",
			Handler:    _TournamentService_BulkUpdateInvitationStatus_Handler,
		},
		{
			MethodName: "ResendInvitation",
			Handler:    _TournamentService_ResendInvitation_Handler,
		},
		{
			MethodName: "BulkResendInvitations",
			Handler:    _TournamentService_BulkResendInvitations_Handler,
		},
		{
			MethodName: "CreateTournamentExpenses",
			Handler:    _TournamentService_CreateTournamentExpenses_Handler,
		},
		{
			MethodName: "UpdateTournamentExpenses",
			Handler:    _TournamentService_UpdateTournamentExpenses_Handler,
		},
		{
			MethodName: "GetTournamentExpenses",
			Handler:    _TournamentService_GetTournamentExpenses_Handler,
		},
		{
			MethodName: "CreateSchoolRegistration",
			Handler:    _TournamentService_CreateSchoolRegistration_Handler,
		},
		{
			MethodName: "UpdateSchoolRegistration",
			Handler:    _TournamentService_UpdateSchoolRegistration_Handler,
		},
		{
			MethodName: "GetSchoolRegistration",
			Handler:    _TournamentService_GetSchoolRegistration_Handler,
		},
		{
			MethodName: "ListTournamentRegistrations",
			Handler:    _TournamentService_ListTournamentRegistrations_Handler,
		},
		{
			MethodName: "SearchTournaments",
			Handler:    _TournamentService_SearchTournaments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/tournament_management/tournament.proto",
}
