/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: tournament_management/tournament.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tournament_management {
    export enum LeagueType {
        local = 0,
        international = 1
    }
    export class LocalDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            provinces?: string[];
            districts?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("provinces" in data && data.provinces != undefined) {
                    this.provinces = data.provinces;
                }
                if ("districts" in data && data.districts != undefined) {
                    this.districts = data.districts;
                }
            }
        }
        get provinces() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set provinces(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get districts() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set districts(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            provinces?: string[];
            districts?: string[];
        }): LocalDetails {
            const message = new LocalDetails({});
            if (data.provinces != null) {
                message.provinces = data.provinces;
            }
            if (data.districts != null) {
                message.districts = data.districts;
            }
            return message;
        }
        toObject() {
            const data: {
                provinces?: string[];
                districts?: string[];
            } = {};
            if (this.provinces != null) {
                data.provinces = this.provinces;
            }
            if (this.districts != null) {
                data.districts = this.districts;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.provinces.length)
                writer.writeRepeatedString(1, this.provinces);
            if (this.districts.length)
                writer.writeRepeatedString(2, this.districts);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalDetails {
            return LocalDetails.deserialize(bytes);
        }
    }
    export class InternationalDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            continents?: string[];
            countries?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("continents" in data && data.continents != undefined) {
                    this.continents = data.continents;
                }
                if ("countries" in data && data.countries != undefined) {
                    this.countries = data.countries;
                }
            }
        }
        get continents() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set continents(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get countries() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set countries(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            continents?: string[];
            countries?: string[];
        }): InternationalDetails {
            const message = new InternationalDetails({});
            if (data.continents != null) {
                message.continents = data.continents;
            }
            if (data.countries != null) {
                message.countries = data.countries;
            }
            return message;
        }
        toObject() {
            const data: {
                continents?: string[];
                countries?: string[];
            } = {};
            if (this.continents != null) {
                data.continents = this.continents;
            }
            if (this.countries != null) {
                data.countries = this.countries;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.continents.length)
                writer.writeRepeatedString(1, this.continents);
            if (this.countries.length)
                writer.writeRepeatedString(2, this.countries);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InternationalDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InternationalDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InternationalDetails {
            return InternationalDetails.deserialize(bytes);
        }
    }
    export class League extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            league_id?: number;
            name?: string;
            league_type?: LeagueType;
            details?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("league_type" in data && data.league_type != undefined) {
                    this.league_type = data.league_type;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
            }
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get league_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, LeagueType.local) as LeagueType;
        }
        set league_type(value: LeagueType) {
            pb_1.Message.setField(this, 3, value);
        }
        get details() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set details(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            league_id?: number;
            name?: string;
            league_type?: LeagueType;
            details?: string;
        }): League {
            const message = new League({});
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.league_type != null) {
                message.league_type = data.league_type;
            }
            if (data.details != null) {
                message.details = data.details;
            }
            return message;
        }
        toObject() {
            const data: {
                league_id?: number;
                name?: string;
                league_type?: LeagueType;
                details?: string;
            } = {};
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.league_type != null) {
                data.league_type = this.league_type;
            }
            if (this.details != null) {
                data.details = this.details;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.league_id != 0)
                writer.writeInt32(1, this.league_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.league_type != LeagueType.local)
                writer.writeEnum(3, this.league_type);
            if (this.details.length)
                writer.writeString(4, this.details);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): League {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new League();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.league_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.league_type = reader.readEnum();
                        break;
                    case 4:
                        message.details = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): League {
            return League.deserialize(bytes);
        }
    }
    export class TournamentFormat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format_id?: number;
            format_name?: string;
            description?: string;
            speakers_per_team?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("format_name" in data && data.format_name != undefined) {
                    this.format_name = data.format_name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("speakers_per_team" in data && data.speakers_per_team != undefined) {
                    this.speakers_per_team = data.speakers_per_team;
                }
            }
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get format_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set format_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get speakers_per_team() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set speakers_per_team(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            format_id?: number;
            format_name?: string;
            description?: string;
            speakers_per_team?: number;
        }): TournamentFormat {
            const message = new TournamentFormat({});
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.format_name != null) {
                message.format_name = data.format_name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.speakers_per_team != null) {
                message.speakers_per_team = data.speakers_per_team;
            }
            return message;
        }
        toObject() {
            const data: {
                format_id?: number;
                format_name?: string;
                description?: string;
                speakers_per_team?: number;
            } = {};
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.format_name != null) {
                data.format_name = this.format_name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.speakers_per_team != null) {
                data.speakers_per_team = this.speakers_per_team;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format_id != 0)
                writer.writeInt32(1, this.format_id);
            if (this.format_name.length)
                writer.writeString(2, this.format_name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.speakers_per_team != 0)
                writer.writeInt32(4, this.speakers_per_team);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TournamentFormat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TournamentFormat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format_id = reader.readInt32();
                        break;
                    case 2:
                        message.format_name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.speakers_per_team = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TournamentFormat {
            return TournamentFormat.deserialize(bytes);
        }
    }
    export class Tournament extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            name?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            format_id?: number;
            league_id?: number;
            coordinator_id?: number;
            number_of_preliminary_rounds?: number;
            number_of_elimination_rounds?: number;
            judges_per_debate_preliminary?: number;
            judges_per_debate_elimination?: number;
            tournament_fee?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("coordinator_id" in data && data.coordinator_id != undefined) {
                    this.coordinator_id = data.coordinator_id;
                }
                if ("number_of_preliminary_rounds" in data && data.number_of_preliminary_rounds != undefined) {
                    this.number_of_preliminary_rounds = data.number_of_preliminary_rounds;
                }
                if ("number_of_elimination_rounds" in data && data.number_of_elimination_rounds != undefined) {
                    this.number_of_elimination_rounds = data.number_of_elimination_rounds;
                }
                if ("judges_per_debate_preliminary" in data && data.judges_per_debate_preliminary != undefined) {
                    this.judges_per_debate_preliminary = data.judges_per_debate_preliminary;
                }
                if ("judges_per_debate_elimination" in data && data.judges_per_debate_elimination != undefined) {
                    this.judges_per_debate_elimination = data.judges_per_debate_elimination;
                }
                if ("tournament_fee" in data && data.tournament_fee != undefined) {
                    this.tournament_fee = data.tournament_fee;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get end_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set end_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get coordinator_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set coordinator_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get number_of_preliminary_rounds() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set number_of_preliminary_rounds(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get number_of_elimination_rounds() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set number_of_elimination_rounds(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get judges_per_debate_preliminary() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set judges_per_debate_preliminary(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get judges_per_debate_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set judges_per_debate_elimination(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get tournament_fee() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set tournament_fee(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            name?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            format_id?: number;
            league_id?: number;
            coordinator_id?: number;
            number_of_preliminary_rounds?: number;
            number_of_elimination_rounds?: number;
            judges_per_debate_preliminary?: number;
            judges_per_debate_elimination?: number;
            tournament_fee?: number;
        }): Tournament {
            const message = new Tournament({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_date != null) {
                message.end_date = data.end_date;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.coordinator_id != null) {
                message.coordinator_id = data.coordinator_id;
            }
            if (data.number_of_preliminary_rounds != null) {
                message.number_of_preliminary_rounds = data.number_of_preliminary_rounds;
            }
            if (data.number_of_elimination_rounds != null) {
                message.number_of_elimination_rounds = data.number_of_elimination_rounds;
            }
            if (data.judges_per_debate_preliminary != null) {
                message.judges_per_debate_preliminary = data.judges_per_debate_preliminary;
            }
            if (data.judges_per_debate_elimination != null) {
                message.judges_per_debate_elimination = data.judges_per_debate_elimination;
            }
            if (data.tournament_fee != null) {
                message.tournament_fee = data.tournament_fee;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                name?: string;
                start_date?: string;
                end_date?: string;
                location?: string;
                format_id?: number;
                league_id?: number;
                coordinator_id?: number;
                number_of_preliminary_rounds?: number;
                number_of_elimination_rounds?: number;
                judges_per_debate_preliminary?: number;
                judges_per_debate_elimination?: number;
                tournament_fee?: number;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_date != null) {
                data.end_date = this.end_date;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.coordinator_id != null) {
                data.coordinator_id = this.coordinator_id;
            }
            if (this.number_of_preliminary_rounds != null) {
                data.number_of_preliminary_rounds = this.number_of_preliminary_rounds;
            }
            if (this.number_of_elimination_rounds != null) {
                data.number_of_elimination_rounds = this.number_of_elimination_rounds;
            }
            if (this.judges_per_debate_preliminary != null) {
                data.judges_per_debate_preliminary = this.judges_per_debate_preliminary;
            }
            if (this.judges_per_debate_elimination != null) {
                data.judges_per_debate_elimination = this.judges_per_debate_elimination;
            }
            if (this.tournament_fee != null) {
                data.tournament_fee = this.tournament_fee;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.start_date.length)
                writer.writeString(3, this.start_date);
            if (this.end_date.length)
                writer.writeString(4, this.end_date);
            if (this.location.length)
                writer.writeString(5, this.location);
            if (this.format_id != 0)
                writer.writeInt32(6, this.format_id);
            if (this.league_id != 0)
                writer.writeInt32(7, this.league_id);
            if (this.coordinator_id != 0)
                writer.writeInt32(8, this.coordinator_id);
            if (this.number_of_preliminary_rounds != 0)
                writer.writeInt32(9, this.number_of_preliminary_rounds);
            if (this.number_of_elimination_rounds != 0)
                writer.writeInt32(10, this.number_of_elimination_rounds);
            if (this.judges_per_debate_preliminary != 0)
                writer.writeInt32(11, this.judges_per_debate_preliminary);
            if (this.judges_per_debate_elimination != 0)
                writer.writeInt32(12, this.judges_per_debate_elimination);
            if (this.tournament_fee != 0)
                writer.writeDouble(13, this.tournament_fee);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tournament {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tournament();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.start_date = reader.readString();
                        break;
                    case 4:
                        message.end_date = reader.readString();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        message.format_id = reader.readInt32();
                        break;
                    case 7:
                        message.league_id = reader.readInt32();
                        break;
                    case 8:
                        message.coordinator_id = reader.readInt32();
                        break;
                    case 9:
                        message.number_of_preliminary_rounds = reader.readInt32();
                        break;
                    case 10:
                        message.number_of_elimination_rounds = reader.readInt32();
                        break;
                    case 11:
                        message.judges_per_debate_preliminary = reader.readInt32();
                        break;
                    case 12:
                        message.judges_per_debate_elimination = reader.readInt32();
                        break;
                    case 13:
                        message.tournament_fee = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tournament {
            return Tournament.deserialize(bytes);
        }
    }
    export class CreateLeagueRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            name?: string;
            league_type?: LeagueType;
            token?: string;
        } & (({
            local_details?: LocalDetails;
            international_details?: never;
        } | {
            local_details?: never;
            international_details?: InternationalDetails;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("league_type" in data && data.league_type != undefined) {
                    this.league_type = data.league_type;
                }
                if ("local_details" in data && data.local_details != undefined) {
                    this.local_details = data.local_details;
                }
                if ("international_details" in data && data.international_details != undefined) {
                    this.international_details = data.international_details;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get league_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, LeagueType.local) as LeagueType;
        }
        set league_type(value: LeagueType) {
            pb_1.Message.setField(this, 2, value);
        }
        get local_details() {
            return pb_1.Message.getWrapperField(this, LocalDetails, 3) as LocalDetails;
        }
        set local_details(value: LocalDetails) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_local_details() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get international_details() {
            return pb_1.Message.getWrapperField(this, InternationalDetails, 4) as InternationalDetails;
        }
        set international_details(value: InternationalDetails) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_international_details() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get league_details() {
            const cases: {
                [index: number]: "none" | "local_details" | "international_details";
            } = {
                0: "none",
                3: "local_details",
                4: "international_details"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            name?: string;
            league_type?: LeagueType;
            local_details?: ReturnType<typeof LocalDetails.prototype.toObject>;
            international_details?: ReturnType<typeof InternationalDetails.prototype.toObject>;
            token?: string;
        }): CreateLeagueRequest {
            const message = new CreateLeagueRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.league_type != null) {
                message.league_type = data.league_type;
            }
            if (data.local_details != null) {
                message.local_details = LocalDetails.fromObject(data.local_details);
            }
            if (data.international_details != null) {
                message.international_details = InternationalDetails.fromObject(data.international_details);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                league_type?: LeagueType;
                local_details?: ReturnType<typeof LocalDetails.prototype.toObject>;
                international_details?: ReturnType<typeof InternationalDetails.prototype.toObject>;
                token?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.league_type != null) {
                data.league_type = this.league_type;
            }
            if (this.local_details != null) {
                data.local_details = this.local_details.toObject();
            }
            if (this.international_details != null) {
                data.international_details = this.international_details.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.league_type != LeagueType.local)
                writer.writeEnum(2, this.league_type);
            if (this.has_local_details)
                writer.writeMessage(3, this.local_details, () => this.local_details.serialize(writer));
            if (this.has_international_details)
                writer.writeMessage(4, this.international_details, () => this.international_details.serialize(writer));
            if (this.token.length)
                writer.writeString(5, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLeagueRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLeagueRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.league_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.local_details, () => message.local_details = LocalDetails.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.international_details, () => message.international_details = InternationalDetails.deserialize(reader));
                        break;
                    case 5:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLeagueRequest {
            return CreateLeagueRequest.deserialize(bytes);
        }
    }
    export class GetLeagueRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            league_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            league_id?: number;
            token?: string;
        }): GetLeagueRequest {
            const message = new GetLeagueRequest({});
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                league_id?: number;
                token?: string;
            } = {};
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.league_id != 0)
                writer.writeInt32(1, this.league_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLeagueRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLeagueRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.league_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLeagueRequest {
            return GetLeagueRequest.deserialize(bytes);
        }
    }
    export class ListLeaguesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: number;
            token?: string;
        }): ListLeaguesRequest {
            const message = new ListLeaguesRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: number;
                token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token != 0)
                writer.writeInt32(2, this.page_token);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListLeaguesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListLeaguesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readInt32();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListLeaguesRequest {
            return ListLeaguesRequest.deserialize(bytes);
        }
    }
    export class UpdateLeagueRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5]];
        constructor(data?: any[] | ({
            league_id?: number;
            name?: string;
            league_type?: LeagueType;
            token?: string;
        } & (({
            local_details?: LocalDetails;
            international_details?: never;
        } | {
            local_details?: never;
            international_details?: InternationalDetails;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("league_type" in data && data.league_type != undefined) {
                    this.league_type = data.league_type;
                }
                if ("local_details" in data && data.local_details != undefined) {
                    this.local_details = data.local_details;
                }
                if ("international_details" in data && data.international_details != undefined) {
                    this.international_details = data.international_details;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get league_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, LeagueType.local) as LeagueType;
        }
        set league_type(value: LeagueType) {
            pb_1.Message.setField(this, 3, value);
        }
        get local_details() {
            return pb_1.Message.getWrapperField(this, LocalDetails, 4) as LocalDetails;
        }
        set local_details(value: LocalDetails) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_local_details() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get international_details() {
            return pb_1.Message.getWrapperField(this, InternationalDetails, 5) as InternationalDetails;
        }
        set international_details(value: InternationalDetails) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_international_details() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get league_details() {
            const cases: {
                [index: number]: "none" | "local_details" | "international_details";
            } = {
                0: "none",
                4: "local_details",
                5: "international_details"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
        }
        static fromObject(data: {
            league_id?: number;
            name?: string;
            league_type?: LeagueType;
            local_details?: ReturnType<typeof LocalDetails.prototype.toObject>;
            international_details?: ReturnType<typeof InternationalDetails.prototype.toObject>;
            token?: string;
        }): UpdateLeagueRequest {
            const message = new UpdateLeagueRequest({});
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.league_type != null) {
                message.league_type = data.league_type;
            }
            if (data.local_details != null) {
                message.local_details = LocalDetails.fromObject(data.local_details);
            }
            if (data.international_details != null) {
                message.international_details = InternationalDetails.fromObject(data.international_details);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                league_id?: number;
                name?: string;
                league_type?: LeagueType;
                local_details?: ReturnType<typeof LocalDetails.prototype.toObject>;
                international_details?: ReturnType<typeof InternationalDetails.prototype.toObject>;
                token?: string;
            } = {};
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.league_type != null) {
                data.league_type = this.league_type;
            }
            if (this.local_details != null) {
                data.local_details = this.local_details.toObject();
            }
            if (this.international_details != null) {
                data.international_details = this.international_details.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.league_id != 0)
                writer.writeInt32(1, this.league_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.league_type != LeagueType.local)
                writer.writeEnum(3, this.league_type);
            if (this.has_local_details)
                writer.writeMessage(4, this.local_details, () => this.local_details.serialize(writer));
            if (this.has_international_details)
                writer.writeMessage(5, this.international_details, () => this.international_details.serialize(writer));
            if (this.token.length)
                writer.writeString(6, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateLeagueRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateLeagueRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.league_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.league_type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.local_details, () => message.local_details = LocalDetails.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.international_details, () => message.international_details = InternationalDetails.deserialize(reader));
                        break;
                    case 6:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateLeagueRequest {
            return UpdateLeagueRequest.deserialize(bytes);
        }
    }
    export class DeleteLeagueRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            league_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            league_id?: number;
            token?: string;
        }): DeleteLeagueRequest {
            const message = new DeleteLeagueRequest({});
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                league_id?: number;
                token?: string;
            } = {};
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.league_id != 0)
                writer.writeInt32(1, this.league_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteLeagueRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteLeagueRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.league_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteLeagueRequest {
            return DeleteLeagueRequest.deserialize(bytes);
        }
    }
    export class CreateTournamentFormatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format_name?: string;
            description?: string;
            speakers_per_team?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format_name" in data && data.format_name != undefined) {
                    this.format_name = data.format_name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("speakers_per_team" in data && data.speakers_per_team != undefined) {
                    this.speakers_per_team = data.speakers_per_team;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get format_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set format_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get speakers_per_team() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set speakers_per_team(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            format_name?: string;
            description?: string;
            speakers_per_team?: number;
            token?: string;
        }): CreateTournamentFormatRequest {
            const message = new CreateTournamentFormatRequest({});
            if (data.format_name != null) {
                message.format_name = data.format_name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.speakers_per_team != null) {
                message.speakers_per_team = data.speakers_per_team;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                format_name?: string;
                description?: string;
                speakers_per_team?: number;
                token?: string;
            } = {};
            if (this.format_name != null) {
                data.format_name = this.format_name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.speakers_per_team != null) {
                data.speakers_per_team = this.speakers_per_team;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format_name.length)
                writer.writeString(1, this.format_name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.speakers_per_team != 0)
                writer.writeInt32(3, this.speakers_per_team);
            if (this.token.length)
                writer.writeString(4, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTournamentFormatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTournamentFormatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format_name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.speakers_per_team = reader.readInt32();
                        break;
                    case 4:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTournamentFormatRequest {
            return CreateTournamentFormatRequest.deserialize(bytes);
        }
    }
    export class GetTournamentFormatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            format_id?: number;
            token?: string;
        }): GetTournamentFormatRequest {
            const message = new GetTournamentFormatRequest({});
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                format_id?: number;
                token?: string;
            } = {};
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format_id != 0)
                writer.writeInt32(1, this.format_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTournamentFormatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTournamentFormatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTournamentFormatRequest {
            return GetTournamentFormatRequest.deserialize(bytes);
        }
    }
    export class ListTournamentFormatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: number;
            token?: string;
        }): ListTournamentFormatsRequest {
            const message = new ListTournamentFormatsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: number;
                token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token != 0)
                writer.writeInt32(2, this.page_token);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTournamentFormatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTournamentFormatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readInt32();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTournamentFormatsRequest {
            return ListTournamentFormatsRequest.deserialize(bytes);
        }
    }
    export class UpdateTournamentFormatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format_id?: number;
            format_name?: string;
            description?: string;
            speakers_per_team?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("format_name" in data && data.format_name != undefined) {
                    this.format_name = data.format_name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("speakers_per_team" in data && data.speakers_per_team != undefined) {
                    this.speakers_per_team = data.speakers_per_team;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get format_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set format_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get speakers_per_team() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set speakers_per_team(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            format_id?: number;
            format_name?: string;
            description?: string;
            speakers_per_team?: number;
            token?: string;
        }): UpdateTournamentFormatRequest {
            const message = new UpdateTournamentFormatRequest({});
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.format_name != null) {
                message.format_name = data.format_name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.speakers_per_team != null) {
                message.speakers_per_team = data.speakers_per_team;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                format_id?: number;
                format_name?: string;
                description?: string;
                speakers_per_team?: number;
                token?: string;
            } = {};
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.format_name != null) {
                data.format_name = this.format_name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.speakers_per_team != null) {
                data.speakers_per_team = this.speakers_per_team;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format_id != 0)
                writer.writeInt32(1, this.format_id);
            if (this.format_name.length)
                writer.writeString(2, this.format_name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.speakers_per_team != 0)
                writer.writeInt32(4, this.speakers_per_team);
            if (this.token.length)
                writer.writeString(5, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTournamentFormatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTournamentFormatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format_id = reader.readInt32();
                        break;
                    case 2:
                        message.format_name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.speakers_per_team = reader.readInt32();
                        break;
                    case 5:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTournamentFormatRequest {
            return UpdateTournamentFormatRequest.deserialize(bytes);
        }
    }
    export class DeleteTournamentFormatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            format_id?: number;
            token?: string;
        }): DeleteTournamentFormatRequest {
            const message = new DeleteTournamentFormatRequest({});
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                format_id?: number;
                token?: string;
            } = {};
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.format_id != 0)
                writer.writeInt32(1, this.format_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTournamentFormatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTournamentFormatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.format_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTournamentFormatRequest {
            return DeleteTournamentFormatRequest.deserialize(bytes);
        }
    }
    export class CreateTournamentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            format_id?: number;
            league_id?: number;
            coordinator_id?: number;
            number_of_preliminary_rounds?: number;
            number_of_elimination_rounds?: number;
            judges_per_debate_preliminary?: number;
            judges_per_debate_elimination?: number;
            tournament_fee?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("coordinator_id" in data && data.coordinator_id != undefined) {
                    this.coordinator_id = data.coordinator_id;
                }
                if ("number_of_preliminary_rounds" in data && data.number_of_preliminary_rounds != undefined) {
                    this.number_of_preliminary_rounds = data.number_of_preliminary_rounds;
                }
                if ("number_of_elimination_rounds" in data && data.number_of_elimination_rounds != undefined) {
                    this.number_of_elimination_rounds = data.number_of_elimination_rounds;
                }
                if ("judges_per_debate_preliminary" in data && data.judges_per_debate_preliminary != undefined) {
                    this.judges_per_debate_preliminary = data.judges_per_debate_preliminary;
                }
                if ("judges_per_debate_elimination" in data && data.judges_per_debate_elimination != undefined) {
                    this.judges_per_debate_elimination = data.judges_per_debate_elimination;
                }
                if ("tournament_fee" in data && data.tournament_fee != undefined) {
                    this.tournament_fee = data.tournament_fee;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set end_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get coordinator_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set coordinator_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get number_of_preliminary_rounds() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set number_of_preliminary_rounds(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get number_of_elimination_rounds() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set number_of_elimination_rounds(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get judges_per_debate_preliminary() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set judges_per_debate_preliminary(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get judges_per_debate_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set judges_per_debate_elimination(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get tournament_fee() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set tournament_fee(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            name?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            format_id?: number;
            league_id?: number;
            coordinator_id?: number;
            number_of_preliminary_rounds?: number;
            number_of_elimination_rounds?: number;
            judges_per_debate_preliminary?: number;
            judges_per_debate_elimination?: number;
            tournament_fee?: number;
            token?: string;
        }): CreateTournamentRequest {
            const message = new CreateTournamentRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_date != null) {
                message.end_date = data.end_date;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.coordinator_id != null) {
                message.coordinator_id = data.coordinator_id;
            }
            if (data.number_of_preliminary_rounds != null) {
                message.number_of_preliminary_rounds = data.number_of_preliminary_rounds;
            }
            if (data.number_of_elimination_rounds != null) {
                message.number_of_elimination_rounds = data.number_of_elimination_rounds;
            }
            if (data.judges_per_debate_preliminary != null) {
                message.judges_per_debate_preliminary = data.judges_per_debate_preliminary;
            }
            if (data.judges_per_debate_elimination != null) {
                message.judges_per_debate_elimination = data.judges_per_debate_elimination;
            }
            if (data.tournament_fee != null) {
                message.tournament_fee = data.tournament_fee;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                start_date?: string;
                end_date?: string;
                location?: string;
                format_id?: number;
                league_id?: number;
                coordinator_id?: number;
                number_of_preliminary_rounds?: number;
                number_of_elimination_rounds?: number;
                judges_per_debate_preliminary?: number;
                judges_per_debate_elimination?: number;
                tournament_fee?: number;
                token?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_date != null) {
                data.end_date = this.end_date;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.coordinator_id != null) {
                data.coordinator_id = this.coordinator_id;
            }
            if (this.number_of_preliminary_rounds != null) {
                data.number_of_preliminary_rounds = this.number_of_preliminary_rounds;
            }
            if (this.number_of_elimination_rounds != null) {
                data.number_of_elimination_rounds = this.number_of_elimination_rounds;
            }
            if (this.judges_per_debate_preliminary != null) {
                data.judges_per_debate_preliminary = this.judges_per_debate_preliminary;
            }
            if (this.judges_per_debate_elimination != null) {
                data.judges_per_debate_elimination = this.judges_per_debate_elimination;
            }
            if (this.tournament_fee != null) {
                data.tournament_fee = this.tournament_fee;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.start_date.length)
                writer.writeString(2, this.start_date);
            if (this.end_date.length)
                writer.writeString(3, this.end_date);
            if (this.location.length)
                writer.writeString(4, this.location);
            if (this.format_id != 0)
                writer.writeInt32(5, this.format_id);
            if (this.league_id != 0)
                writer.writeInt32(6, this.league_id);
            if (this.coordinator_id != 0)
                writer.writeInt32(7, this.coordinator_id);
            if (this.number_of_preliminary_rounds != 0)
                writer.writeInt32(8, this.number_of_preliminary_rounds);
            if (this.number_of_elimination_rounds != 0)
                writer.writeInt32(9, this.number_of_elimination_rounds);
            if (this.judges_per_debate_preliminary != 0)
                writer.writeInt32(10, this.judges_per_debate_preliminary);
            if (this.judges_per_debate_elimination != 0)
                writer.writeInt32(11, this.judges_per_debate_elimination);
            if (this.tournament_fee != 0)
                writer.writeDouble(12, this.tournament_fee);
            if (this.token.length)
                writer.writeString(13, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTournamentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTournamentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.start_date = reader.readString();
                        break;
                    case 3:
                        message.end_date = reader.readString();
                        break;
                    case 4:
                        message.location = reader.readString();
                        break;
                    case 5:
                        message.format_id = reader.readInt32();
                        break;
                    case 6:
                        message.league_id = reader.readInt32();
                        break;
                    case 7:
                        message.coordinator_id = reader.readInt32();
                        break;
                    case 8:
                        message.number_of_preliminary_rounds = reader.readInt32();
                        break;
                    case 9:
                        message.number_of_elimination_rounds = reader.readInt32();
                        break;
                    case 10:
                        message.judges_per_debate_preliminary = reader.readInt32();
                        break;
                    case 11:
                        message.judges_per_debate_elimination = reader.readInt32();
                        break;
                    case 12:
                        message.tournament_fee = reader.readDouble();
                        break;
                    case 13:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTournamentRequest {
            return CreateTournamentRequest.deserialize(bytes);
        }
    }
    export class GetTournamentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            token?: string;
        }): GetTournamentRequest {
            const message = new GetTournamentRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTournamentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTournamentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTournamentRequest {
            return GetTournamentRequest.deserialize(bytes);
        }
    }
    export class ListTournamentsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: number;
            token?: string;
        }): ListTournamentsRequest {
            const message = new ListTournamentsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: number;
                token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token != 0)
                writer.writeInt32(2, this.page_token);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTournamentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTournamentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readInt32();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTournamentsRequest {
            return ListTournamentsRequest.deserialize(bytes);
        }
    }
    export class UpdateTournamentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            name?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            format_id?: number;
            league_id?: number;
            coordinator_id?: number;
            number_of_preliminary_rounds?: number;
            number_of_elimination_rounds?: number;
            judges_per_debate_preliminary?: number;
            judges_per_debate_elimination?: number;
            tournament_fee?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("format_id" in data && data.format_id != undefined) {
                    this.format_id = data.format_id;
                }
                if ("league_id" in data && data.league_id != undefined) {
                    this.league_id = data.league_id;
                }
                if ("coordinator_id" in data && data.coordinator_id != undefined) {
                    this.coordinator_id = data.coordinator_id;
                }
                if ("number_of_preliminary_rounds" in data && data.number_of_preliminary_rounds != undefined) {
                    this.number_of_preliminary_rounds = data.number_of_preliminary_rounds;
                }
                if ("number_of_elimination_rounds" in data && data.number_of_elimination_rounds != undefined) {
                    this.number_of_elimination_rounds = data.number_of_elimination_rounds;
                }
                if ("judges_per_debate_preliminary" in data && data.judges_per_debate_preliminary != undefined) {
                    this.judges_per_debate_preliminary = data.judges_per_debate_preliminary;
                }
                if ("judges_per_debate_elimination" in data && data.judges_per_debate_elimination != undefined) {
                    this.judges_per_debate_elimination = data.judges_per_debate_elimination;
                }
                if ("tournament_fee" in data && data.tournament_fee != undefined) {
                    this.tournament_fee = data.tournament_fee;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get end_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set end_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get format_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set format_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get league_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set league_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get coordinator_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set coordinator_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get number_of_preliminary_rounds() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set number_of_preliminary_rounds(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get number_of_elimination_rounds() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set number_of_elimination_rounds(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get judges_per_debate_preliminary() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set judges_per_debate_preliminary(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get judges_per_debate_elimination() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set judges_per_debate_elimination(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get tournament_fee() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set tournament_fee(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            name?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            format_id?: number;
            league_id?: number;
            coordinator_id?: number;
            number_of_preliminary_rounds?: number;
            number_of_elimination_rounds?: number;
            judges_per_debate_preliminary?: number;
            judges_per_debate_elimination?: number;
            tournament_fee?: number;
            token?: string;
        }): UpdateTournamentRequest {
            const message = new UpdateTournamentRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.start_date != null) {
                message.start_date = data.start_date;
            }
            if (data.end_date != null) {
                message.end_date = data.end_date;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.format_id != null) {
                message.format_id = data.format_id;
            }
            if (data.league_id != null) {
                message.league_id = data.league_id;
            }
            if (data.coordinator_id != null) {
                message.coordinator_id = data.coordinator_id;
            }
            if (data.number_of_preliminary_rounds != null) {
                message.number_of_preliminary_rounds = data.number_of_preliminary_rounds;
            }
            if (data.number_of_elimination_rounds != null) {
                message.number_of_elimination_rounds = data.number_of_elimination_rounds;
            }
            if (data.judges_per_debate_preliminary != null) {
                message.judges_per_debate_preliminary = data.judges_per_debate_preliminary;
            }
            if (data.judges_per_debate_elimination != null) {
                message.judges_per_debate_elimination = data.judges_per_debate_elimination;
            }
            if (data.tournament_fee != null) {
                message.tournament_fee = data.tournament_fee;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                name?: string;
                start_date?: string;
                end_date?: string;
                location?: string;
                format_id?: number;
                league_id?: number;
                coordinator_id?: number;
                number_of_preliminary_rounds?: number;
                number_of_elimination_rounds?: number;
                judges_per_debate_preliminary?: number;
                judges_per_debate_elimination?: number;
                tournament_fee?: number;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date;
            }
            if (this.end_date != null) {
                data.end_date = this.end_date;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.format_id != null) {
                data.format_id = this.format_id;
            }
            if (this.league_id != null) {
                data.league_id = this.league_id;
            }
            if (this.coordinator_id != null) {
                data.coordinator_id = this.coordinator_id;
            }
            if (this.number_of_preliminary_rounds != null) {
                data.number_of_preliminary_rounds = this.number_of_preliminary_rounds;
            }
            if (this.number_of_elimination_rounds != null) {
                data.number_of_elimination_rounds = this.number_of_elimination_rounds;
            }
            if (this.judges_per_debate_preliminary != null) {
                data.judges_per_debate_preliminary = this.judges_per_debate_preliminary;
            }
            if (this.judges_per_debate_elimination != null) {
                data.judges_per_debate_elimination = this.judges_per_debate_elimination;
            }
            if (this.tournament_fee != null) {
                data.tournament_fee = this.tournament_fee;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.start_date.length)
                writer.writeString(3, this.start_date);
            if (this.end_date.length)
                writer.writeString(4, this.end_date);
            if (this.location.length)
                writer.writeString(5, this.location);
            if (this.format_id != 0)
                writer.writeInt32(6, this.format_id);
            if (this.league_id != 0)
                writer.writeInt32(7, this.league_id);
            if (this.coordinator_id != 0)
                writer.writeInt32(8, this.coordinator_id);
            if (this.number_of_preliminary_rounds != 0)
                writer.writeInt32(9, this.number_of_preliminary_rounds);
            if (this.number_of_elimination_rounds != 0)
                writer.writeInt32(10, this.number_of_elimination_rounds);
            if (this.judges_per_debate_preliminary != 0)
                writer.writeInt32(11, this.judges_per_debate_preliminary);
            if (this.judges_per_debate_elimination != 0)
                writer.writeInt32(12, this.judges_per_debate_elimination);
            if (this.tournament_fee != 0)
                writer.writeDouble(13, this.tournament_fee);
            if (this.token.length)
                writer.writeString(14, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTournamentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTournamentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.start_date = reader.readString();
                        break;
                    case 4:
                        message.end_date = reader.readString();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        message.format_id = reader.readInt32();
                        break;
                    case 7:
                        message.league_id = reader.readInt32();
                        break;
                    case 8:
                        message.coordinator_id = reader.readInt32();
                        break;
                    case 9:
                        message.number_of_preliminary_rounds = reader.readInt32();
                        break;
                    case 10:
                        message.number_of_elimination_rounds = reader.readInt32();
                        break;
                    case 11:
                        message.judges_per_debate_preliminary = reader.readInt32();
                        break;
                    case 12:
                        message.judges_per_debate_elimination = reader.readInt32();
                        break;
                    case 13:
                        message.tournament_fee = reader.readDouble();
                        break;
                    case 14:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTournamentRequest {
            return UpdateTournamentRequest.deserialize(bytes);
        }
    }
    export class DeleteTournamentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournament_id?: number;
            token?: string;
        }): DeleteTournamentRequest {
            const message = new DeleteTournamentRequest({});
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament_id?: number;
                token?: string;
            } = {};
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournament_id != 0)
                writer.writeInt32(1, this.tournament_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTournamentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTournamentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTournamentRequest {
            return DeleteTournamentRequest.deserialize(bytes);
        }
    }
    export class CreateLeagueResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            league?: League;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
            }
        }
        get league() {
            return pb_1.Message.getWrapperField(this, League, 1) as League;
        }
        set league(value: League) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            league?: ReturnType<typeof League.prototype.toObject>;
        }): CreateLeagueResponse {
            const message = new CreateLeagueResponse({});
            if (data.league != null) {
                message.league = League.fromObject(data.league);
            }
            return message;
        }
        toObject() {
            const data: {
                league?: ReturnType<typeof League.prototype.toObject>;
            } = {};
            if (this.league != null) {
                data.league = this.league.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_league)
                writer.writeMessage(1, this.league, () => this.league.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLeagueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLeagueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.league, () => message.league = League.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLeagueResponse {
            return CreateLeagueResponse.deserialize(bytes);
        }
    }
    export class GetLeagueResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            league?: League;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
            }
        }
        get league() {
            return pb_1.Message.getWrapperField(this, League, 1) as League;
        }
        set league(value: League) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            league?: ReturnType<typeof League.prototype.toObject>;
        }): GetLeagueResponse {
            const message = new GetLeagueResponse({});
            if (data.league != null) {
                message.league = League.fromObject(data.league);
            }
            return message;
        }
        toObject() {
            const data: {
                league?: ReturnType<typeof League.prototype.toObject>;
            } = {};
            if (this.league != null) {
                data.league = this.league.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_league)
                writer.writeMessage(1, this.league, () => this.league.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLeagueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLeagueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.league, () => message.league = League.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLeagueResponse {
            return GetLeagueResponse.deserialize(bytes);
        }
    }
    export class ListLeaguesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            leagues?: League[];
            next_page_token?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("leagues" in data && data.leagues != undefined) {
                    this.leagues = data.leagues;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get leagues() {
            return pb_1.Message.getRepeatedWrapperField(this, League, 1) as League[];
        }
        set leagues(value: League[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set next_page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            leagues?: ReturnType<typeof League.prototype.toObject>[];
            next_page_token?: number;
        }): ListLeaguesResponse {
            const message = new ListLeaguesResponse({});
            if (data.leagues != null) {
                message.leagues = data.leagues.map(item => League.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                leagues?: ReturnType<typeof League.prototype.toObject>[];
                next_page_token?: number;
            } = {};
            if (this.leagues != null) {
                data.leagues = this.leagues.map((item: League) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.leagues.length)
                writer.writeRepeatedMessage(1, this.leagues, (item: League) => item.serialize(writer));
            if (this.next_page_token != 0)
                writer.writeInt32(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListLeaguesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListLeaguesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.leagues, () => pb_1.Message.addToRepeatedWrapperField(message, 1, League.deserialize(reader), League));
                        break;
                    case 2:
                        message.next_page_token = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListLeaguesResponse {
            return ListLeaguesResponse.deserialize(bytes);
        }
    }
    export class UpdateLeagueResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            league?: League;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
            }
        }
        get league() {
            return pb_1.Message.getWrapperField(this, League, 1) as League;
        }
        set league(value: League) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            league?: ReturnType<typeof League.prototype.toObject>;
        }): UpdateLeagueResponse {
            const message = new UpdateLeagueResponse({});
            if (data.league != null) {
                message.league = League.fromObject(data.league);
            }
            return message;
        }
        toObject() {
            const data: {
                league?: ReturnType<typeof League.prototype.toObject>;
            } = {};
            if (this.league != null) {
                data.league = this.league.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_league)
                writer.writeMessage(1, this.league, () => this.league.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateLeagueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateLeagueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.league, () => message.league = League.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateLeagueResponse {
            return UpdateLeagueResponse.deserialize(bytes);
        }
    }
    export class DeleteLeagueResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteLeagueResponse {
            const message = new DeleteLeagueResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteLeagueResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteLeagueResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteLeagueResponse {
            return DeleteLeagueResponse.deserialize(bytes);
        }
    }
    export class CreateTournamentFormatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format?: TournamentFormat;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
            }
        }
        get format() {
            return pb_1.Message.getWrapperField(this, TournamentFormat, 1) as TournamentFormat;
        }
        set format(value: TournamentFormat) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_format() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            format?: ReturnType<typeof TournamentFormat.prototype.toObject>;
        }): CreateTournamentFormatResponse {
            const message = new CreateTournamentFormatResponse({});
            if (data.format != null) {
                message.format = TournamentFormat.fromObject(data.format);
            }
            return message;
        }
        toObject() {
            const data: {
                format?: ReturnType<typeof TournamentFormat.prototype.toObject>;
            } = {};
            if (this.format != null) {
                data.format = this.format.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_format)
                writer.writeMessage(1, this.format, () => this.format.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTournamentFormatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTournamentFormatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.format, () => message.format = TournamentFormat.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTournamentFormatResponse {
            return CreateTournamentFormatResponse.deserialize(bytes);
        }
    }
    export class GetTournamentFormatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format?: TournamentFormat;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
            }
        }
        get format() {
            return pb_1.Message.getWrapperField(this, TournamentFormat, 1) as TournamentFormat;
        }
        set format(value: TournamentFormat) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_format() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            format?: ReturnType<typeof TournamentFormat.prototype.toObject>;
        }): GetTournamentFormatResponse {
            const message = new GetTournamentFormatResponse({});
            if (data.format != null) {
                message.format = TournamentFormat.fromObject(data.format);
            }
            return message;
        }
        toObject() {
            const data: {
                format?: ReturnType<typeof TournamentFormat.prototype.toObject>;
            } = {};
            if (this.format != null) {
                data.format = this.format.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_format)
                writer.writeMessage(1, this.format, () => this.format.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTournamentFormatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTournamentFormatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.format, () => message.format = TournamentFormat.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTournamentFormatResponse {
            return GetTournamentFormatResponse.deserialize(bytes);
        }
    }
    export class ListTournamentFormatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            formats?: TournamentFormat[];
            next_page_token?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("formats" in data && data.formats != undefined) {
                    this.formats = data.formats;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get formats() {
            return pb_1.Message.getRepeatedWrapperField(this, TournamentFormat, 1) as TournamentFormat[];
        }
        set formats(value: TournamentFormat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set next_page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            formats?: ReturnType<typeof TournamentFormat.prototype.toObject>[];
            next_page_token?: number;
        }): ListTournamentFormatsResponse {
            const message = new ListTournamentFormatsResponse({});
            if (data.formats != null) {
                message.formats = data.formats.map(item => TournamentFormat.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                formats?: ReturnType<typeof TournamentFormat.prototype.toObject>[];
                next_page_token?: number;
            } = {};
            if (this.formats != null) {
                data.formats = this.formats.map((item: TournamentFormat) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.formats.length)
                writer.writeRepeatedMessage(1, this.formats, (item: TournamentFormat) => item.serialize(writer));
            if (this.next_page_token != 0)
                writer.writeInt32(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTournamentFormatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTournamentFormatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.formats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TournamentFormat.deserialize(reader), TournamentFormat));
                        break;
                    case 2:
                        message.next_page_token = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTournamentFormatsResponse {
            return ListTournamentFormatsResponse.deserialize(bytes);
        }
    }
    export class UpdateTournamentFormatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            format?: TournamentFormat;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
            }
        }
        get format() {
            return pb_1.Message.getWrapperField(this, TournamentFormat, 1) as TournamentFormat;
        }
        set format(value: TournamentFormat) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_format() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            format?: ReturnType<typeof TournamentFormat.prototype.toObject>;
        }): UpdateTournamentFormatResponse {
            const message = new UpdateTournamentFormatResponse({});
            if (data.format != null) {
                message.format = TournamentFormat.fromObject(data.format);
            }
            return message;
        }
        toObject() {
            const data: {
                format?: ReturnType<typeof TournamentFormat.prototype.toObject>;
            } = {};
            if (this.format != null) {
                data.format = this.format.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_format)
                writer.writeMessage(1, this.format, () => this.format.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTournamentFormatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTournamentFormatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.format, () => message.format = TournamentFormat.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTournamentFormatResponse {
            return UpdateTournamentFormatResponse.deserialize(bytes);
        }
    }
    export class DeleteTournamentFormatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteTournamentFormatResponse {
            const message = new DeleteTournamentFormatResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTournamentFormatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTournamentFormatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTournamentFormatResponse {
            return DeleteTournamentFormatResponse.deserialize(bytes);
        }
    }
    export class CreateTournamentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament?: Tournament;
            invitation_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament" in data && data.tournament != undefined) {
                    this.tournament = data.tournament;
                }
                if ("invitation_ids" in data && data.invitation_ids != undefined) {
                    this.invitation_ids = data.invitation_ids;
                }
            }
        }
        get tournament() {
            return pb_1.Message.getWrapperField(this, Tournament, 1) as Tournament;
        }
        set tournament(value: Tournament) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tournament() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get invitation_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set invitation_ids(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournament?: ReturnType<typeof Tournament.prototype.toObject>;
            invitation_ids?: number[];
        }): CreateTournamentResponse {
            const message = new CreateTournamentResponse({});
            if (data.tournament != null) {
                message.tournament = Tournament.fromObject(data.tournament);
            }
            if (data.invitation_ids != null) {
                message.invitation_ids = data.invitation_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                tournament?: ReturnType<typeof Tournament.prototype.toObject>;
                invitation_ids?: number[];
            } = {};
            if (this.tournament != null) {
                data.tournament = this.tournament.toObject();
            }
            if (this.invitation_ids != null) {
                data.invitation_ids = this.invitation_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tournament)
                writer.writeMessage(1, this.tournament, () => this.tournament.serialize(writer));
            if (this.invitation_ids.length)
                writer.writePackedInt32(2, this.invitation_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTournamentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTournamentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tournament, () => message.tournament = Tournament.deserialize(reader));
                        break;
                    case 2:
                        message.invitation_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTournamentResponse {
            return CreateTournamentResponse.deserialize(bytes);
        }
    }
    export class GetTournamentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament?: Tournament;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament" in data && data.tournament != undefined) {
                    this.tournament = data.tournament;
                }
            }
        }
        get tournament() {
            return pb_1.Message.getWrapperField(this, Tournament, 1) as Tournament;
        }
        set tournament(value: Tournament) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tournament() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            tournament?: ReturnType<typeof Tournament.prototype.toObject>;
        }): GetTournamentResponse {
            const message = new GetTournamentResponse({});
            if (data.tournament != null) {
                message.tournament = Tournament.fromObject(data.tournament);
            }
            return message;
        }
        toObject() {
            const data: {
                tournament?: ReturnType<typeof Tournament.prototype.toObject>;
            } = {};
            if (this.tournament != null) {
                data.tournament = this.tournament.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tournament)
                writer.writeMessage(1, this.tournament, () => this.tournament.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTournamentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTournamentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tournament, () => message.tournament = Tournament.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTournamentResponse {
            return GetTournamentResponse.deserialize(bytes);
        }
    }
    export class ListTournamentsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournaments?: Tournament[];
            next_page_token?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournaments" in data && data.tournaments != undefined) {
                    this.tournaments = data.tournaments;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get tournaments() {
            return pb_1.Message.getRepeatedWrapperField(this, Tournament, 1) as Tournament[];
        }
        set tournaments(value: Tournament[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set next_page_token(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tournaments?: ReturnType<typeof Tournament.prototype.toObject>[];
            next_page_token?: number;
        }): ListTournamentsResponse {
            const message = new ListTournamentsResponse({});
            if (data.tournaments != null) {
                message.tournaments = data.tournaments.map(item => Tournament.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                tournaments?: ReturnType<typeof Tournament.prototype.toObject>[];
                next_page_token?: number;
            } = {};
            if (this.tournaments != null) {
                data.tournaments = this.tournaments.map((item: Tournament) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tournaments.length)
                writer.writeRepeatedMessage(1, this.tournaments, (item: Tournament) => item.serialize(writer));
            if (this.next_page_token != 0)
                writer.writeInt32(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTournamentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTournamentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tournaments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Tournament.deserialize(reader), Tournament));
                        break;
                    case 2:
                        message.next_page_token = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTournamentsResponse {
            return ListTournamentsResponse.deserialize(bytes);
        }
    }
    export class UpdateTournamentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tournament?: Tournament;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tournament" in data && data.tournament != undefined) {
                    this.tournament = data.tournament;
                }
            }
        }
        get tournament() {
            return pb_1.Message.getWrapperField(this, Tournament, 1) as Tournament;
        }
        set tournament(value: Tournament) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tournament() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            tournament?: ReturnType<typeof Tournament.prototype.toObject>;
        }): UpdateTournamentResponse {
            const message = new UpdateTournamentResponse({});
            if (data.tournament != null) {
                message.tournament = Tournament.fromObject(data.tournament);
            }
            return message;
        }
        toObject() {
            const data: {
                tournament?: ReturnType<typeof Tournament.prototype.toObject>;
            } = {};
            if (this.tournament != null) {
                data.tournament = this.tournament.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tournament)
                writer.writeMessage(1, this.tournament, () => this.tournament.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTournamentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTournamentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tournament, () => message.tournament = Tournament.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTournamentResponse {
            return UpdateTournamentResponse.deserialize(bytes);
        }
    }
    export class DeleteTournamentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteTournamentResponse {
            const message = new DeleteTournamentResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTournamentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTournamentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTournamentResponse {
            return DeleteTournamentResponse.deserialize(bytes);
        }
    }
    export class AcceptInvitationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_id" in data && data.invitation_id != undefined) {
                    this.invitation_id = data.invitation_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invitation_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_id?: number;
            token?: string;
        }): AcceptInvitationRequest {
            const message = new AcceptInvitationRequest({});
            if (data.invitation_id != null) {
                message.invitation_id = data.invitation_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_id?: number;
                token?: string;
            } = {};
            if (this.invitation_id != null) {
                data.invitation_id = this.invitation_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_id != 0)
                writer.writeInt32(1, this.invitation_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcceptInvitationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcceptInvitationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcceptInvitationRequest {
            return AcceptInvitationRequest.deserialize(bytes);
        }
    }
    export class AcceptInvitationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): AcceptInvitationResponse {
            const message = new AcceptInvitationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcceptInvitationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcceptInvitationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcceptInvitationResponse {
            return AcceptInvitationResponse.deserialize(bytes);
        }
    }
    export class DeclineInvitationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_id" in data && data.invitation_id != undefined) {
                    this.invitation_id = data.invitation_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invitation_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_id?: number;
            token?: string;
        }): DeclineInvitationRequest {
            const message = new DeclineInvitationRequest({});
            if (data.invitation_id != null) {
                message.invitation_id = data.invitation_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_id?: number;
                token?: string;
            } = {};
            if (this.invitation_id != null) {
                data.invitation_id = this.invitation_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_id != 0)
                writer.writeInt32(1, this.invitation_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeclineInvitationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeclineInvitationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeclineInvitationRequest {
            return DeclineInvitationRequest.deserialize(bytes);
        }
    }
    export class DeclineInvitationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeclineInvitationResponse {
            const message = new DeclineInvitationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeclineInvitationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeclineInvitationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeclineInvitationResponse {
            return DeclineInvitationResponse.deserialize(bytes);
        }
    }
    export class GetInvitationStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_id" in data && data.invitation_id != undefined) {
                    this.invitation_id = data.invitation_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invitation_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_id?: number;
            token?: string;
        }): GetInvitationStatusRequest {
            const message = new GetInvitationStatusRequest({});
            if (data.invitation_id != null) {
                message.invitation_id = data.invitation_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_id?: number;
                token?: string;
            } = {};
            if (this.invitation_id != null) {
                data.invitation_id = this.invitation_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_id != 0)
                writer.writeInt32(1, this.invitation_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInvitationStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInvitationStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInvitationStatusRequest {
            return GetInvitationStatusRequest.deserialize(bytes);
        }
    }
    export class GetInvitationStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): GetInvitationStatusResponse {
            const message = new GetInvitationStatusResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInvitationStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInvitationStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInvitationStatusResponse {
            return GetInvitationStatusResponse.deserialize(bytes);
        }
    }
    export class ResendInvitationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_id?: number;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_id" in data && data.invitation_id != undefined) {
                    this.invitation_id = data.invitation_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invitation_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_id?: number;
            token?: string;
        }): ResendInvitationRequest {
            const message = new ResendInvitationRequest({});
            if (data.invitation_id != null) {
                message.invitation_id = data.invitation_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_id?: number;
                token?: string;
            } = {};
            if (this.invitation_id != null) {
                data.invitation_id = this.invitation_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_id != 0)
                writer.writeInt32(1, this.invitation_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResendInvitationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResendInvitationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_id = reader.readInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResendInvitationRequest {
            return ResendInvitationRequest.deserialize(bytes);
        }
    }
    export class ResendInvitationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): ResendInvitationResponse {
            const message = new ResendInvitationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResendInvitationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResendInvitationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResendInvitationResponse {
            return ResendInvitationResponse.deserialize(bytes);
        }
    }
    export class BulkResendInvitationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_ids?: number[];
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_ids" in data && data.invitation_ids != undefined) {
                    this.invitation_ids = data.invitation_ids;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set invitation_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_ids?: number[];
            token?: string;
        }): BulkResendInvitationsRequest {
            const message = new BulkResendInvitationsRequest({});
            if (data.invitation_ids != null) {
                message.invitation_ids = data.invitation_ids;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_ids?: number[];
                token?: string;
            } = {};
            if (this.invitation_ids != null) {
                data.invitation_ids = this.invitation_ids;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_ids.length)
                writer.writePackedInt32(1, this.invitation_ids);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkResendInvitationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkResendInvitationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_ids = reader.readPackedInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkResendInvitationsRequest {
            return BulkResendInvitationsRequest.deserialize(bytes);
        }
    }
    export class BulkResendInvitationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): BulkResendInvitationsResponse {
            const message = new BulkResendInvitationsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkResendInvitationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkResendInvitationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkResendInvitationsResponse {
            return BulkResendInvitationsResponse.deserialize(bytes);
        }
    }
    export class GetInvitationsByUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetInvitationsByUserRequest {
            const message = new GetInvitationsByUserRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInvitationsByUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInvitationsByUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInvitationsByUserRequest {
            return GetInvitationsByUserRequest.deserialize(bytes);
        }
    }
    export class Invitation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_id?: number;
            tournament_id?: number;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_id" in data && data.invitation_id != undefined) {
                    this.invitation_id = data.invitation_id;
                }
                if ("tournament_id" in data && data.tournament_id != undefined) {
                    this.tournament_id = data.tournament_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get invitation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invitation_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tournament_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tournament_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            invitation_id?: number;
            tournament_id?: number;
            status?: string;
        }): Invitation {
            const message = new Invitation({});
            if (data.invitation_id != null) {
                message.invitation_id = data.invitation_id;
            }
            if (data.tournament_id != null) {
                message.tournament_id = data.tournament_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_id?: number;
                tournament_id?: number;
                status?: string;
            } = {};
            if (this.invitation_id != null) {
                data.invitation_id = this.invitation_id;
            }
            if (this.tournament_id != null) {
                data.tournament_id = this.tournament_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_id != 0)
                writer.writeInt32(1, this.invitation_id);
            if (this.tournament_id != 0)
                writer.writeInt32(2, this.tournament_id);
            if (this.status.length)
                writer.writeString(3, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Invitation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Invitation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_id = reader.readInt32();
                        break;
                    case 2:
                        message.tournament_id = reader.readInt32();
                        break;
                    case 3:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Invitation {
            return Invitation.deserialize(bytes);
        }
    }
    export class GetInvitationsByUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitations?: Invitation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitations" in data && data.invitations != undefined) {
                    this.invitations = data.invitations;
                }
            }
        }
        get invitations() {
            return pb_1.Message.getRepeatedWrapperField(this, Invitation, 1) as Invitation[];
        }
        set invitations(value: Invitation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            invitations?: ReturnType<typeof Invitation.prototype.toObject>[];
        }): GetInvitationsByUserResponse {
            const message = new GetInvitationsByUserResponse({});
            if (data.invitations != null) {
                message.invitations = data.invitations.map(item => Invitation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                invitations?: ReturnType<typeof Invitation.prototype.toObject>[];
            } = {};
            if (this.invitations != null) {
                data.invitations = this.invitations.map((item: Invitation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitations.length)
                writer.writeRepeatedMessage(1, this.invitations, (item: Invitation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInvitationsByUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInvitationsByUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.invitations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Invitation.deserialize(reader), Invitation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInvitationsByUserResponse {
            return GetInvitationsByUserResponse.deserialize(bytes);
        }
    }
    export class BulkAcceptInvitationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_ids?: number[];
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_ids" in data && data.invitation_ids != undefined) {
                    this.invitation_ids = data.invitation_ids;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set invitation_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_ids?: number[];
            token?: string;
        }): BulkAcceptInvitationsRequest {
            const message = new BulkAcceptInvitationsRequest({});
            if (data.invitation_ids != null) {
                message.invitation_ids = data.invitation_ids;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_ids?: number[];
                token?: string;
            } = {};
            if (this.invitation_ids != null) {
                data.invitation_ids = this.invitation_ids;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_ids.length)
                writer.writePackedInt32(1, this.invitation_ids);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkAcceptInvitationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkAcceptInvitationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_ids = reader.readPackedInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkAcceptInvitationsRequest {
            return BulkAcceptInvitationsRequest.deserialize(bytes);
        }
    }
    export class BulkAcceptInvitationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): BulkAcceptInvitationsResponse {
            const message = new BulkAcceptInvitationsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkAcceptInvitationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkAcceptInvitationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkAcceptInvitationsResponse {
            return BulkAcceptInvitationsResponse.deserialize(bytes);
        }
    }
    export class BulkDeclineInvitationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitation_ids?: number[];
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitation_ids" in data && data.invitation_ids != undefined) {
                    this.invitation_ids = data.invitation_ids;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get invitation_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set invitation_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invitation_ids?: number[];
            token?: string;
        }): BulkDeclineInvitationsRequest {
            const message = new BulkDeclineInvitationsRequest({});
            if (data.invitation_ids != null) {
                message.invitation_ids = data.invitation_ids;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                invitation_ids?: number[];
                token?: string;
            } = {};
            if (this.invitation_ids != null) {
                data.invitation_ids = this.invitation_ids;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitation_ids.length)
                writer.writePackedInt32(1, this.invitation_ids);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkDeclineInvitationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkDeclineInvitationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invitation_ids = reader.readPackedInt32();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkDeclineInvitationsRequest {
            return BulkDeclineInvitationsRequest.deserialize(bytes);
        }
    }
    export class BulkDeclineInvitationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): BulkDeclineInvitationsResponse {
            const message = new BulkDeclineInvitationsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkDeclineInvitationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkDeclineInvitationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkDeclineInvitationsResponse {
            return BulkDeclineInvitationsResponse.deserialize(bytes);
        }
    }
    export class GetAllInvitationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetAllInvitationsRequest {
            const message = new GetAllInvitationsRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllInvitationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllInvitationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllInvitationsRequest {
            return GetAllInvitationsRequest.deserialize(bytes);
        }
    }
    export class GetAllInvitationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invitations?: Invitation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invitations" in data && data.invitations != undefined) {
                    this.invitations = data.invitations;
                }
            }
        }
        get invitations() {
            return pb_1.Message.getRepeatedWrapperField(this, Invitation, 1) as Invitation[];
        }
        set invitations(value: Invitation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            invitations?: ReturnType<typeof Invitation.prototype.toObject>[];
        }): GetAllInvitationsResponse {
            const message = new GetAllInvitationsResponse({});
            if (data.invitations != null) {
                message.invitations = data.invitations.map(item => Invitation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                invitations?: ReturnType<typeof Invitation.prototype.toObject>[];
            } = {};
            if (this.invitations != null) {
                data.invitations = this.invitations.map((item: Invitation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invitations.length)
                writer.writeRepeatedMessage(1, this.invitations, (item: Invitation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllInvitationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllInvitationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.invitations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Invitation.deserialize(reader), Invitation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllInvitationsResponse {
            return GetAllInvitationsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTournamentServiceService {
        static definition = {
            CreateLeague: {
                path: "/tournament_management.TournamentService/CreateLeague",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateLeagueRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateLeagueRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateLeagueResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateLeagueResponse.deserialize(new Uint8Array(bytes))
            },
            GetLeague: {
                path: "/tournament_management.TournamentService/GetLeague",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLeagueRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLeagueRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetLeagueResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetLeagueResponse.deserialize(new Uint8Array(bytes))
            },
            ListLeagues: {
                path: "/tournament_management.TournamentService/ListLeagues",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListLeaguesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListLeaguesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListLeaguesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListLeaguesResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateLeague: {
                path: "/tournament_management.TournamentService/UpdateLeague",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateLeagueRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateLeagueRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateLeagueResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateLeagueResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteLeague: {
                path: "/tournament_management.TournamentService/DeleteLeague",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteLeagueRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteLeagueRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteLeagueResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteLeagueResponse.deserialize(new Uint8Array(bytes))
            },
            CreateTournamentFormat: {
                path: "/tournament_management.TournamentService/CreateTournamentFormat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTournamentFormatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTournamentFormatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateTournamentFormatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateTournamentFormatResponse.deserialize(new Uint8Array(bytes))
            },
            GetTournamentFormat: {
                path: "/tournament_management.TournamentService/GetTournamentFormat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTournamentFormatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTournamentFormatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTournamentFormatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTournamentFormatResponse.deserialize(new Uint8Array(bytes))
            },
            ListTournamentFormats: {
                path: "/tournament_management.TournamentService/ListTournamentFormats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListTournamentFormatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListTournamentFormatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListTournamentFormatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListTournamentFormatsResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateTournamentFormat: {
                path: "/tournament_management.TournamentService/UpdateTournamentFormat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTournamentFormatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTournamentFormatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateTournamentFormatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateTournamentFormatResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteTournamentFormat: {
                path: "/tournament_management.TournamentService/DeleteTournamentFormat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTournamentFormatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTournamentFormatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTournamentFormatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTournamentFormatResponse.deserialize(new Uint8Array(bytes))
            },
            CreateTournament: {
                path: "/tournament_management.TournamentService/CreateTournament",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTournamentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTournamentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateTournamentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateTournamentResponse.deserialize(new Uint8Array(bytes))
            },
            GetTournament: {
                path: "/tournament_management.TournamentService/GetTournament",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTournamentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTournamentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTournamentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTournamentResponse.deserialize(new Uint8Array(bytes))
            },
            ListTournaments: {
                path: "/tournament_management.TournamentService/ListTournaments",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListTournamentsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListTournamentsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListTournamentsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListTournamentsResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateTournament: {
                path: "/tournament_management.TournamentService/UpdateTournament",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTournamentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTournamentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateTournamentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateTournamentResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteTournament: {
                path: "/tournament_management.TournamentService/DeleteTournament",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTournamentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTournamentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTournamentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTournamentResponse.deserialize(new Uint8Array(bytes))
            },
            AcceptInvitation: {
                path: "/tournament_management.TournamentService/AcceptInvitation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AcceptInvitationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AcceptInvitationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AcceptInvitationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AcceptInvitationResponse.deserialize(new Uint8Array(bytes))
            },
            DeclineInvitation: {
                path: "/tournament_management.TournamentService/DeclineInvitation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeclineInvitationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeclineInvitationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeclineInvitationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeclineInvitationResponse.deserialize(new Uint8Array(bytes))
            },
            GetInvitationStatus: {
                path: "/tournament_management.TournamentService/GetInvitationStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInvitationStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInvitationStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInvitationStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInvitationStatusResponse.deserialize(new Uint8Array(bytes))
            },
            ResendInvitation: {
                path: "/tournament_management.TournamentService/ResendInvitation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResendInvitationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResendInvitationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResendInvitationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResendInvitationResponse.deserialize(new Uint8Array(bytes))
            },
            GetInvitationsByUser: {
                path: "/tournament_management.TournamentService/GetInvitationsByUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInvitationsByUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInvitationsByUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInvitationsByUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInvitationsByUserResponse.deserialize(new Uint8Array(bytes))
            },
            BulkAcceptInvitations: {
                path: "/tournament_management.TournamentService/BulkAcceptInvitations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BulkAcceptInvitationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BulkAcceptInvitationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BulkAcceptInvitationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BulkAcceptInvitationsResponse.deserialize(new Uint8Array(bytes))
            },
            BulkDeclineInvitations: {
                path: "/tournament_management.TournamentService/BulkDeclineInvitations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BulkDeclineInvitationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BulkDeclineInvitationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BulkDeclineInvitationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BulkDeclineInvitationsResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllInvitations: {
                path: "/tournament_management.TournamentService/GetAllInvitations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllInvitationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllInvitationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllInvitationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllInvitationsResponse.deserialize(new Uint8Array(bytes))
            },
            BulkResendInvitations: {
                path: "/tournament_management.TournamentService/BulkResendInvitations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BulkResendInvitationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BulkResendInvitationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BulkResendInvitationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BulkResendInvitationsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateLeague(call: grpc_1.ServerUnaryCall<CreateLeagueRequest, CreateLeagueResponse>, callback: grpc_1.sendUnaryData<CreateLeagueResponse>): void;
        abstract GetLeague(call: grpc_1.ServerUnaryCall<GetLeagueRequest, GetLeagueResponse>, callback: grpc_1.sendUnaryData<GetLeagueResponse>): void;
        abstract ListLeagues(call: grpc_1.ServerUnaryCall<ListLeaguesRequest, ListLeaguesResponse>, callback: grpc_1.sendUnaryData<ListLeaguesResponse>): void;
        abstract UpdateLeague(call: grpc_1.ServerUnaryCall<UpdateLeagueRequest, UpdateLeagueResponse>, callback: grpc_1.sendUnaryData<UpdateLeagueResponse>): void;
        abstract DeleteLeague(call: grpc_1.ServerUnaryCall<DeleteLeagueRequest, DeleteLeagueResponse>, callback: grpc_1.sendUnaryData<DeleteLeagueResponse>): void;
        abstract CreateTournamentFormat(call: grpc_1.ServerUnaryCall<CreateTournamentFormatRequest, CreateTournamentFormatResponse>, callback: grpc_1.sendUnaryData<CreateTournamentFormatResponse>): void;
        abstract GetTournamentFormat(call: grpc_1.ServerUnaryCall<GetTournamentFormatRequest, GetTournamentFormatResponse>, callback: grpc_1.sendUnaryData<GetTournamentFormatResponse>): void;
        abstract ListTournamentFormats(call: grpc_1.ServerUnaryCall<ListTournamentFormatsRequest, ListTournamentFormatsResponse>, callback: grpc_1.sendUnaryData<ListTournamentFormatsResponse>): void;
        abstract UpdateTournamentFormat(call: grpc_1.ServerUnaryCall<UpdateTournamentFormatRequest, UpdateTournamentFormatResponse>, callback: grpc_1.sendUnaryData<UpdateTournamentFormatResponse>): void;
        abstract DeleteTournamentFormat(call: grpc_1.ServerUnaryCall<DeleteTournamentFormatRequest, DeleteTournamentFormatResponse>, callback: grpc_1.sendUnaryData<DeleteTournamentFormatResponse>): void;
        abstract CreateTournament(call: grpc_1.ServerUnaryCall<CreateTournamentRequest, CreateTournamentResponse>, callback: grpc_1.sendUnaryData<CreateTournamentResponse>): void;
        abstract GetTournament(call: grpc_1.ServerUnaryCall<GetTournamentRequest, GetTournamentResponse>, callback: grpc_1.sendUnaryData<GetTournamentResponse>): void;
        abstract ListTournaments(call: grpc_1.ServerUnaryCall<ListTournamentsRequest, ListTournamentsResponse>, callback: grpc_1.sendUnaryData<ListTournamentsResponse>): void;
        abstract UpdateTournament(call: grpc_1.ServerUnaryCall<UpdateTournamentRequest, UpdateTournamentResponse>, callback: grpc_1.sendUnaryData<UpdateTournamentResponse>): void;
        abstract DeleteTournament(call: grpc_1.ServerUnaryCall<DeleteTournamentRequest, DeleteTournamentResponse>, callback: grpc_1.sendUnaryData<DeleteTournamentResponse>): void;
        abstract AcceptInvitation(call: grpc_1.ServerUnaryCall<AcceptInvitationRequest, AcceptInvitationResponse>, callback: grpc_1.sendUnaryData<AcceptInvitationResponse>): void;
        abstract DeclineInvitation(call: grpc_1.ServerUnaryCall<DeclineInvitationRequest, DeclineInvitationResponse>, callback: grpc_1.sendUnaryData<DeclineInvitationResponse>): void;
        abstract GetInvitationStatus(call: grpc_1.ServerUnaryCall<GetInvitationStatusRequest, GetInvitationStatusResponse>, callback: grpc_1.sendUnaryData<GetInvitationStatusResponse>): void;
        abstract ResendInvitation(call: grpc_1.ServerUnaryCall<ResendInvitationRequest, ResendInvitationResponse>, callback: grpc_1.sendUnaryData<ResendInvitationResponse>): void;
        abstract GetInvitationsByUser(call: grpc_1.ServerUnaryCall<GetInvitationsByUserRequest, GetInvitationsByUserResponse>, callback: grpc_1.sendUnaryData<GetInvitationsByUserResponse>): void;
        abstract BulkAcceptInvitations(call: grpc_1.ServerUnaryCall<BulkAcceptInvitationsRequest, BulkAcceptInvitationsResponse>, callback: grpc_1.sendUnaryData<BulkAcceptInvitationsResponse>): void;
        abstract BulkDeclineInvitations(call: grpc_1.ServerUnaryCall<BulkDeclineInvitationsRequest, BulkDeclineInvitationsResponse>, callback: grpc_1.sendUnaryData<BulkDeclineInvitationsResponse>): void;
        abstract GetAllInvitations(call: grpc_1.ServerUnaryCall<GetAllInvitationsRequest, GetAllInvitationsResponse>, callback: grpc_1.sendUnaryData<GetAllInvitationsResponse>): void;
        abstract BulkResendInvitations(call: grpc_1.ServerUnaryCall<BulkResendInvitationsRequest, BulkResendInvitationsResponse>, callback: grpc_1.sendUnaryData<BulkResendInvitationsResponse>): void;
    }
    export class TournamentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTournamentServiceService.definition, "TournamentService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateLeague: GrpcUnaryServiceInterface<CreateLeagueRequest, CreateLeagueResponse> = (message: CreateLeagueRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateLeagueResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateLeagueResponse>, callback?: grpc_1.requestCallback<CreateLeagueResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateLeague(message, metadata, options, callback);
        };
        GetLeague: GrpcUnaryServiceInterface<GetLeagueRequest, GetLeagueResponse> = (message: GetLeagueRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetLeagueResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetLeagueResponse>, callback?: grpc_1.requestCallback<GetLeagueResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLeague(message, metadata, options, callback);
        };
        ListLeagues: GrpcUnaryServiceInterface<ListLeaguesRequest, ListLeaguesResponse> = (message: ListLeaguesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListLeaguesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListLeaguesResponse>, callback?: grpc_1.requestCallback<ListLeaguesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListLeagues(message, metadata, options, callback);
        };
        UpdateLeague: GrpcUnaryServiceInterface<UpdateLeagueRequest, UpdateLeagueResponse> = (message: UpdateLeagueRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateLeagueResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateLeagueResponse>, callback?: grpc_1.requestCallback<UpdateLeagueResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateLeague(message, metadata, options, callback);
        };
        DeleteLeague: GrpcUnaryServiceInterface<DeleteLeagueRequest, DeleteLeagueResponse> = (message: DeleteLeagueRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteLeagueResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteLeagueResponse>, callback?: grpc_1.requestCallback<DeleteLeagueResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteLeague(message, metadata, options, callback);
        };
        CreateTournamentFormat: GrpcUnaryServiceInterface<CreateTournamentFormatRequest, CreateTournamentFormatResponse> = (message: CreateTournamentFormatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateTournamentFormatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateTournamentFormatResponse>, callback?: grpc_1.requestCallback<CreateTournamentFormatResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateTournamentFormat(message, metadata, options, callback);
        };
        GetTournamentFormat: GrpcUnaryServiceInterface<GetTournamentFormatRequest, GetTournamentFormatResponse> = (message: GetTournamentFormatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTournamentFormatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTournamentFormatResponse>, callback?: grpc_1.requestCallback<GetTournamentFormatResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTournamentFormat(message, metadata, options, callback);
        };
        ListTournamentFormats: GrpcUnaryServiceInterface<ListTournamentFormatsRequest, ListTournamentFormatsResponse> = (message: ListTournamentFormatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListTournamentFormatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListTournamentFormatsResponse>, callback?: grpc_1.requestCallback<ListTournamentFormatsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListTournamentFormats(message, metadata, options, callback);
        };
        UpdateTournamentFormat: GrpcUnaryServiceInterface<UpdateTournamentFormatRequest, UpdateTournamentFormatResponse> = (message: UpdateTournamentFormatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateTournamentFormatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateTournamentFormatResponse>, callback?: grpc_1.requestCallback<UpdateTournamentFormatResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateTournamentFormat(message, metadata, options, callback);
        };
        DeleteTournamentFormat: GrpcUnaryServiceInterface<DeleteTournamentFormatRequest, DeleteTournamentFormatResponse> = (message: DeleteTournamentFormatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTournamentFormatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTournamentFormatResponse>, callback?: grpc_1.requestCallback<DeleteTournamentFormatResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteTournamentFormat(message, metadata, options, callback);
        };
        CreateTournament: GrpcUnaryServiceInterface<CreateTournamentRequest, CreateTournamentResponse> = (message: CreateTournamentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateTournamentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateTournamentResponse>, callback?: grpc_1.requestCallback<CreateTournamentResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateTournament(message, metadata, options, callback);
        };
        GetTournament: GrpcUnaryServiceInterface<GetTournamentRequest, GetTournamentResponse> = (message: GetTournamentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTournamentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTournamentResponse>, callback?: grpc_1.requestCallback<GetTournamentResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTournament(message, metadata, options, callback);
        };
        ListTournaments: GrpcUnaryServiceInterface<ListTournamentsRequest, ListTournamentsResponse> = (message: ListTournamentsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListTournamentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListTournamentsResponse>, callback?: grpc_1.requestCallback<ListTournamentsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListTournaments(message, metadata, options, callback);
        };
        UpdateTournament: GrpcUnaryServiceInterface<UpdateTournamentRequest, UpdateTournamentResponse> = (message: UpdateTournamentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateTournamentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateTournamentResponse>, callback?: grpc_1.requestCallback<UpdateTournamentResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateTournament(message, metadata, options, callback);
        };
        DeleteTournament: GrpcUnaryServiceInterface<DeleteTournamentRequest, DeleteTournamentResponse> = (message: DeleteTournamentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTournamentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTournamentResponse>, callback?: grpc_1.requestCallback<DeleteTournamentResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteTournament(message, metadata, options, callback);
        };
        AcceptInvitation: GrpcUnaryServiceInterface<AcceptInvitationRequest, AcceptInvitationResponse> = (message: AcceptInvitationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AcceptInvitationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AcceptInvitationResponse>, callback?: grpc_1.requestCallback<AcceptInvitationResponse>): grpc_1.ClientUnaryCall => {
            return super.AcceptInvitation(message, metadata, options, callback);
        };
        DeclineInvitation: GrpcUnaryServiceInterface<DeclineInvitationRequest, DeclineInvitationResponse> = (message: DeclineInvitationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeclineInvitationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeclineInvitationResponse>, callback?: grpc_1.requestCallback<DeclineInvitationResponse>): grpc_1.ClientUnaryCall => {
            return super.DeclineInvitation(message, metadata, options, callback);
        };
        GetInvitationStatus: GrpcUnaryServiceInterface<GetInvitationStatusRequest, GetInvitationStatusResponse> = (message: GetInvitationStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInvitationStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInvitationStatusResponse>, callback?: grpc_1.requestCallback<GetInvitationStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInvitationStatus(message, metadata, options, callback);
        };
        ResendInvitation: GrpcUnaryServiceInterface<ResendInvitationRequest, ResendInvitationResponse> = (message: ResendInvitationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResendInvitationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResendInvitationResponse>, callback?: grpc_1.requestCallback<ResendInvitationResponse>): grpc_1.ClientUnaryCall => {
            return super.ResendInvitation(message, metadata, options, callback);
        };
        GetInvitationsByUser: GrpcUnaryServiceInterface<GetInvitationsByUserRequest, GetInvitationsByUserResponse> = (message: GetInvitationsByUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInvitationsByUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInvitationsByUserResponse>, callback?: grpc_1.requestCallback<GetInvitationsByUserResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInvitationsByUser(message, metadata, options, callback);
        };
        BulkAcceptInvitations: GrpcUnaryServiceInterface<BulkAcceptInvitationsRequest, BulkAcceptInvitationsResponse> = (message: BulkAcceptInvitationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BulkAcceptInvitationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BulkAcceptInvitationsResponse>, callback?: grpc_1.requestCallback<BulkAcceptInvitationsResponse>): grpc_1.ClientUnaryCall => {
            return super.BulkAcceptInvitations(message, metadata, options, callback);
        };
        BulkDeclineInvitations: GrpcUnaryServiceInterface<BulkDeclineInvitationsRequest, BulkDeclineInvitationsResponse> = (message: BulkDeclineInvitationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BulkDeclineInvitationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BulkDeclineInvitationsResponse>, callback?: grpc_1.requestCallback<BulkDeclineInvitationsResponse>): grpc_1.ClientUnaryCall => {
            return super.BulkDeclineInvitations(message, metadata, options, callback);
        };
        GetAllInvitations: GrpcUnaryServiceInterface<GetAllInvitationsRequest, GetAllInvitationsResponse> = (message: GetAllInvitationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllInvitationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllInvitationsResponse>, callback?: grpc_1.requestCallback<GetAllInvitationsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllInvitations(message, metadata, options, callback);
        };
        BulkResendInvitations: GrpcUnaryServiceInterface<BulkResendInvitationsRequest, BulkResendInvitationsResponse> = (message: BulkResendInvitationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BulkResendInvitationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BulkResendInvitationsResponse>, callback?: grpc_1.requestCallback<BulkResendInvitationsResponse>): grpc_1.ClientUnaryCall => {
            return super.BulkResendInvitations(message, metadata, options, callback);
        };
    }
}
