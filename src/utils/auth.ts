/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace auth {
    export class SignUpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            userRole?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactPersonNumber?: string;
            contactEmail?: string;
            nationalID?: string;
            schoolAttended?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            safeguardingCertificate?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("schoolID" in data && data.schoolID != undefined) {
                    this.schoolID = data.schoolID;
                }
                if ("schoolName" in data && data.schoolName != undefined) {
                    this.schoolName = data.schoolName;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("province" in data && data.province != undefined) {
                    this.province = data.province;
                }
                if ("district" in data && data.district != undefined) {
                    this.district = data.district;
                }
                if ("schoolType" in data && data.schoolType != undefined) {
                    this.schoolType = data.schoolType;
                }
                if ("contactPersonName" in data && data.contactPersonName != undefined) {
                    this.contactPersonName = data.contactPersonName;
                }
                if ("contactPersonNumber" in data && data.contactPersonNumber != undefined) {
                    this.contactPersonNumber = data.contactPersonNumber;
                }
                if ("contactEmail" in data && data.contactEmail != undefined) {
                    this.contactEmail = data.contactEmail;
                }
                if ("nationalID" in data && data.nationalID != undefined) {
                    this.nationalID = data.nationalID;
                }
                if ("schoolAttended" in data && data.schoolAttended != undefined) {
                    this.schoolAttended = data.schoolAttended;
                }
                if ("graduationYear" in data && data.graduationYear != undefined) {
                    this.graduationYear = data.graduationYear;
                }
                if ("roleInterestedIn" in data && data.roleInterestedIn != undefined) {
                    this.roleInterestedIn = data.roleInterestedIn;
                }
                if ("safeguardingCertificate" in data && data.safeguardingCertificate != undefined) {
                    this.safeguardingCertificate = data.safeguardingCertificate;
                }
            }
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set dateOfBirth(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get schoolID() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set schoolID(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get schoolName() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set schoolName(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get province() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set province(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get district() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set district(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get schoolType() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set schoolType(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get contactPersonName() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set contactPersonName(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get contactPersonNumber() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set contactPersonNumber(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get contactEmail() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set contactEmail(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get nationalID() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set nationalID(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get schoolAttended() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set schoolAttended(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get graduationYear() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set graduationYear(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get roleInterestedIn() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set roleInterestedIn(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get safeguardingCertificate() {
            return pb_1.Message.getFieldWithDefault(this, 20, new Uint8Array(0)) as Uint8Array;
        }
        set safeguardingCertificate(value: Uint8Array) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            userRole?: string;
            dateOfBirth?: string;
            schoolID?: number;
            schoolName?: string;
            country?: string;
            province?: string;
            district?: string;
            schoolType?: string;
            contactPersonName?: string;
            contactPersonNumber?: string;
            contactEmail?: string;
            nationalID?: string;
            schoolAttended?: string;
            graduationYear?: number;
            roleInterestedIn?: string;
            safeguardingCertificate?: Uint8Array;
        }): SignUpRequest {
            const message = new SignUpRequest({});
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = data.dateOfBirth;
            }
            if (data.schoolID != null) {
                message.schoolID = data.schoolID;
            }
            if (data.schoolName != null) {
                message.schoolName = data.schoolName;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.province != null) {
                message.province = data.province;
            }
            if (data.district != null) {
                message.district = data.district;
            }
            if (data.schoolType != null) {
                message.schoolType = data.schoolType;
            }
            if (data.contactPersonName != null) {
                message.contactPersonName = data.contactPersonName;
            }
            if (data.contactPersonNumber != null) {
                message.contactPersonNumber = data.contactPersonNumber;
            }
            if (data.contactEmail != null) {
                message.contactEmail = data.contactEmail;
            }
            if (data.nationalID != null) {
                message.nationalID = data.nationalID;
            }
            if (data.schoolAttended != null) {
                message.schoolAttended = data.schoolAttended;
            }
            if (data.graduationYear != null) {
                message.graduationYear = data.graduationYear;
            }
            if (data.roleInterestedIn != null) {
                message.roleInterestedIn = data.roleInterestedIn;
            }
            if (data.safeguardingCertificate != null) {
                message.safeguardingCertificate = data.safeguardingCertificate;
            }
            return message;
        }
        toObject() {
            const data: {
                firstName?: string;
                lastName?: string;
                email?: string;
                password?: string;
                userRole?: string;
                dateOfBirth?: string;
                schoolID?: number;
                schoolName?: string;
                country?: string;
                province?: string;
                district?: string;
                schoolType?: string;
                contactPersonName?: string;
                contactPersonNumber?: string;
                contactEmail?: string;
                nationalID?: string;
                schoolAttended?: string;
                graduationYear?: number;
                roleInterestedIn?: string;
                safeguardingCertificate?: Uint8Array;
            } = {};
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth;
            }
            if (this.schoolID != null) {
                data.schoolID = this.schoolID;
            }
            if (this.schoolName != null) {
                data.schoolName = this.schoolName;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.province != null) {
                data.province = this.province;
            }
            if (this.district != null) {
                data.district = this.district;
            }
            if (this.schoolType != null) {
                data.schoolType = this.schoolType;
            }
            if (this.contactPersonName != null) {
                data.contactPersonName = this.contactPersonName;
            }
            if (this.contactPersonNumber != null) {
                data.contactPersonNumber = this.contactPersonNumber;
            }
            if (this.contactEmail != null) {
                data.contactEmail = this.contactEmail;
            }
            if (this.nationalID != null) {
                data.nationalID = this.nationalID;
            }
            if (this.schoolAttended != null) {
                data.schoolAttended = this.schoolAttended;
            }
            if (this.graduationYear != null) {
                data.graduationYear = this.graduationYear;
            }
            if (this.roleInterestedIn != null) {
                data.roleInterestedIn = this.roleInterestedIn;
            }
            if (this.safeguardingCertificate != null) {
                data.safeguardingCertificate = this.safeguardingCertificate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firstName.length)
                writer.writeString(1, this.firstName);
            if (this.lastName.length)
                writer.writeString(2, this.lastName);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.password.length)
                writer.writeString(4, this.password);
            if (this.userRole.length)
                writer.writeString(5, this.userRole);
            if (this.dateOfBirth.length)
                writer.writeString(6, this.dateOfBirth);
            if (this.schoolID != 0)
                writer.writeInt32(7, this.schoolID);
            if (this.schoolName.length)
                writer.writeString(8, this.schoolName);
            if (this.country.length)
                writer.writeString(9, this.country);
            if (this.province.length)
                writer.writeString(10, this.province);
            if (this.district.length)
                writer.writeString(11, this.district);
            if (this.schoolType.length)
                writer.writeString(12, this.schoolType);
            if (this.contactPersonName.length)
                writer.writeString(13, this.contactPersonName);
            if (this.contactPersonNumber.length)
                writer.writeString(14, this.contactPersonNumber);
            if (this.contactEmail.length)
                writer.writeString(15, this.contactEmail);
            if (this.nationalID.length)
                writer.writeString(16, this.nationalID);
            if (this.schoolAttended.length)
                writer.writeString(17, this.schoolAttended);
            if (this.graduationYear != 0)
                writer.writeInt32(18, this.graduationYear);
            if (this.roleInterestedIn.length)
                writer.writeString(19, this.roleInterestedIn);
            if (this.safeguardingCertificate.length)
                writer.writeBytes(20, this.safeguardingCertificate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.firstName = reader.readString();
                        break;
                    case 2:
                        message.lastName = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    case 5:
                        message.userRole = reader.readString();
                        break;
                    case 6:
                        message.dateOfBirth = reader.readString();
                        break;
                    case 7:
                        message.schoolID = reader.readInt32();
                        break;
                    case 8:
                        message.schoolName = reader.readString();
                        break;
                    case 9:
                        message.country = reader.readString();
                        break;
                    case 10:
                        message.province = reader.readString();
                        break;
                    case 11:
                        message.district = reader.readString();
                        break;
                    case 12:
                        message.schoolType = reader.readString();
                        break;
                    case 13:
                        message.contactPersonName = reader.readString();
                        break;
                    case 14:
                        message.contactPersonNumber = reader.readString();
                        break;
                    case 15:
                        message.contactEmail = reader.readString();
                        break;
                    case 16:
                        message.nationalID = reader.readString();
                        break;
                    case 17:
                        message.schoolAttended = reader.readString();
                        break;
                    case 18:
                        message.graduationYear = reader.readInt32();
                        break;
                    case 19:
                        message.roleInterestedIn = reader.readString();
                        break;
                    case 20:
                        message.safeguardingCertificate = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpRequest {
            return SignUpRequest.deserialize(bytes);
        }
    }
    export class SignUpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): SignUpResponse {
            const message = new SignUpResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignUpResponse {
            return SignUpResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            token?: string;
            userRole?: string;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userRole" in data && data.userRole != undefined) {
                    this.userRole = data.userRole;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userRole() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userRole(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            token?: string;
            userRole?: string;
            userID?: number;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userRole != null) {
                message.userRole = data.userRole;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                token?: string;
                userRole?: string;
                userID?: number;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userRole != null) {
                data.userRole = this.userRole;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.userRole.length)
                writer.writeString(3, this.userRole);
            if (this.userID != 0)
                writer.writeInt32(4, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        message.userRole = reader.readString();
                        break;
                    case 4:
                        message.userID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            SignUp: {
                path: "/auth.AuthService/SignUp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignUpRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignUpRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignUpResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignUpResponse.deserialize(new Uint8Array(bytes))
            },
            Login: {
                path: "/auth.AuthService/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SignUp(call: grpc_1.ServerUnaryCall<SignUpRequest, SignUpResponse>, callback: grpc_1.sendUnaryData<SignUpResponse>): void;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SignUp: GrpcUnaryServiceInterface<SignUpRequest, SignUpResponse> = (message: SignUpRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, callback?: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall => {
            return super.SignUp(message, metadata, options, callback);
        };
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
    }
}
